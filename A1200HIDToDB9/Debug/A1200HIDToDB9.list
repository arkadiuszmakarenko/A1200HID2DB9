
A1200HIDToDB9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008a60  08008a60  00018a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a80  08008a80  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008a80  08008a80  00018a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a88  08008a88  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a88  08008a88  00018a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a8c  08008a8c  00018a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08008a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000844  200000c4  08008b54  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20000908  08008b54  00020908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022492  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000496a  00000000  00000000  00042586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00046ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  000480c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a22b  00000000  00000000  000490e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f2c  00000000  00000000  0006330b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093c6f  00000000  00000000  0007c237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010fea6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a18  00000000  00000000  0010fefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000c4 	.word	0x200000c4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008a48 	.word	0x08008a48

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000c8 	.word	0x200000c8
 80001d0:	08008a48 	.word	0x08008a48

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
 80004e6:	4b31      	ldr	r3, [pc, #196]	; (80005ac <MX_GPIO_Init+0xe0>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a30      	ldr	r2, [pc, #192]	; (80005ac <MX_GPIO_Init+0xe0>)
 80004ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <MX_GPIO_Init+0xe0>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a29      	ldr	r2, [pc, #164]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b27      	ldr	r3, [pc, #156]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a22      	ldr	r2, [pc, #136]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_GPIO_Init+0xe0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_GPIO_Init+0xe0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a1b      	ldr	r2, [pc, #108]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2101      	movs	r1, #1
 8000556:	4816      	ldr	r0, [pc, #88]	; (80005b0 <MX_GPIO_Init+0xe4>)
 8000558:	f000 feee 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RB_Pin|LB_Pin|MB_Pin|RHQ_Pin
 800055c:	2201      	movs	r2, #1
 800055e:	f24c 01f8 	movw	r1, #49400	; 0xc0f8
 8000562:	4814      	ldr	r0, [pc, #80]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000564:	f000 fee8 	bl	8001338 <HAL_GPIO_WritePin>
                          |LVQ_Pin|BH_Pin|FV_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000568:	2301      	movs	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2300      	movs	r3, #0
 8000576:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4619      	mov	r1, r3
 800057e:	480c      	ldr	r0, [pc, #48]	; (80005b0 <MX_GPIO_Init+0xe4>)
 8000580:	f000 fd56 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RB_Pin|LB_Pin|MB_Pin|RHQ_Pin
 8000584:	f24c 03f8 	movw	r3, #49400	; 0xc0f8
 8000588:	617b      	str	r3, [r7, #20]
                          |LVQ_Pin|BH_Pin|FV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <MX_GPIO_Init+0xe8>)
 800059e:	f000 fd47 	bl	8001030 <HAL_GPIO_Init>

}
 80005a2:	bf00      	nop
 80005a4:	3728      	adds	r7, #40	; 0x28
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020800 	.word	0x40020800
 80005b4:	40020400 	.word	0x40020400

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fbf0 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f816 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f7ff ff82 	bl	80004cc <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80005c8:	f007 fe56 	bl	8008278 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80005cc:	f000 fade 	bl	8000b8c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d0:	f000 fb2a 	bl	8000c28 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2) ;
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <main+0x30>)
 80005d6:	f003 f91d 	bl	8003814 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3) ;
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <main+0x34>)
 80005dc:	f003 f91a 	bl	8003814 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005e0:	f007 fe7a 	bl	80082d8 <MX_USB_HOST_Process>
 80005e4:	e7fc      	b.n	80005e0 <main+0x28>
 80005e6:	bf00      	nop
 80005e8:	2000018c 	.word	0x2000018c
 80005ec:	20000144 	.word	0x20000144

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f008 f952 	bl	80088a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <SystemClock_Config+0xd0>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000668:	23a8      	movs	r3, #168	; 0xa8
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066c:	2304      	movs	r3, #4
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000670:	2307      	movs	r3, #7
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fbe7 	bl	8002e4c <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000684:	f000 f840 	bl	8000708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2102      	movs	r1, #2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fe4b 	bl	8003340 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b0:	f000 f82a 	bl	8000708 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d101      	bne.n	80006da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006d6:	f000 fb85 	bl	8000de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006e2:	d101      	bne.n	80006e8 <HAL_TIM_PeriodElapsedCallback+0x24>
   ProcessX_IRQ();
 80006e4:	f000 f816 	bl	8000714 <ProcessX_IRQ>
  }

  if (htim->Instance == TIM3) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a05      	ldr	r2, [pc, #20]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d101      	bne.n	80006f6 <HAL_TIM_PeriodElapsedCallback+0x32>
	  ProcessY_IRQ();
 80006f2:	f000 f899 	bl	8000828 <ProcessY_IRQ>
  }

  /* USER CODE END Callback 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40014400 	.word	0x40014400
 8000704:	40000400 	.word	0x40000400

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <ProcessX_IRQ>:
		HAL_GPIO_WritePin(MB_GPIO_Port, RB_Pin, !(mousemap->buttons[1]));
		HAL_GPIO_WritePin(RB_GPIO_Port, MB_Pin, !(mousemap->buttons[2]));
	}
}

void ProcessX_IRQ() {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

	// Process X output
	if (mouseDistanceX > 0) {
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <ProcessX_IRQ+0x100>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	b21b      	sxth	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	dd63      	ble.n	80007ea <ProcessX_IRQ+0xd6>
		// Set the output pins according to the current phase BH RHQ FV LVQ

		if (mouseEncoderPhaseX == 0)
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <ProcessX_IRQ+0x104>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b25b      	sxtb	r3, r3
 8000728:	2b00      	cmp	r3, #0
 800072a:	d104      	bne.n	8000736 <ProcessX_IRQ+0x22>
			HAL_GPIO_WritePin(BH_GPIO_Port, BH_Pin, !(1));	// Set X1 to 1
 800072c:	2200      	movs	r2, #0
 800072e:	2140      	movs	r1, #64	; 0x40
 8000730:	483a      	ldr	r0, [pc, #232]	; (800081c <ProcessX_IRQ+0x108>)
 8000732:	f000 fe01 	bl	8001338 <HAL_GPIO_WritePin>
		if (mouseEncoderPhaseX == 1)
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <ProcessX_IRQ+0x104>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b25b      	sxtb	r3, r3
 800073c:	2b01      	cmp	r3, #1
 800073e:	d104      	bne.n	800074a <ProcessX_IRQ+0x36>
			HAL_GPIO_WritePin(RHQ_GPIO_Port, RHQ_Pin, !(1));	// Set X2 to 1
 8000740:	2200      	movs	r2, #0
 8000742:	2110      	movs	r1, #16
 8000744:	4835      	ldr	r0, [pc, #212]	; (800081c <ProcessX_IRQ+0x108>)
 8000746:	f000 fdf7 	bl	8001338 <HAL_GPIO_WritePin>
		if (mouseEncoderPhaseX == 2)
 800074a:	4b33      	ldr	r3, [pc, #204]	; (8000818 <ProcessX_IRQ+0x104>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b25b      	sxtb	r3, r3
 8000750:	2b02      	cmp	r3, #2
 8000752:	d104      	bne.n	800075e <ProcessX_IRQ+0x4a>
			HAL_GPIO_WritePin(BH_GPIO_Port, BH_Pin, !(0));	// Set X1 to 0
 8000754:	2201      	movs	r2, #1
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	4830      	ldr	r0, [pc, #192]	; (800081c <ProcessX_IRQ+0x108>)
 800075a:	f000 fded 	bl	8001338 <HAL_GPIO_WritePin>
		if (mouseEncoderPhaseX == 3)
 800075e:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <ProcessX_IRQ+0x104>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b25b      	sxtb	r3, r3
 8000764:	2b03      	cmp	r3, #3
 8000766:	d104      	bne.n	8000772 <ProcessX_IRQ+0x5e>
			HAL_GPIO_WritePin(RHQ_GPIO_Port, RHQ_Pin, !(0));	// Set X2 to 0
 8000768:	2201      	movs	r2, #1
 800076a:	2110      	movs	r1, #16
 800076c:	482b      	ldr	r0, [pc, #172]	; (800081c <ProcessX_IRQ+0x108>)
 800076e:	f000 fde3 	bl	8001338 <HAL_GPIO_WritePin>

		// Change phase
		if (mouseDirectionX == 0)
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <ProcessX_IRQ+0x10c>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b25b      	sxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d109      	bne.n	8000790 <ProcessX_IRQ+0x7c>
			mouseEncoderPhaseX--;
 800077c:	4b26      	ldr	r3, [pc, #152]	; (8000818 <ProcessX_IRQ+0x104>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b25b      	sxtb	r3, r3
 8000782:	b2db      	uxtb	r3, r3
 8000784:	3b01      	subs	r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	b25a      	sxtb	r2, r3
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <ProcessX_IRQ+0x104>)
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e008      	b.n	80007a2 <ProcessX_IRQ+0x8e>
		else
			mouseEncoderPhaseX++;
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <ProcessX_IRQ+0x104>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	3301      	adds	r3, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	b25a      	sxtb	r2, r3
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <ProcessX_IRQ+0x104>)
 80007a0:	701a      	strb	r2, [r3, #0]

		// Decrement the distance left to move
		mouseDistanceX--;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <ProcessX_IRQ+0x100>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	3b01      	subs	r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <ProcessX_IRQ+0x100>)
 80007b2:	801a      	strh	r2, [r3, #0]

		// Range check the phase
		if ((mouseDirectionX == 1) && (mouseEncoderPhaseX > 3))
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <ProcessX_IRQ+0x10c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d107      	bne.n	80007ce <ProcessX_IRQ+0xba>
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <ProcessX_IRQ+0x104>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	dd02      	ble.n	80007ce <ProcessX_IRQ+0xba>
			mouseEncoderPhaseX = 0;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <ProcessX_IRQ+0x104>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
		if ((mouseDirectionX == 0) && (mouseEncoderPhaseX < 0))
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <ProcessX_IRQ+0x10c>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d10b      	bne.n	80007f0 <ProcessX_IRQ+0xdc>
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <ProcessX_IRQ+0x104>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	da06      	bge.n	80007f0 <ProcessX_IRQ+0xdc>
			mouseEncoderPhaseX = 3;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <ProcessX_IRQ+0x104>)
 80007e4:	2203      	movs	r2, #3
 80007e6:	701a      	strb	r2, [r3, #0]
 80007e8:	e002      	b.n	80007f0 <ProcessX_IRQ+0xdc>
	} else {
		// Reset the phase if the mouse isn't moving
		mouseEncoderPhaseX = 0;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <ProcessX_IRQ+0x104>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
	}

	// Set the timer top value for the next interrupt
	if (xTimerTop == 0) {
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <ProcessX_IRQ+0x110>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d104      	bne.n	8000804 <ProcessX_IRQ+0xf0>
		TIM2->ARR = 1;
 80007fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007fe:	2201      	movs	r2, #1
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
	} else {
		TIM2->ARR = xTimerTop;
	}

}
 8000802:	e005      	b.n	8000810 <ProcessX_IRQ+0xfc>
		TIM2->ARR = xTimerTop;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <ProcessX_IRQ+0x110>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000e4 	.word	0x200000e4
 8000818:	200000e1 	.word	0x200000e1
 800081c:	40020400 	.word	0x40020400
 8000820:	200000e0 	.word	0x200000e0
 8000824:	20000000 	.word	0x20000000

08000828 <ProcessY_IRQ>:

void ProcessY_IRQ() {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

// Process Y output
	if (mouseDistanceY > 0) {
 800082c:	4b3d      	ldr	r3, [pc, #244]	; (8000924 <ProcessY_IRQ+0xfc>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	b21b      	sxth	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	dd63      	ble.n	80008fe <ProcessY_IRQ+0xd6>
		// Set the output pins according to the current phase
		if (mouseEncoderPhaseY == 3)
 8000836:	4b3c      	ldr	r3, [pc, #240]	; (8000928 <ProcessY_IRQ+0x100>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b25b      	sxtb	r3, r3
 800083c:	2b03      	cmp	r3, #3
 800083e:	d104      	bne.n	800084a <ProcessY_IRQ+0x22>
			HAL_GPIO_WritePin(FV_GPIO_Port, LVQ_Pin, !(0));	// Set Y1 to 0
 8000840:	2201      	movs	r2, #1
 8000842:	2120      	movs	r1, #32
 8000844:	4839      	ldr	r0, [pc, #228]	; (800092c <ProcessY_IRQ+0x104>)
 8000846:	f000 fd77 	bl	8001338 <HAL_GPIO_WritePin>
		if (mouseEncoderPhaseY == 2)
 800084a:	4b37      	ldr	r3, [pc, #220]	; (8000928 <ProcessY_IRQ+0x100>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b25b      	sxtb	r3, r3
 8000850:	2b02      	cmp	r3, #2
 8000852:	d104      	bne.n	800085e <ProcessY_IRQ+0x36>
			HAL_GPIO_WritePin(LVQ_GPIO_Port, FV_Pin, !(0));	// Set Y2 to 0
 8000854:	2201      	movs	r2, #1
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	4834      	ldr	r0, [pc, #208]	; (800092c <ProcessY_IRQ+0x104>)
 800085a:	f000 fd6d 	bl	8001338 <HAL_GPIO_WritePin>
		if (mouseEncoderPhaseY == 1)
 800085e:	4b32      	ldr	r3, [pc, #200]	; (8000928 <ProcessY_IRQ+0x100>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b25b      	sxtb	r3, r3
 8000864:	2b01      	cmp	r3, #1
 8000866:	d104      	bne.n	8000872 <ProcessY_IRQ+0x4a>
			HAL_GPIO_WritePin(FV_GPIO_Port, LVQ_Pin, !(1));	// Set Y1 to 1
 8000868:	2200      	movs	r2, #0
 800086a:	2120      	movs	r1, #32
 800086c:	482f      	ldr	r0, [pc, #188]	; (800092c <ProcessY_IRQ+0x104>)
 800086e:	f000 fd63 	bl	8001338 <HAL_GPIO_WritePin>
		if (mouseEncoderPhaseY == 0)
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <ProcessY_IRQ+0x100>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b25b      	sxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d104      	bne.n	8000886 <ProcessY_IRQ+0x5e>
			HAL_GPIO_WritePin(LVQ_GPIO_Port, FV_Pin, !(1));	// Set Y2 to 1
 800087c:	2200      	movs	r2, #0
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	482a      	ldr	r0, [pc, #168]	; (800092c <ProcessY_IRQ+0x104>)
 8000882:	f000 fd59 	bl	8001338 <HAL_GPIO_WritePin>

		// Change phase
		if (mouseDirectionY == 0)
 8000886:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <ProcessY_IRQ+0x108>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d109      	bne.n	80008a4 <ProcessY_IRQ+0x7c>
			mouseEncoderPhaseY--;
 8000890:	4b25      	ldr	r3, [pc, #148]	; (8000928 <ProcessY_IRQ+0x100>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b25b      	sxtb	r3, r3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	3b01      	subs	r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	b25a      	sxtb	r2, r3
 800089e:	4b22      	ldr	r3, [pc, #136]	; (8000928 <ProcessY_IRQ+0x100>)
 80008a0:	701a      	strb	r2, [r3, #0]
 80008a2:	e008      	b.n	80008b6 <ProcessY_IRQ+0x8e>
		else
			mouseEncoderPhaseY++;
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <ProcessY_IRQ+0x100>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	3301      	adds	r3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <ProcessY_IRQ+0x100>)
 80008b4:	701a      	strb	r2, [r3, #0]

		// Decrement the distance left to move
		mouseDistanceY--;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <ProcessY_IRQ+0xfc>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	b29b      	uxth	r3, r3
 80008be:	3b01      	subs	r3, #1
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <ProcessY_IRQ+0xfc>)
 80008c6:	801a      	strh	r2, [r3, #0]

		// Range check the phase
		if ((mouseDirectionY == 1) && (mouseEncoderPhaseY > 3))
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <ProcessY_IRQ+0x108>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d107      	bne.n	80008e2 <ProcessY_IRQ+0xba>
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <ProcessY_IRQ+0x100>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	2b03      	cmp	r3, #3
 80008da:	dd02      	ble.n	80008e2 <ProcessY_IRQ+0xba>
			mouseEncoderPhaseY = 0;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <ProcessY_IRQ+0x100>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
		if ((mouseDirectionY == 0) && (mouseEncoderPhaseY < 0))
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <ProcessY_IRQ+0x108>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10b      	bne.n	8000904 <ProcessY_IRQ+0xdc>
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <ProcessY_IRQ+0x100>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	da06      	bge.n	8000904 <ProcessY_IRQ+0xdc>
			mouseEncoderPhaseY = 3;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <ProcessY_IRQ+0x100>)
 80008f8:	2203      	movs	r2, #3
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	e002      	b.n	8000904 <ProcessY_IRQ+0xdc>
	} else {
		// Reset the phase if the mouse isn't moving
		mouseEncoderPhaseY = 0;
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <ProcessY_IRQ+0x100>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	}

// Set the timer top value for the next interrupt
	if (yTimerTop == 0) {
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <ProcessY_IRQ+0x10c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b00      	cmp	r3, #0
 800090c:	d103      	bne.n	8000916 <ProcessY_IRQ+0xee>
		TIM3->ARR = 1;
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <ProcessY_IRQ+0x110>)
 8000910:	2201      	movs	r2, #1
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
	} else {
		TIM3->ARR = yTimerTop;
	}

}
 8000914:	e004      	b.n	8000920 <ProcessY_IRQ+0xf8>
		TIM3->ARR = yTimerTop;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <ProcessY_IRQ+0x10c>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <ProcessY_IRQ+0x110>)
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000e6 	.word	0x200000e6
 8000928:	200000e3 	.word	0x200000e3
 800092c:	40020400 	.word	0x40020400
 8000930:	200000e2 	.word	0x200000e2
 8000934:	20000001 	.word	0x20000001
 8000938:	40000400 	.word	0x40000400

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <HAL_MspInit+0x58>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <HAL_MspInit+0x58>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_MspInit+0x58>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_MspInit+0x58>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <HAL_MspInit+0x58>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x58>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2005      	movs	r0, #5
 8000980:	f000 fb2c 	bl	8000fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000984:	2005      	movs	r0, #5
 8000986:	f000 fb45 	bl	8001014 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	2019      	movs	r0, #25
 80009ae:	f000 fb15 	bl	8000fdc <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009b2:	2019      	movs	r0, #25
 80009b4:	f000 fb2e 	bl	8001014 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <HAL_InitTick+0xa0>)
 80009be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c0:	4a1d      	ldr	r2, [pc, #116]	; (8000a38 <HAL_InitTick+0xa0>)
 80009c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c6:	6453      	str	r3, [r2, #68]	; 0x44
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <HAL_InitTick+0xa0>)
 80009ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d4:	f107 0210 	add.w	r2, r7, #16
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 fe96 	bl	8003710 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009e4:	f002 fe80 	bl	80036e8 <HAL_RCC_GetPCLK2Freq>
 80009e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <HAL_InitTick+0xa4>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	0c9b      	lsrs	r3, r3, #18
 80009f4:	3b01      	subs	r3, #1
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_InitTick+0xa8>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <HAL_InitTick+0xac>)
 80009fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a04:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a1a:	f002 feab 	bl	8003774 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d104      	bne.n	8000a2e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a26:	f002 fef5 	bl	8003814 <HAL_TIM_Base_Start_IT>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3730      	adds	r7, #48	; 0x30
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	431bde83 	.word	0x431bde83
 8000a40:	200000fc 	.word	0x200000fc
 8000a44:	40014400 	.word	0x40014400

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ab2:	f002 ff11 	bl	80038d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000fc 	.word	0x200000fc

08000ac0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <TIM2_IRQHandler+0x10>)
 8000ac6:	f002 ff07 	bl	80038d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000018c 	.word	0x2000018c

08000ad4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <TIM3_IRQHandler+0x10>)
 8000ada:	f002 fefd 	bl	80038d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000144 	.word	0x20000144

08000ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <OTG_FS_IRQHandler+0x10>)
 8000aee:	f000 fea7 	bl	8001840 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200005f4 	.word	0x200005f4

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f007 fe82 	bl	8008834 <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20010000 	.word	0x20010000
 8000b5c:	00002000 	.word	0x00002000
 8000b60:	200000e8 	.word	0x200000e8
 8000b64:	20000908 	.word	0x20000908

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <MX_TIM2_Init+0x98>)
 8000baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5376-1;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <MX_TIM2_Init+0x98>)
 8000bb2:	f241 42ff 	movw	r2, #5375	; 0x14ff
 8000bb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_TIM2_Init+0x98>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <MX_TIM2_Init+0x98>)
 8000bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_TIM2_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_TIM2_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bd2:	4814      	ldr	r0, [pc, #80]	; (8000c24 <MX_TIM2_Init+0x98>)
 8000bd4:	f002 fdce 	bl	8003774 <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bde:	f7ff fd93 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	4619      	mov	r1, r3
 8000bee:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_TIM2_Init+0x98>)
 8000bf0:	f002 ff7a 	bl	8003ae8 <HAL_TIM_ConfigClockSource>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bfa:	f7ff fd85 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c06:	463b      	mov	r3, r7
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MX_TIM2_Init+0x98>)
 8000c0c:	f003 f976 	bl	8003efc <HAL_TIMEx_MasterConfigSynchronization>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c16:	f7ff fd77 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000018c 	.word	0x2000018c

08000c28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_TIM3_Init+0x94>)
 8000c46:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <MX_TIM3_Init+0x98>)
 8000c48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5376-1;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_TIM3_Init+0x94>)
 8000c4c:	f241 42ff 	movw	r2, #5375	; 0x14ff
 8000c50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_TIM3_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_TIM3_Init+0x94>)
 8000c5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_TIM3_Init+0x94>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_TIM3_Init+0x94>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c6c:	4813      	ldr	r0, [pc, #76]	; (8000cbc <MX_TIM3_Init+0x94>)
 8000c6e:	f002 fd81 	bl	8003774 <HAL_TIM_Base_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c78:	f7ff fd46 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_TIM3_Init+0x94>)
 8000c8a:	f002 ff2d 	bl	8003ae8 <HAL_TIM_ConfigClockSource>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c94:	f7ff fd38 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_TIM3_Init+0x94>)
 8000ca6:	f003 f929 	bl	8003efc <HAL_TIMEx_MasterConfigSynchronization>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000cb0:	f7ff fd2a 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000144 	.word	0x20000144
 8000cc0:	40000400 	.word	0x40000400

08000cc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd4:	d116      	bne.n	8000d04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_TIM_Base_MspInit+0x80>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_TIM_Base_MspInit+0x80>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_TIM_Base_MspInit+0x80>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	201c      	movs	r0, #28
 8000cf8:	f000 f970 	bl	8000fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cfc:	201c      	movs	r0, #28
 8000cfe:	f000 f989 	bl	8001014 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d02:	e01a      	b.n	8000d3a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <HAL_TIM_Base_MspInit+0x84>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d115      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_TIM_Base_MspInit+0x80>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <HAL_TIM_Base_MspInit+0x80>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_TIM_Base_MspInit+0x80>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	201d      	movs	r0, #29
 8000d30:	f000 f954 	bl	8000fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d34:	201d      	movs	r0, #29
 8000d36:	f000 f96d 	bl	8001014 <HAL_NVIC_EnableIRQ>
}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40000400 	.word	0x40000400

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d52:	490e      	ldr	r1, [pc, #56]	; (8000d8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d54:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d68:	4c0b      	ldr	r4, [pc, #44]	; (8000d98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d76:	f7ff fef7 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f007 fd61 	bl	8008840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fc1b 	bl	80005b8 <main>
  bx  lr    
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8000d90:	08008a90 	.word	0x08008a90
  ldr r2, =_sbss
 8000d94:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8000d98:	20000908 	.word	0x20000908

08000d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC_IRQHandler>
	...

08000da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <HAL_Init+0x40>)
 8000daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_Init+0x40>)
 8000db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_Init+0x40>)
 8000dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f8fc 	bl	8000fc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f7ff fde2 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd4:	f7ff fdb2 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023c00 	.word	0x40023c00

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	2000000c 	.word	0x2000000c
 8000e08:	200001d4 	.word	0x200001d4

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200001d4 	.word	0x200001d4

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffde 	bl	8000e0c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000000c 	.word	0x2000000c

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff4c 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fee:	f7ff ff61 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8000ff2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	68b9      	ldr	r1, [r7, #8]
 8000ff8:	6978      	ldr	r0, [r7, #20]
 8000ffa:	f7ff ffb1 	bl	8000f60 <NVIC_EncodePriority>
 8000ffe:	4602      	mov	r2, r0
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff80 	bl	8000f0c <__NVIC_SetPriority>
}
 800100c:	bf00      	nop
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff54 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e159      	b.n	8001300 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 8148 	bne.w	80012fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80a2 	beq.w	80012fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b57      	ldr	r3, [pc, #348]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a56      	ldr	r2, [pc, #344]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b54      	ldr	r3, [pc, #336]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_GPIO_Init+0x2ec>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a49      	ldr	r2, [pc, #292]	; (8001320 <HAL_GPIO_Init+0x2f0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d019      	beq.n	8001232 <HAL_GPIO_Init+0x202>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a48      	ldr	r2, [pc, #288]	; (8001324 <HAL_GPIO_Init+0x2f4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0x1fe>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a47      	ldr	r2, [pc, #284]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00d      	beq.n	800122a <HAL_GPIO_Init+0x1fa>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a46      	ldr	r2, [pc, #280]	; (800132c <HAL_GPIO_Init+0x2fc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d007      	beq.n	8001226 <HAL_GPIO_Init+0x1f6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a45      	ldr	r2, [pc, #276]	; (8001330 <HAL_GPIO_Init+0x300>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_GPIO_Init+0x1f2>
 800121e:	2304      	movs	r3, #4
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001222:	2307      	movs	r3, #7
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x204>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x204>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4935      	ldr	r1, [pc, #212]	; (800131c <HAL_GPIO_Init+0x2ec>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <HAL_GPIO_Init+0x304>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001276:	4a2f      	ldr	r2, [pc, #188]	; (8001334 <HAL_GPIO_Init+0x304>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_GPIO_Init+0x304>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a0:	4a24      	ldr	r2, [pc, #144]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ca:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f4:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f aea2 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001354:	e003      	b.n	800135e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800136a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136c:	b08f      	sub	sp, #60	; 0x3c
 800136e:	af0a      	add	r7, sp, #40	; 0x28
 8001370:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e054      	b.n	8001426 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f006 ffd6 	bl	8008348 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fe92 	bl	80040e4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	687e      	ldr	r6, [r7, #4]
 80013c8:	466d      	mov	r5, sp
 80013ca:	f106 0410 	add.w	r4, r6, #16
 80013ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013da:	e885 0003 	stmia.w	r5, {r0, r1}
 80013de:	1d33      	adds	r3, r6, #4
 80013e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e2:	6838      	ldr	r0, [r7, #0]
 80013e4:	f002 fe0c 	bl	8004000 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2101      	movs	r1, #1
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 fe89 	bl	8004106 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	687e      	ldr	r6, [r7, #4]
 80013fc:	466d      	mov	r5, sp
 80013fe:	f106 0410 	add.w	r4, r6, #16
 8001402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800140e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001412:	1d33      	adds	r3, r6, #4
 8001414:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f002 fff0 	bl	80043fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800142e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800142e:	b590      	push	{r4, r7, lr}
 8001430:	b089      	sub	sp, #36	; 0x24
 8001432:	af04      	add	r7, sp, #16
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	4608      	mov	r0, r1
 8001438:	4611      	mov	r1, r2
 800143a:	461a      	mov	r2, r3
 800143c:	4603      	mov	r3, r0
 800143e:	70fb      	strb	r3, [r7, #3]
 8001440:	460b      	mov	r3, r1
 8001442:	70bb      	strb	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_HCD_HC_Init+0x28>
 8001452:	2302      	movs	r3, #2
 8001454:	e076      	b.n	8001544 <HAL_HCD_HC_Init+0x116>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	212c      	movs	r1, #44	; 0x2c
 8001464:	fb01 f303 	mul.w	r3, r1, r3
 8001468:	4413      	add	r3, r2
 800146a:	333d      	adds	r3, #61	; 0x3d
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	212c      	movs	r1, #44	; 0x2c
 8001476:	fb01 f303 	mul.w	r3, r1, r3
 800147a:	4413      	add	r3, r2
 800147c:	3338      	adds	r3, #56	; 0x38
 800147e:	787a      	ldrb	r2, [r7, #1]
 8001480:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	212c      	movs	r1, #44	; 0x2c
 8001488:	fb01 f303 	mul.w	r3, r1, r3
 800148c:	4413      	add	r3, r2
 800148e:	3340      	adds	r3, #64	; 0x40
 8001490:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001492:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	212c      	movs	r1, #44	; 0x2c
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	4413      	add	r3, r2
 80014a0:	3339      	adds	r3, #57	; 0x39
 80014a2:	78fa      	ldrb	r2, [r7, #3]
 80014a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	212c      	movs	r1, #44	; 0x2c
 80014ac:	fb01 f303 	mul.w	r3, r1, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	333f      	adds	r3, #63	; 0x3f
 80014b4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	78ba      	ldrb	r2, [r7, #2]
 80014be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014c2:	b2d0      	uxtb	r0, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	212c      	movs	r1, #44	; 0x2c
 80014c8:	fb01 f303 	mul.w	r3, r1, r3
 80014cc:	4413      	add	r3, r2
 80014ce:	333a      	adds	r3, #58	; 0x3a
 80014d0:	4602      	mov	r2, r0
 80014d2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80014d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da09      	bge.n	80014f0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	212c      	movs	r1, #44	; 0x2c
 80014e2:	fb01 f303 	mul.w	r3, r1, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	333b      	adds	r3, #59	; 0x3b
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	e008      	b.n	8001502 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	212c      	movs	r1, #44	; 0x2c
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	4413      	add	r3, r2
 80014fc:	333b      	adds	r3, #59	; 0x3b
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	212c      	movs	r1, #44	; 0x2c
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	4413      	add	r3, r2
 800150e:	333c      	adds	r3, #60	; 0x3c
 8001510:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001514:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	787c      	ldrb	r4, [r7, #1]
 800151c:	78ba      	ldrb	r2, [r7, #2]
 800151e:	78f9      	ldrb	r1, [r7, #3]
 8001520:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4623      	mov	r3, r4
 8001532:	f003 f8dd 	bl	80046f0 <USB_HC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}

0800154c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_HCD_HC_Halt+0x1e>
 8001566:	2302      	movs	r3, #2
 8001568:	e00f      	b.n	800158a <HAL_HCD_HC_Halt+0x3e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fb19 	bl	8004bb2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4603      	mov	r3, r0
 80015a4:	70fb      	strb	r3, [r7, #3]
 80015a6:	460b      	mov	r3, r1
 80015a8:	70bb      	strb	r3, [r7, #2]
 80015aa:	4613      	mov	r3, r2
 80015ac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	212c      	movs	r1, #44	; 0x2c
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	333b      	adds	r3, #59	; 0x3b
 80015bc:	78ba      	ldrb	r2, [r7, #2]
 80015be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	212c      	movs	r1, #44	; 0x2c
 80015c6:	fb01 f303 	mul.w	r3, r1, r3
 80015ca:	4413      	add	r3, r2
 80015cc:	333f      	adds	r3, #63	; 0x3f
 80015ce:	787a      	ldrb	r2, [r7, #1]
 80015d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015d2:	7c3b      	ldrb	r3, [r7, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d112      	bne.n	80015fe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	212c      	movs	r1, #44	; 0x2c
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	3342      	adds	r3, #66	; 0x42
 80015e6:	2203      	movs	r2, #3
 80015e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	212c      	movs	r1, #44	; 0x2c
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	333d      	adds	r3, #61	; 0x3d
 80015f8:	7f3a      	ldrb	r2, [r7, #28]
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	e008      	b.n	8001610 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	212c      	movs	r1, #44	; 0x2c
 8001604:	fb01 f303 	mul.w	r3, r1, r3
 8001608:	4413      	add	r3, r2
 800160a:	3342      	adds	r3, #66	; 0x42
 800160c:	2202      	movs	r2, #2
 800160e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001610:	787b      	ldrb	r3, [r7, #1]
 8001612:	2b03      	cmp	r3, #3
 8001614:	f200 80c6 	bhi.w	80017a4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001631 	.word	0x08001631
 8001624:	08001791 	.word	0x08001791
 8001628:	08001695 	.word	0x08001695
 800162c:	08001713 	.word	0x08001713
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001630:	7c3b      	ldrb	r3, [r7, #16]
 8001632:	2b01      	cmp	r3, #1
 8001634:	f040 80b8 	bne.w	80017a8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001638:	78bb      	ldrb	r3, [r7, #2]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 80b4 	bne.w	80017a8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001640:	8b3b      	ldrh	r3, [r7, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d108      	bne.n	8001658 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	212c      	movs	r1, #44	; 0x2c
 800164c:	fb01 f303 	mul.w	r3, r1, r3
 8001650:	4413      	add	r3, r2
 8001652:	3355      	adds	r3, #85	; 0x55
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	212c      	movs	r1, #44	; 0x2c
 800165e:	fb01 f303 	mul.w	r3, r1, r3
 8001662:	4413      	add	r3, r2
 8001664:	3355      	adds	r3, #85	; 0x55
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	212c      	movs	r1, #44	; 0x2c
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	4413      	add	r3, r2
 8001678:	3342      	adds	r3, #66	; 0x42
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800167e:	e093      	b.n	80017a8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	212c      	movs	r1, #44	; 0x2c
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4413      	add	r3, r2
 800168c:	3342      	adds	r3, #66	; 0x42
 800168e:	2202      	movs	r2, #2
 8001690:	701a      	strb	r2, [r3, #0]
      break;
 8001692:	e089      	b.n	80017a8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001694:	78bb      	ldrb	r3, [r7, #2]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d11d      	bne.n	80016d6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	212c      	movs	r1, #44	; 0x2c
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	3355      	adds	r3, #85	; 0x55
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	212c      	movs	r1, #44	; 0x2c
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	3342      	adds	r3, #66	; 0x42
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016c0:	e073      	b.n	80017aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	212c      	movs	r1, #44	; 0x2c
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	3342      	adds	r3, #66	; 0x42
 80016d0:	2202      	movs	r2, #2
 80016d2:	701a      	strb	r2, [r3, #0]
      break;
 80016d4:	e069      	b.n	80017aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	212c      	movs	r1, #44	; 0x2c
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	3354      	adds	r3, #84	; 0x54
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	212c      	movs	r1, #44	; 0x2c
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	3342      	adds	r3, #66	; 0x42
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
      break;
 80016fc:	e055      	b.n	80017aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	212c      	movs	r1, #44	; 0x2c
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	3342      	adds	r3, #66	; 0x42
 800170c:	2202      	movs	r2, #2
 800170e:	701a      	strb	r2, [r3, #0]
      break;
 8001710:	e04b      	b.n	80017aa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001712:	78bb      	ldrb	r3, [r7, #2]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d11d      	bne.n	8001754 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	212c      	movs	r1, #44	; 0x2c
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	3355      	adds	r3, #85	; 0x55
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d109      	bne.n	8001740 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	212c      	movs	r1, #44	; 0x2c
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	4413      	add	r3, r2
 8001738:	3342      	adds	r3, #66	; 0x42
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800173e:	e034      	b.n	80017aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	212c      	movs	r1, #44	; 0x2c
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	3342      	adds	r3, #66	; 0x42
 800174e:	2202      	movs	r2, #2
 8001750:	701a      	strb	r2, [r3, #0]
      break;
 8001752:	e02a      	b.n	80017aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	212c      	movs	r1, #44	; 0x2c
 800175a:	fb01 f303 	mul.w	r3, r1, r3
 800175e:	4413      	add	r3, r2
 8001760:	3354      	adds	r3, #84	; 0x54
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	212c      	movs	r1, #44	; 0x2c
 800176e:	fb01 f303 	mul.w	r3, r1, r3
 8001772:	4413      	add	r3, r2
 8001774:	3342      	adds	r3, #66	; 0x42
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
      break;
 800177a:	e016      	b.n	80017aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	3342      	adds	r3, #66	; 0x42
 800178a:	2202      	movs	r2, #2
 800178c:	701a      	strb	r2, [r3, #0]
      break;
 800178e:	e00c      	b.n	80017aa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	212c      	movs	r1, #44	; 0x2c
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	4413      	add	r3, r2
 800179c:	3342      	adds	r3, #66	; 0x42
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
      break;
 80017a2:	e002      	b.n	80017aa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80017a4:	bf00      	nop
 80017a6:	e000      	b.n	80017aa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80017a8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	212c      	movs	r1, #44	; 0x2c
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	3344      	adds	r3, #68	; 0x44
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	8b3a      	ldrh	r2, [r7, #24]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	202c      	movs	r0, #44	; 0x2c
 80017c4:	fb00 f303 	mul.w	r3, r0, r3
 80017c8:	440b      	add	r3, r1
 80017ca:	334c      	adds	r3, #76	; 0x4c
 80017cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	212c      	movs	r1, #44	; 0x2c
 80017d4:	fb01 f303 	mul.w	r3, r1, r3
 80017d8:	4413      	add	r3, r2
 80017da:	3360      	adds	r3, #96	; 0x60
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	212c      	movs	r1, #44	; 0x2c
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	3350      	adds	r3, #80	; 0x50
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	212c      	movs	r1, #44	; 0x2c
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	3339      	adds	r3, #57	; 0x39
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3361      	adds	r3, #97	; 0x61
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	222c      	movs	r2, #44	; 0x2c
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	3338      	adds	r3, #56	; 0x38
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	18d1      	adds	r1, r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	f003 f86c 	bl	800490c <USB_HC_StartXfer>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop

08001840 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f002 fd8f 	bl	800437a <USB_GetMode>
 800185c:	4603      	mov	r3, r0
 800185e:	2b01      	cmp	r3, #1
 8001860:	f040 80f6 	bne.w	8001a50 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fd73 	bl	8004354 <USB_ReadInterrupts>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80ec 	beq.w	8001a4e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f002 fd6a 	bl	8004354 <USB_ReadInterrupts>
 8001880:	4603      	mov	r3, r0
 8001882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800188a:	d104      	bne.n	8001896 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001894:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fd5a 	bl	8004354 <USB_ReadInterrupts>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018aa:	d104      	bne.n	80018b6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fd4a 	bl	8004354 <USB_ReadInterrupts>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018ca:	d104      	bne.n	80018d6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 fd3a 	bl	8004354 <USB_ReadInterrupts>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d103      	bne.n	80018f2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2202      	movs	r2, #2
 80018f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fd2c 	bl	8004354 <USB_ReadInterrupts>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001906:	d11c      	bne.n	8001942 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001910:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10f      	bne.n	8001942 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001922:	2110      	movs	r1, #16
 8001924:	6938      	ldr	r0, [r7, #16]
 8001926:	f002 fc3b 	bl	80041a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800192a:	6938      	ldr	r0, [r7, #16]
 800192c:	f002 fc5c 	bl	80041e8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	4618      	mov	r0, r3
 8001938:	f002 fe14 	bl	8004564 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f006 fd73 	bl	8008428 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fd04 	bl	8004354 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001952:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001956:	d102      	bne.n	800195e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f001 fa03 	bl	8002d64 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fcf6 	bl	8004354 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b08      	cmp	r3, #8
 8001970:	d106      	bne.n	8001980 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f006 fd3c 	bl	80083f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2208      	movs	r2, #8
 800197e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f002 fce5 	bl	8004354 <USB_ReadInterrupts>
 800198a:	4603      	mov	r3, r0
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	2b10      	cmp	r3, #16
 8001992:	d101      	bne.n	8001998 <HAL_HCD_IRQHandler+0x158>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_HCD_IRQHandler+0x15a>
 8001998:	2300      	movs	r3, #0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d012      	beq.n	80019c4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699a      	ldr	r2, [r3, #24]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0210 	bic.w	r2, r2, #16
 80019ac:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f001 f906 	bl	8002bc0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699a      	ldr	r2, [r3, #24]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0210 	orr.w	r2, r2, #16
 80019c2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 fcc3 	bl	8004354 <USB_ReadInterrupts>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019d8:	d13a      	bne.n	8001a50 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 f8d6 	bl	8004b90 <USB_HC_ReadInterrupt>
 80019e4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e025      	b.n	8001a38 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d018      	beq.n	8001a32 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	015a      	lsls	r2, r3, #5
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a16:	d106      	bne.n	8001a26 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f8ab 	bl	8001b7a <HCD_HC_IN_IRQHandler>
 8001a24:	e005      	b.n	8001a32 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fcc6 	bl	80023be <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3d4      	bcc.n	80019ec <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	e000      	b.n	8001a50 <HAL_HCD_IRQHandler+0x210>
      return;
 8001a4e:	bf00      	nop
    }
  }
}
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_HCD_Start+0x16>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e013      	b.n	8001a94 <HAL_HCD_Start+0x3e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 fdd6 	bl	800462c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fb1c 	bl	80040c2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_HCD_Stop+0x16>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e00d      	b.n	8001ace <HAL_HCD_Stop+0x32>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 f9d0 	bl	8004e64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 fd78 	bl	80045d8 <USB_ResetPort>
 8001ae8:	4603      	mov	r3, r0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	212c      	movs	r1, #44	; 0x2c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3360      	adds	r3, #96	; 0x60
 8001b0c:	781b      	ldrb	r3, [r3, #0]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	3350      	adds	r3, #80	; 0x50
 8001b34:	681b      	ldr	r3, [r3, #0]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fdbc 	bl	80046cc <USB_GetCurrentFrame>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 fd97 	bl	800469e <USB_GetHostSpeed>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	015a      	lsls	r2, r3, #5
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d119      	bne.n	8001bde <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	015a      	lsls	r2, r3, #5
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2304      	movs	r3, #4
 8001bba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	0151      	lsls	r1, r2, #5
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	440a      	add	r2, r1
 8001bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bd6:	f043 0302 	orr.w	r3, r3, #2
 8001bda:	60d3      	str	r3, [r2, #12]
 8001bdc:	e101      	b.n	8001de2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf4:	d12b      	bne.n	8001c4e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c02:	461a      	mov	r2, r3
 8001c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	212c      	movs	r1, #44	; 0x2c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	3361      	adds	r3, #97	; 0x61
 8001c18:	2207      	movs	r2, #7
 8001c1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	015a      	lsls	r2, r3, #5
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	0151      	lsls	r1, r2, #5
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	440a      	add	r2, r1
 8001c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 ffb3 	bl	8004bb2 <USB_HC_Halt>
 8001c4c:	e0c9      	b.n	8001de2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d109      	bne.n	8001c78 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c70:	461a      	mov	r2, r3
 8001c72:	2320      	movs	r3, #32
 8001c74:	6093      	str	r3, [r2, #8]
 8001c76:	e0b4      	b.n	8001de2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d133      	bne.n	8001cf6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	0151      	lsls	r1, r2, #5
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	440a      	add	r2, r1
 8001ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	212c      	movs	r1, #44	; 0x2c
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	3361      	adds	r3, #97	; 0x61
 8001cbc:	2205      	movs	r2, #5
 8001cbe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2310      	movs	r3, #16
 8001cd0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2308      	movs	r3, #8
 8001ce2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 ff5f 	bl	8004bb2 <USB_HC_Halt>
 8001cf4:	e075      	b.n	8001de2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0c:	d134      	bne.n	8001d78 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	0151      	lsls	r1, r2, #5
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	440a      	add	r2, r1
 8001d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	212c      	movs	r1, #44	; 0x2c
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	3361      	adds	r3, #97	; 0x61
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2310      	movs	r3, #16
 8001d50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d64:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f002 ff1e 	bl	8004bb2 <USB_HC_Halt>
 8001d76:	e034      	b.n	8001de2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	015a      	lsls	r2, r3, #5
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8a:	2b80      	cmp	r3, #128	; 0x80
 8001d8c:	d129      	bne.n	8001de2 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	0151      	lsls	r1, r2, #5
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	440a      	add	r2, r1
 8001da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3361      	adds	r3, #97	; 0x61
 8001dbc:	2206      	movs	r2, #6
 8001dbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f002 fef1 	bl	8004bb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df8:	d122      	bne.n	8001e40 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	015a      	lsls	r2, r3, #5
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	0151      	lsls	r1, r2, #5
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	440a      	add	r2, r1
 8001e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 fec4 	bl	8004bb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e36:	461a      	mov	r2, r3
 8001e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e3e:	e2ba      	b.n	80023b6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	f040 811b 	bne.w	800208e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d019      	beq.n	8001e94 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	212c      	movs	r1, #44	; 0x2c
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3348      	adds	r3, #72	; 0x48
 8001e6e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	0159      	lsls	r1, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	440b      	add	r3, r1
 8001e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e82:	1ad2      	subs	r2, r2, r3
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	202c      	movs	r0, #44	; 0x2c
 8001e8a:	fb00 f303 	mul.w	r3, r0, r3
 8001e8e:	440b      	add	r3, r1
 8001e90:	3350      	adds	r3, #80	; 0x50
 8001e92:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	212c      	movs	r1, #44	; 0x2c
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3361      	adds	r3, #97	; 0x61
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	335c      	adds	r3, #92	; 0x5c
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	333f      	adds	r3, #63	; 0x3f
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	212c      	movs	r1, #44	; 0x2c
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	333f      	adds	r3, #63	; 0x3f
 8001eec:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d121      	bne.n	8001f36 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	0151      	lsls	r1, r2, #5
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	440a      	add	r2, r1
 8001f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f002 fe48 	bl	8004bb2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2310      	movs	r3, #16
 8001f32:	6093      	str	r3, [r2, #8]
 8001f34:	e066      	b.n	8002004 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	212c      	movs	r1, #44	; 0x2c
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	333f      	adds	r3, #63	; 0x3f
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d127      	bne.n	8001f9a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	0151      	lsls	r1, r2, #5
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	440a      	add	r2, r1
 8001f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f68:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	3360      	adds	r3, #96	; 0x60
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	b2d9      	uxtb	r1, r3
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	202c      	movs	r0, #44	; 0x2c
 8001f86:	fb00 f303 	mul.w	r3, r0, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3360      	adds	r3, #96	; 0x60
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f006 fa56 	bl	8008444 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001f98:	e034      	b.n	8002004 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	212c      	movs	r1, #44	; 0x2c
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	333f      	adds	r3, #63	; 0x3f
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d12a      	bne.n	8002004 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	212c      	movs	r1, #44	; 0x2c
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	3360      	adds	r3, #96	; 0x60
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3354      	adds	r3, #84	; 0x54
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	f083 0301 	eor.w	r3, r3, #1
 8001fd4:	b2d8      	uxtb	r0, r3
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	212c      	movs	r1, #44	; 0x2c
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3354      	adds	r3, #84	; 0x54
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	b2d9      	uxtb	r1, r3
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	202c      	movs	r0, #44	; 0x2c
 8001ff2:	fb00 f303 	mul.w	r3, r0, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3360      	adds	r3, #96	; 0x60
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f006 fa20 	bl	8008444 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d12b      	bne.n	8002064 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	3348      	adds	r3, #72	; 0x48
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	202c      	movs	r0, #44	; 0x2c
 8002022:	fb00 f202 	mul.w	r2, r0, r2
 8002026:	440a      	add	r2, r1
 8002028:	3240      	adds	r2, #64	; 0x40
 800202a:	8812      	ldrh	r2, [r2, #0]
 800202c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 81be 	beq.w	80023b6 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	212c      	movs	r1, #44	; 0x2c
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	3354      	adds	r3, #84	; 0x54
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	f083 0301 	eor.w	r3, r3, #1
 800204e:	b2d8      	uxtb	r0, r3
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	212c      	movs	r1, #44	; 0x2c
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	3354      	adds	r3, #84	; 0x54
 800205e:	4602      	mov	r2, r0
 8002060:	701a      	strb	r2, [r3, #0]
}
 8002062:	e1a8      	b.n	80023b6 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	3354      	adds	r3, #84	; 0x54
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	f083 0301 	eor.w	r3, r3, #1
 8002078:	b2d8      	uxtb	r0, r3
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	3354      	adds	r3, #84	; 0x54
 8002088:	4602      	mov	r2, r0
 800208a:	701a      	strb	r2, [r3, #0]
}
 800208c:	e193      	b.n	80023b6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	f040 8106 	bne.w	80022b2 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	0151      	lsls	r1, r2, #5
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	440a      	add	r2, r1
 80020bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c0:	f023 0302 	bic.w	r3, r3, #2
 80020c4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	3361      	adds	r3, #97	; 0x61
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d109      	bne.n	80020ee <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3360      	adds	r3, #96	; 0x60
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	e0c9      	b.n	8002282 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3361      	adds	r3, #97	; 0x61
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d109      	bne.n	8002116 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	212c      	movs	r1, #44	; 0x2c
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	4413      	add	r3, r2
 800210e:	3360      	adds	r3, #96	; 0x60
 8002110:	2205      	movs	r2, #5
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e0b5      	b.n	8002282 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	212c      	movs	r1, #44	; 0x2c
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	3361      	adds	r3, #97	; 0x61
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b06      	cmp	r3, #6
 8002128:	d009      	beq.n	800213e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3361      	adds	r3, #97	; 0x61
 8002138:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800213a:	2b08      	cmp	r3, #8
 800213c:	d150      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	335c      	adds	r3, #92	; 0x5c
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	202c      	movs	r0, #44	; 0x2c
 8002156:	fb00 f303 	mul.w	r3, r0, r3
 800215a:	440b      	add	r3, r1
 800215c:	335c      	adds	r3, #92	; 0x5c
 800215e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	335c      	adds	r3, #92	; 0x5c
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d912      	bls.n	800219a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	335c      	adds	r3, #92	; 0x5c
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3360      	adds	r3, #96	; 0x60
 8002194:	2204      	movs	r2, #4
 8002196:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002198:	e073      	b.n	8002282 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3360      	adds	r3, #96	; 0x60
 80021a8:	2202      	movs	r2, #2
 80021aa:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021c2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ca:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021de:	e050      	b.n	8002282 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3361      	adds	r3, #97	; 0x61
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d122      	bne.n	800223a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3360      	adds	r3, #96	; 0x60
 8002202:	2202      	movs	r2, #2
 8002204:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800221c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002224:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e023      	b.n	8002282 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	3361      	adds	r3, #97	; 0x61
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b07      	cmp	r3, #7
 800224c:	d119      	bne.n	8002282 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	335c      	adds	r3, #92	; 0x5c
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	202c      	movs	r0, #44	; 0x2c
 8002266:	fb00 f303 	mul.w	r3, r0, r3
 800226a:	440b      	add	r3, r1
 800226c:	335c      	adds	r3, #92	; 0x5c
 800226e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	3360      	adds	r3, #96	; 0x60
 800227e:	2204      	movs	r2, #4
 8002280:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228e:	461a      	mov	r2, r3
 8002290:	2302      	movs	r3, #2
 8002292:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	b2d9      	uxtb	r1, r3
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	202c      	movs	r0, #44	; 0x2c
 800229e:	fb00 f303 	mul.w	r3, r0, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3360      	adds	r3, #96	; 0x60
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f006 f8ca 	bl	8008444 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022b0:	e081      	b.n	80023b6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b10      	cmp	r3, #16
 80022c6:	d176      	bne.n	80023b6 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	212c      	movs	r1, #44	; 0x2c
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	333f      	adds	r3, #63	; 0x3f
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d121      	bne.n	8002320 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	212c      	movs	r1, #44	; 0x2c
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	335c      	adds	r3, #92	; 0x5c
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	0151      	lsls	r1, r2, #5
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	440a      	add	r2, r1
 8002304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f002 fc4a 	bl	8004bb2 <USB_HC_Halt>
 800231e:	e041      	b.n	80023a4 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	333f      	adds	r3, #63	; 0x3f
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	333f      	adds	r3, #63	; 0x3f
 8002342:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002344:	2b02      	cmp	r3, #2
 8002346:	d12d      	bne.n	80023a4 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	335c      	adds	r3, #92	; 0x5c
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d120      	bne.n	80023a4 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3361      	adds	r3, #97	; 0x61
 8002370:	2203      	movs	r2, #3
 8002372:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	0151      	lsls	r1, r2, #5
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	440a      	add	r2, r1
 800238a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fc07 	bl	8004bb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	461a      	mov	r2, r3
 80023b2:	2310      	movs	r3, #16
 80023b4:	6093      	str	r3, [r2, #8]
}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b088      	sub	sp, #32
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d119      	bne.n	8002422 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	461a      	mov	r2, r3
 80023fc:	2304      	movs	r3, #4
 80023fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	0151      	lsls	r1, r2, #5
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	440a      	add	r2, r1
 8002416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800241a:	f043 0302 	orr.w	r3, r3, #2
 800241e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002420:	e3ca      	b.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b20      	cmp	r3, #32
 8002436:	d13e      	bne.n	80024b6 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002444:	461a      	mov	r2, r3
 8002446:	2320      	movs	r3, #32
 8002448:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	333d      	adds	r3, #61	; 0x3d
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	f040 83ac 	bne.w	8002bb8 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	333d      	adds	r3, #61	; 0x3d
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	3360      	adds	r3, #96	; 0x60
 8002480:	2202      	movs	r2, #2
 8002482:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	0151      	lsls	r1, r2, #5
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	440a      	add	r2, r1
 800249a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 fb7f 	bl	8004bb2 <USB_HC_Halt>
}
 80024b4:	e380      	b.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024cc:	d122      	bne.n	8002514 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	0151      	lsls	r1, r2, #5
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	440a      	add	r2, r1
 80024e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f002 fb5a 	bl	8004bb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	461a      	mov	r2, r3
 800250c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002510:	6093      	str	r3, [r2, #8]
}
 8002512:	e351      	b.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d150      	bne.n	80025cc <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	335c      	adds	r3, #92	; 0x5c
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	2b40      	cmp	r3, #64	; 0x40
 8002550:	d111      	bne.n	8002576 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	333d      	adds	r3, #61	; 0x3d
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	461a      	mov	r2, r3
 8002572:	2340      	movs	r3, #64	; 0x40
 8002574:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	0151      	lsls	r1, r2, #5
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	440a      	add	r2, r1
 800258c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fb06 	bl	8004bb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	461a      	mov	r2, r3
 80025b4:	2301      	movs	r3, #1
 80025b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3361      	adds	r3, #97	; 0x61
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
}
 80025ca:	e2f5      	b.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b40      	cmp	r3, #64	; 0x40
 80025e0:	d13c      	bne.n	800265c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3361      	adds	r3, #97	; 0x61
 80025f0:	2204      	movs	r2, #4
 80025f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	333d      	adds	r3, #61	; 0x3d
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	335c      	adds	r3, #92	; 0x5c
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	0151      	lsls	r1, r2, #5
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	440a      	add	r2, r1
 800262e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f002 fab5 	bl	8004bb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	461a      	mov	r2, r3
 8002656:	2340      	movs	r3, #64	; 0x40
 8002658:	6093      	str	r3, [r2, #8]
}
 800265a:	e2ad      	b.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b08      	cmp	r3, #8
 8002670:	d12a      	bne.n	80026c8 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	461a      	mov	r2, r3
 8002680:	2308      	movs	r3, #8
 8002682:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	0151      	lsls	r1, r2, #5
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	440a      	add	r2, r1
 800269a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f002 fa7f 	bl	8004bb2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	3361      	adds	r3, #97	; 0x61
 80026c2:	2205      	movs	r2, #5
 80026c4:	701a      	strb	r2, [r3, #0]
}
 80026c6:	e277      	b.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d150      	bne.n	8002780 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	335c      	adds	r3, #92	; 0x5c
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3361      	adds	r3, #97	; 0x61
 80026fe:	2203      	movs	r2, #3
 8002700:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	333d      	adds	r3, #61	; 0x3d
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d112      	bne.n	800273c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	333c      	adds	r3, #60	; 0x3c
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d108      	bne.n	800273c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	333d      	adds	r3, #61	; 0x3d
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	0151      	lsls	r1, r2, #5
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	440a      	add	r2, r1
 8002752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f002 fa23 	bl	8004bb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	461a      	mov	r2, r3
 800277a:	2310      	movs	r3, #16
 800277c:	6093      	str	r3, [r2, #8]
}
 800277e:	e21b      	b.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	2b80      	cmp	r3, #128	; 0x80
 8002794:	d174      	bne.n	8002880 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d121      	bne.n	80027e2 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	3361      	adds	r3, #97	; 0x61
 80027ac:	2206      	movs	r2, #6
 80027ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	0151      	lsls	r1, r2, #5
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	440a      	add	r2, r1
 80027c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 f9e9 	bl	8004bb2 <USB_HC_Halt>
 80027e0:	e044      	b.n	800286c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	335c      	adds	r3, #92	; 0x5c
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	202c      	movs	r0, #44	; 0x2c
 80027fa:	fb00 f303 	mul.w	r3, r0, r3
 80027fe:	440b      	add	r3, r1
 8002800:	335c      	adds	r3, #92	; 0x5c
 8002802:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	335c      	adds	r3, #92	; 0x5c
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d920      	bls.n	800285a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	335c      	adds	r3, #92	; 0x5c
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	3360      	adds	r3, #96	; 0x60
 8002838:	2204      	movs	r2, #4
 800283a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	b2d9      	uxtb	r1, r3
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	202c      	movs	r0, #44	; 0x2c
 8002846:	fb00 f303 	mul.w	r3, r0, r3
 800284a:	4413      	add	r3, r2
 800284c:	3360      	adds	r3, #96	; 0x60
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f005 fdf6 	bl	8008444 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002858:	e008      	b.n	800286c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	3360      	adds	r3, #96	; 0x60
 8002868:	2202      	movs	r2, #2
 800286a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	461a      	mov	r2, r3
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	6093      	str	r3, [r2, #8]
}
 800287e:	e19b      	b.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002896:	d134      	bne.n	8002902 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	0151      	lsls	r1, r2, #5
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	440a      	add	r2, r1
 80028ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b2:	f043 0302 	orr.w	r3, r3, #2
 80028b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 f975 	bl	8004bb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d4:	461a      	mov	r2, r3
 80028d6:	2310      	movs	r3, #16
 80028d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	461a      	mov	r2, r3
 80028e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3361      	adds	r3, #97	; 0x61
 80028fc:	2208      	movs	r2, #8
 80028fe:	701a      	strb	r2, [r3, #0]
}
 8002900:	e15a      	b.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b02      	cmp	r3, #2
 8002916:	f040 814f 	bne.w	8002bb8 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	0151      	lsls	r1, r2, #5
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	440a      	add	r2, r1
 8002930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002934:	f023 0302 	bic.w	r3, r3, #2
 8002938:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3361      	adds	r3, #97	; 0x61
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d17d      	bne.n	8002a4a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3360      	adds	r3, #96	; 0x60
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	333f      	adds	r3, #63	; 0x3f
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d00a      	beq.n	800298a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	333f      	adds	r3, #63	; 0x3f
 8002982:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002984:	2b03      	cmp	r3, #3
 8002986:	f040 8100 	bne.w	8002b8a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d113      	bne.n	80029ba <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	3355      	adds	r3, #85	; 0x55
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	f083 0301 	eor.w	r3, r3, #1
 80029a6:	b2d8      	uxtb	r0, r3
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3355      	adds	r3, #85	; 0x55
 80029b6:	4602      	mov	r2, r0
 80029b8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	f040 80e3 	bne.w	8002b8a <HCD_HC_OUT_IRQHandler+0x7cc>
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	334c      	adds	r3, #76	; 0x4c
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80d8 	beq.w	8002b8a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	334c      	adds	r3, #76	; 0x4c
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	202c      	movs	r0, #44	; 0x2c
 80029f0:	fb00 f202 	mul.w	r2, r0, r2
 80029f4:	440a      	add	r2, r1
 80029f6:	3240      	adds	r2, #64	; 0x40
 80029f8:	8812      	ldrh	r2, [r2, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	3b01      	subs	r3, #1
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	202c      	movs	r0, #44	; 0x2c
 8002a04:	fb00 f202 	mul.w	r2, r0, r2
 8002a08:	440a      	add	r2, r1
 8002a0a:	3240      	adds	r2, #64	; 0x40
 8002a0c:	8812      	ldrh	r2, [r2, #0]
 8002a0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80b5 	beq.w	8002b8a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3355      	adds	r3, #85	; 0x55
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	f083 0301 	eor.w	r3, r3, #1
 8002a34:	b2d8      	uxtb	r0, r3
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	3355      	adds	r3, #85	; 0x55
 8002a44:	4602      	mov	r2, r0
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	e09f      	b.n	8002b8a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3361      	adds	r3, #97	; 0x61
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d109      	bne.n	8002a72 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3360      	adds	r3, #96	; 0x60
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e08b      	b.n	8002b8a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3361      	adds	r3, #97	; 0x61
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d109      	bne.n	8002a9a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3360      	adds	r3, #96	; 0x60
 8002a94:	2202      	movs	r2, #2
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e077      	b.n	8002b8a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3361      	adds	r3, #97	; 0x61
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d109      	bne.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3360      	adds	r3, #96	; 0x60
 8002abc:	2205      	movs	r2, #5
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e063      	b.n	8002b8a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3361      	adds	r3, #97	; 0x61
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d009      	beq.n	8002aea <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3361      	adds	r3, #97	; 0x61
 8002ae4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d14f      	bne.n	8002b8a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	335c      	adds	r3, #92	; 0x5c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	202c      	movs	r0, #44	; 0x2c
 8002b02:	fb00 f303 	mul.w	r3, r0, r3
 8002b06:	440b      	add	r3, r1
 8002b08:	335c      	adds	r3, #92	; 0x5c
 8002b0a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	335c      	adds	r3, #92	; 0x5c
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d912      	bls.n	8002b46 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	335c      	adds	r3, #92	; 0x5c
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3360      	adds	r3, #96	; 0x60
 8002b40:	2204      	movs	r2, #4
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e021      	b.n	8002b8a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3360      	adds	r3, #96	; 0x60
 8002b54:	2202      	movs	r2, #2
 8002b56:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b6e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b76:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b84:	461a      	mov	r2, r3
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	461a      	mov	r2, r3
 8002b98:	2302      	movs	r3, #2
 8002b9a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	b2d9      	uxtb	r1, r3
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	202c      	movs	r0, #44	; 0x2c
 8002ba6:	fb00 f303 	mul.w	r3, r0, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3360      	adds	r3, #96	; 0x60
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f005 fc46 	bl	8008444 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bb8:	bf00      	nop
 8002bba:	3720      	adds	r7, #32
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	0c5b      	lsrs	r3, r3, #17
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d004      	beq.n	8002c06 <HCD_RXQLVL_IRQHandler+0x46>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b05      	cmp	r3, #5
 8002c00:	f000 80a9 	beq.w	8002d56 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c04:	e0aa      	b.n	8002d5c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80a6 	beq.w	8002d5a <HCD_RXQLVL_IRQHandler+0x19a>
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3344      	adds	r3, #68	; 0x44
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 809b 	beq.w	8002d5a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3350      	adds	r3, #80	; 0x50
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	441a      	add	r2, r3
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	202c      	movs	r0, #44	; 0x2c
 8002c3e:	fb00 f303 	mul.w	r3, r0, r3
 8002c42:	440b      	add	r3, r1
 8002c44:	334c      	adds	r3, #76	; 0x4c
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d87a      	bhi.n	8002d42 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3344      	adds	r3, #68	; 0x44
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	b292      	uxth	r2, r2
 8002c64:	4619      	mov	r1, r3
 8002c66:	f001 fb1d 	bl	80042a4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3344      	adds	r3, #68	; 0x44
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	441a      	add	r2, r3
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	202c      	movs	r0, #44	; 0x2c
 8002c84:	fb00 f303 	mul.w	r3, r0, r3
 8002c88:	440b      	add	r3, r1
 8002c8a:	3344      	adds	r3, #68	; 0x44
 8002c8c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3350      	adds	r3, #80	; 0x50
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	202c      	movs	r0, #44	; 0x2c
 8002ca8:	fb00 f303 	mul.w	r3, r0, r3
 8002cac:	440b      	add	r3, r1
 8002cae:	3350      	adds	r3, #80	; 0x50
 8002cb0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	0cdb      	lsrs	r3, r3, #19
 8002cc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3340      	adds	r3, #64	; 0x40
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d13c      	bne.n	8002d5a <HCD_RXQLVL_IRQHandler+0x19a>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d039      	beq.n	8002d5a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cfc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d04:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3354      	adds	r3, #84	; 0x54
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	f083 0301 	eor.w	r3, r3, #1
 8002d2c:	b2d8      	uxtb	r0, r3
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3354      	adds	r3, #84	; 0x54
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	701a      	strb	r2, [r3, #0]
      break;
 8002d40:	e00b      	b.n	8002d5a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3360      	adds	r3, #96	; 0x60
 8002d50:	2204      	movs	r2, #4
 8002d52:	701a      	strb	r2, [r3, #0]
      break;
 8002d54:	e001      	b.n	8002d5a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d56:	bf00      	nop
 8002d58:	e000      	b.n	8002d5c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d5a:	bf00      	nop
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3728      	adds	r7, #40	; 0x28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d90:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d10b      	bne.n	8002db4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d102      	bne.n	8002dac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f005 fb30 	bl	800840c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f043 0302 	orr.w	r3, r3, #2
 8002db2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d132      	bne.n	8002e24 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f043 0308 	orr.w	r3, r3, #8
 8002dc4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d126      	bne.n	8002e1e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d113      	bne.n	8002e00 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002dde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002de2:	d106      	bne.n	8002df2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2102      	movs	r1, #2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 fbba 	bl	8004564 <USB_InitFSLSPClkSel>
 8002df0:	e011      	b.n	8002e16 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2101      	movs	r1, #1
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 fbb3 	bl	8004564 <USB_InitFSLSPClkSel>
 8002dfe:	e00a      	b.n	8002e16 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d106      	bne.n	8002e16 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e14:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f005 fb22 	bl	8008460 <HAL_HCD_PortEnabled_Callback>
 8002e1c:	e002      	b.n	8002e24 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f005 fb2c 	bl	800847c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d103      	bne.n	8002e36 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f043 0320 	orr.w	r3, r3, #32
 8002e34:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	6013      	str	r3, [r2, #0]
}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e266      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d077      	beq.n	8002f5a <HAL_RCC_OscConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6a:	4ba4      	ldr	r3, [pc, #656]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d00c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e76:	4ba1      	ldr	r3, [pc, #644]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d112      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e82:	4b9e      	ldr	r3, [pc, #632]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	4b9a      	ldr	r3, [pc, #616]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d05d      	beq.n	8002f58 <HAL_RCC_OscConfig+0x10c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d159      	bne.n	8002f58 <HAL_RCC_OscConfig+0x10c>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e241      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x74>
 8002eb2:	4b92      	ldr	r3, [pc, #584]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a91      	ldr	r2, [pc, #580]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e01d      	b.n	8002efc <HAL_RCC_OscConfig+0xb0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x98>
 8002eca:	4b8c      	ldr	r3, [pc, #560]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a8b      	ldr	r2, [pc, #556]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b89      	ldr	r3, [pc, #548]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a88      	ldr	r2, [pc, #544]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0xb0>
 8002ee4:	4b85      	ldr	r3, [pc, #532]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a84      	ldr	r2, [pc, #528]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b82      	ldr	r3, [pc, #520]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a81      	ldr	r2, [pc, #516]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d014      	beq.n	8002f2e <HAL_RCC_OscConfig+0xe2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fd ff82 	bl	8000e0c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	e009      	b.n	8002f20 <HAL_RCC_OscConfig+0xd4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fd ff7e 	bl	8000e0c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e205      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f20:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ef      	beq.n	8002f0c <HAL_RCC_OscConfig+0xc0>
 8002f2c:	e015      	b.n	8002f5a <HAL_RCC_OscConfig+0x10e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7fd ff6d 	bl	8000e0c <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f34:	e009      	b.n	8002f4a <HAL_RCC_OscConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f36:	f7fd ff69 	bl	8000e0c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e1f0      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ef      	bne.n	8002f36 <HAL_RCC_OscConfig+0xea>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d063      	beq.n	800302e <HAL_RCC_OscConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f66:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_RCC_OscConfig+0x13e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f72:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d11c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x16c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d116      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x16c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x156>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1c4      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa2:	4b56      	ldr	r3, [pc, #344]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4952      	ldr	r1, [pc, #328]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	e03a      	b.n	800302e <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc0:	4b4f      	ldr	r3, [pc, #316]	; (8003100 <HAL_RCC_OscConfig+0x2b4>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fd ff21 	bl	8000e0c <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fce:	f7fd ff1d 	bl	8000e0c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x194>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1a5      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	4b46      	ldr	r3, [pc, #280]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x182>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fec:	4b43      	ldr	r3, [pc, #268]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4940      	ldr	r1, [pc, #256]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
 8003000:	e015      	b.n	800302e <HAL_RCC_OscConfig+0x1e2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003002:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <HAL_RCC_OscConfig+0x2b4>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fd ff00 	bl	8000e0c <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1d6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003010:	f7fd fefc 	bl	8000e0c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1d6>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e184      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	4b36      	ldr	r3, [pc, #216]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d030      	beq.n	800309c <HAL_RCC_OscConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d016      	beq.n	8003070 <HAL_RCC_OscConfig+0x224>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003042:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_RCC_OscConfig+0x2b8>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fd fee0 	bl	8000e0c <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003050:	f7fd fedc 	bl	8000e0c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x216>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e164      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x204>
 800306e:	e015      	b.n	800309c <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <HAL_RCC_OscConfig+0x2b8>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7fd fec9 	bl	8000e0c <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x244>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307e:	f7fd fec5 	bl	8000e0c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x244>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e14d      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8003092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80a0 	beq.w	80031ea <HAL_RCC_OscConfig+0x39e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_RCC_OscConfig+0x28e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a0e      	ldr	r2, [pc, #56]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_OscConfig+0x2bc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d121      	bne.n	800312a <HAL_RCC_OscConfig+0x2de>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_RCC_OscConfig+0x2bc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_RCC_OscConfig+0x2bc>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f2:	f7fd fe8b 	bl	8000e0c <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	e011      	b.n	800311e <HAL_RCC_OscConfig+0x2d2>
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	42470000 	.word	0x42470000
 8003104:	42470e80 	.word	0x42470e80
 8003108:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7fd fe7e 	bl	8000e0c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e106      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b85      	ldr	r3, [pc, #532]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d106      	bne.n	8003140 <HAL_RCC_OscConfig+0x2f4>
 8003132:	4b81      	ldr	r3, [pc, #516]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a80      	ldr	r2, [pc, #512]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
 800313e:	e01c      	b.n	800317a <HAL_RCC_OscConfig+0x32e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d10c      	bne.n	8003162 <HAL_RCC_OscConfig+0x316>
 8003148:	4b7b      	ldr	r3, [pc, #492]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a7a      	ldr	r2, [pc, #488]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
 8003154:	4b78      	ldr	r3, [pc, #480]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	4a77      	ldr	r2, [pc, #476]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6713      	str	r3, [r2, #112]	; 0x70
 8003160:	e00b      	b.n	800317a <HAL_RCC_OscConfig+0x32e>
 8003162:	4b75      	ldr	r3, [pc, #468]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a74      	ldr	r2, [pc, #464]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	4b72      	ldr	r3, [pc, #456]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a71      	ldr	r2, [pc, #452]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 8003174:	f023 0304 	bic.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d015      	beq.n	80031ae <HAL_RCC_OscConfig+0x362>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003182:	f7fd fe43 	bl	8000e0c <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_OscConfig+0x354>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fd fe3f 	bl	8000e0c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0c5      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	4b65      	ldr	r3, [pc, #404]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ee      	beq.n	800318a <HAL_RCC_OscConfig+0x33e>
 80031ac:	e014      	b.n	80031d8 <HAL_RCC_OscConfig+0x38c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fd fe2d 	bl	8000e0c <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x380>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fd fe29 	bl	8000e0c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0af      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031cc:	4b5a      	ldr	r3, [pc, #360]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1ee      	bne.n	80031b6 <HAL_RCC_OscConfig+0x36a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d105      	bne.n	80031ea <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031de:	4b56      	ldr	r3, [pc, #344]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	4a55      	ldr	r2, [pc, #340]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 80031e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 809b 	beq.w	800332a <HAL_RCC_OscConfig+0x4de>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f4:	4b50      	ldr	r3, [pc, #320]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d05c      	beq.n	80032ba <HAL_RCC_OscConfig+0x46e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d141      	bne.n	800328c <HAL_RCC_OscConfig+0x440>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003208:	4b4c      	ldr	r3, [pc, #304]	; (800333c <HAL_RCC_OscConfig+0x4f0>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fd fdfd 	bl	8000e0c <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x3dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003216:	f7fd fdf9 	bl	8000e0c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x3dc>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e081      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003228:	4b43      	ldr	r3, [pc, #268]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x3ca>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	019b      	lsls	r3, r3, #6
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	3b01      	subs	r3, #1
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	4937      	ldr	r1, [pc, #220]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325e:	4b37      	ldr	r3, [pc, #220]	; (800333c <HAL_RCC_OscConfig+0x4f0>)
 8003260:	2201      	movs	r2, #1
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fd fdd2 	bl	8000e0c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x432>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326c:	f7fd fdce 	bl	8000e0c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e056      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327e:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x420>
 800328a:	e04e      	b.n	800332a <HAL_RCC_OscConfig+0x4de>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_RCC_OscConfig+0x4f0>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fd fdbb 	bl	8000e0c <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329a:	f7fd fdb7 	bl	8000e0c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e03f      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ac:	4b22      	ldr	r3, [pc, #136]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f0      	bne.n	800329a <HAL_RCC_OscConfig+0x44e>
 80032b8:	e037      	b.n	800332a <HAL_RCC_OscConfig+0x4de>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e032      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c6:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d028      	beq.n	8003326 <HAL_RCC_OscConfig+0x4da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d121      	bne.n	8003326 <HAL_RCC_OscConfig+0x4da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d11a      	bne.n	8003326 <HAL_RCC_OscConfig+0x4da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f6:	4013      	ands	r3, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fe:	4293      	cmp	r3, r2
 8003300:	d111      	bne.n	8003326 <HAL_RCC_OscConfig+0x4da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	3b01      	subs	r3, #1
 8003310:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d107      	bne.n	8003326 <HAL_RCC_OscConfig+0x4da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x4de>
#endif
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40007000 	.word	0x40007000
 8003338:	40023800 	.word	0x40023800
 800333c:	42470060 	.word	0x42470060

08003340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0cc      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003354:	4b68      	ldr	r3, [pc, #416]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d90c      	bls.n	800337c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0b8      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003394:	4b59      	ldr	r3, [pc, #356]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a58      	ldr	r2, [pc, #352]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800339e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ac:	4b53      	ldr	r3, [pc, #332]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4a52      	ldr	r2, [pc, #328]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b8:	4b50      	ldr	r3, [pc, #320]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	494d      	ldr	r1, [pc, #308]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d044      	beq.n	8003460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d119      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e07f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fe:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e06f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e067      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341e:	4b37      	ldr	r3, [pc, #220]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 0203 	bic.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4934      	ldr	r1, [pc, #208]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003430:	f7fd fcec 	bl	8000e0c <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	e00a      	b.n	800344e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fd fce8 	bl	8000e0c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	; 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e04f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 020c 	and.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	429a      	cmp	r2, r3
 800345e:	d1eb      	bne.n	8003438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003460:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d20c      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e032      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4916      	ldr	r1, [pc, #88]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	490e      	ldr	r1, [pc, #56]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034c6:	f000 f821 	bl	800350c <HAL_RCC_GetSysClockFreq>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	490a      	ldr	r1, [pc, #40]	; (8003500 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	5ccb      	ldrb	r3, [r1, r3]
 80034da:	fa22 f303 	lsr.w	r3, r2, r3
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd fa56 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023c00 	.word	0x40023c00
 80034fc:	40023800 	.word	0x40023800
 8003500:	08008a68 	.word	0x08008a68
 8003504:	20000004 	.word	0x20000004
 8003508:	20000008 	.word	0x20000008

0800350c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800350c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	607b      	str	r3, [r7, #4]
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	2300      	movs	r3, #0
 800351e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003524:	4b67      	ldr	r3, [pc, #412]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b08      	cmp	r3, #8
 800352e:	d00d      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x40>
 8003530:	2b08      	cmp	r3, #8
 8003532:	f200 80bd 	bhi.w	80036b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x34>
 800353a:	2b04      	cmp	r3, #4
 800353c:	d003      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0x3a>
 800353e:	e0b7      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b61      	ldr	r3, [pc, #388]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003542:	60bb      	str	r3, [r7, #8]
       break;
 8003544:	e0b7      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003546:	4b61      	ldr	r3, [pc, #388]	; (80036cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003548:	60bb      	str	r3, [r7, #8]
      break;
 800354a:	e0b4      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800354c:	4b5d      	ldr	r3, [pc, #372]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003554:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003556:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d04d      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003562:	4b58      	ldr	r3, [pc, #352]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	099b      	lsrs	r3, r3, #6
 8003568:	461a      	mov	r2, r3
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003572:	f04f 0100 	mov.w	r1, #0
 8003576:	ea02 0800 	and.w	r8, r2, r0
 800357a:	ea03 0901 	and.w	r9, r3, r1
 800357e:	4640      	mov	r0, r8
 8003580:	4649      	mov	r1, r9
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	014b      	lsls	r3, r1, #5
 800358c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003590:	0142      	lsls	r2, r0, #5
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	ebb0 0008 	subs.w	r0, r0, r8
 800359a:	eb61 0109 	sbc.w	r1, r1, r9
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	018b      	lsls	r3, r1, #6
 80035a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035ac:	0182      	lsls	r2, r0, #6
 80035ae:	1a12      	subs	r2, r2, r0
 80035b0:	eb63 0301 	sbc.w	r3, r3, r1
 80035b4:	f04f 0000 	mov.w	r0, #0
 80035b8:	f04f 0100 	mov.w	r1, #0
 80035bc:	00d9      	lsls	r1, r3, #3
 80035be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035c2:	00d0      	lsls	r0, r2, #3
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	eb12 0208 	adds.w	r2, r2, r8
 80035cc:	eb43 0309 	adc.w	r3, r3, r9
 80035d0:	f04f 0000 	mov.w	r0, #0
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	0259      	lsls	r1, r3, #9
 80035da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035de:	0250      	lsls	r0, r2, #9
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	461a      	mov	r2, r3
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	f7fc fdf0 	bl	80001d4 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e04a      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	461a      	mov	r2, r3
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	ea02 0400 	and.w	r4, r2, r0
 8003616:	ea03 0501 	and.w	r5, r3, r1
 800361a:	4620      	mov	r0, r4
 800361c:	4629      	mov	r1, r5
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	014b      	lsls	r3, r1, #5
 8003628:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800362c:	0142      	lsls	r2, r0, #5
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	1b00      	subs	r0, r0, r4
 8003634:	eb61 0105 	sbc.w	r1, r1, r5
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	018b      	lsls	r3, r1, #6
 8003642:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003646:	0182      	lsls	r2, r0, #6
 8003648:	1a12      	subs	r2, r2, r0
 800364a:	eb63 0301 	sbc.w	r3, r3, r1
 800364e:	f04f 0000 	mov.w	r0, #0
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	00d9      	lsls	r1, r3, #3
 8003658:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800365c:	00d0      	lsls	r0, r2, #3
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	1912      	adds	r2, r2, r4
 8003664:	eb45 0303 	adc.w	r3, r5, r3
 8003668:	f04f 0000 	mov.w	r0, #0
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	0299      	lsls	r1, r3, #10
 8003672:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003676:	0290      	lsls	r0, r2, #10
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	461a      	mov	r2, r3
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	f7fc fda4 	bl	80001d4 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4613      	mov	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	3301      	adds	r3, #1
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	60bb      	str	r3, [r7, #8]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036b2:	60bb      	str	r3, [r7, #8]
      break;
 80036b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b6:	68bb      	ldr	r3, [r7, #8]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	00f42400 	.word	0x00f42400
 80036cc:	007a1200 	.word	0x007a1200

080036d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	20000004 	.word	0x20000004

080036e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036ec:	f7ff fff0 	bl	80036d0 <HAL_RCC_GetHCLKFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	0b5b      	lsrs	r3, r3, #13
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	4903      	ldr	r1, [pc, #12]	; (800370c <HAL_RCC_GetPCLK2Freq+0x24>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	08008a78 	.word	0x08008a78

08003710 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	220f      	movs	r2, #15
 800371e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_RCC_GetClockConfig+0x5c>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0203 	and.w	r2, r3, #3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <HAL_RCC_GetClockConfig+0x5c>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <HAL_RCC_GetClockConfig+0x5c>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCC_GetClockConfig+0x5c>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	08db      	lsrs	r3, r3, #3
 800374a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <HAL_RCC_GetClockConfig+0x60>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0207 	and.w	r2, r3, #7
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	601a      	str	r2, [r3, #0]
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800
 8003770:	40023c00 	.word	0x40023c00

08003774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e041      	b.n	800380a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fa92 	bl	8000cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f000 fa88 	bl	8003cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d001      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e044      	b.n	80038b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d018      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003856:	d013      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00e      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a19      	ldr	r2, [pc, #100]	; (80038cc <HAL_TIM_Base_Start_IT+0xb8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a17      	ldr	r2, [pc, #92]	; (80038d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d111      	bne.n	80038a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b06      	cmp	r3, #6
 8003890:	d010      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a2:	e007      	b.n	80038b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40014000 	.word	0x40014000

080038d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0202 	mvn.w	r2, #2
 8003904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f9b5 	bl	8003c8a <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f9a7 	bl	8003c76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f9b8 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b04      	cmp	r3, #4
 8003940:	d122      	bne.n	8003988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b04      	cmp	r3, #4
 800394e:	d11b      	bne.n	8003988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0204 	mvn.w	r2, #4
 8003958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f98b 	bl	8003c8a <HAL_TIM_IC_CaptureCallback>
 8003974:	e005      	b.n	8003982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f97d 	bl	8003c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f98e 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b08      	cmp	r3, #8
 8003994:	d122      	bne.n	80039dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d11b      	bne.n	80039dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0208 	mvn.w	r2, #8
 80039ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2204      	movs	r2, #4
 80039b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f961 	bl	8003c8a <HAL_TIM_IC_CaptureCallback>
 80039c8:	e005      	b.n	80039d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f953 	bl	8003c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f964 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d122      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d11b      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0210 	mvn.w	r2, #16
 8003a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2208      	movs	r2, #8
 8003a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f937 	bl	8003c8a <HAL_TIM_IC_CaptureCallback>
 8003a1c:	e005      	b.n	8003a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f929 	bl	8003c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f93a 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d10e      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d107      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0201 	mvn.w	r2, #1
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fc fe34 	bl	80006c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d10e      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a74:	2b80      	cmp	r3, #128	; 0x80
 8003a76:	d107      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fab2 	bl	8003fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d10e      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f8ff 	bl	8003cb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d107      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0220 	mvn.w	r2, #32
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fa7c 	bl	8003fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_TIM_ConfigClockSource+0x1c>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0b4      	b.n	8003c6e <HAL_TIM_ConfigClockSource+0x186>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b3c:	d03e      	beq.n	8003bbc <HAL_TIM_ConfigClockSource+0xd4>
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b42:	f200 8087 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4a:	f000 8086 	beq.w	8003c5a <HAL_TIM_ConfigClockSource+0x172>
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b52:	d87f      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b54:	2b70      	cmp	r3, #112	; 0x70
 8003b56:	d01a      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0xa6>
 8003b58:	2b70      	cmp	r3, #112	; 0x70
 8003b5a:	d87b      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b5c:	2b60      	cmp	r3, #96	; 0x60
 8003b5e:	d050      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x11a>
 8003b60:	2b60      	cmp	r3, #96	; 0x60
 8003b62:	d877      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b64:	2b50      	cmp	r3, #80	; 0x50
 8003b66:	d03c      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0xfa>
 8003b68:	2b50      	cmp	r3, #80	; 0x50
 8003b6a:	d873      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	d058      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x13a>
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d86f      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b74:	2b30      	cmp	r3, #48	; 0x30
 8003b76:	d064      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x15a>
 8003b78:	2b30      	cmp	r3, #48	; 0x30
 8003b7a:	d86b      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d060      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x15a>
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d867      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d05c      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x15a>
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d05a      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x15a>
 8003b8c:	e062      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6899      	ldr	r1, [r3, #8]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f000 f98d 	bl	8003ebc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	609a      	str	r2, [r3, #8]
      break;
 8003bba:	e04f      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6899      	ldr	r1, [r3, #8]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f000 f976 	bl	8003ebc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bde:	609a      	str	r2, [r3, #8]
      break;
 8003be0:	e03c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f000 f8ea 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2150      	movs	r1, #80	; 0x50
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f943 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 8003c00:	e02c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6859      	ldr	r1, [r3, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f000 f909 	bl	8003e26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2160      	movs	r1, #96	; 0x60
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f933 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 8003c20:	e01c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f000 f8ca 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2140      	movs	r1, #64	; 0x40
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f923 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 8003c40:	e00c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f000 f91a 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 8003c52:	e003      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      break;
 8003c58:	e000      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a34      	ldr	r2, [pc, #208]	; (8003dac <TIM_Base_SetConfig+0xe4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00f      	beq.n	8003d00 <TIM_Base_SetConfig+0x38>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce6:	d00b      	beq.n	8003d00 <TIM_Base_SetConfig+0x38>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a31      	ldr	r2, [pc, #196]	; (8003db0 <TIM_Base_SetConfig+0xe8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d007      	beq.n	8003d00 <TIM_Base_SetConfig+0x38>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a30      	ldr	r2, [pc, #192]	; (8003db4 <TIM_Base_SetConfig+0xec>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_Base_SetConfig+0x38>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a2f      	ldr	r2, [pc, #188]	; (8003db8 <TIM_Base_SetConfig+0xf0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d108      	bne.n	8003d12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a25      	ldr	r2, [pc, #148]	; (8003dac <TIM_Base_SetConfig+0xe4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01b      	beq.n	8003d52 <TIM_Base_SetConfig+0x8a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d017      	beq.n	8003d52 <TIM_Base_SetConfig+0x8a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a22      	ldr	r2, [pc, #136]	; (8003db0 <TIM_Base_SetConfig+0xe8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <TIM_Base_SetConfig+0x8a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a21      	ldr	r2, [pc, #132]	; (8003db4 <TIM_Base_SetConfig+0xec>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00f      	beq.n	8003d52 <TIM_Base_SetConfig+0x8a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <TIM_Base_SetConfig+0xf0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <TIM_Base_SetConfig+0x8a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a1f      	ldr	r2, [pc, #124]	; (8003dbc <TIM_Base_SetConfig+0xf4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <TIM_Base_SetConfig+0x8a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <TIM_Base_SetConfig+0xf8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d003      	beq.n	8003d52 <TIM_Base_SetConfig+0x8a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1d      	ldr	r2, [pc, #116]	; (8003dc4 <TIM_Base_SetConfig+0xfc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d108      	bne.n	8003d64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a08      	ldr	r2, [pc, #32]	; (8003dac <TIM_Base_SetConfig+0xe4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d103      	bne.n	8003d98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	615a      	str	r2, [r3, #20]
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40010000 	.word	0x40010000
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800
 8003db8:	40000c00 	.word	0x40000c00
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	40014400 	.word	0x40014400
 8003dc4:	40014800 	.word	0x40014800

08003dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f023 0201 	bic.w	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f023 030a 	bic.w	r3, r3, #10
 8003e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b087      	sub	sp, #28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f023 0210 	bic.w	r2, r3, #16
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	031b      	lsls	r3, r3, #12
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b085      	sub	sp, #20
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f043 0307 	orr.w	r3, r3, #7
 8003ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	609a      	str	r2, [r3, #8]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	021a      	lsls	r2, r3, #8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e050      	b.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d018      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f60:	d013      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00e      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a16      	ldr	r2, [pc, #88]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d009      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a15      	ldr	r2, [pc, #84]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a13      	ldr	r2, [pc, #76]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d10c      	bne.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40010000 	.word	0x40010000
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800
 8003fd0:	40000c00 	.word	0x40000c00
 8003fd4:	40014000 	.word	0x40014000

08003fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004000:	b084      	sub	sp, #16
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	f107 001c 	add.w	r0, r7, #28
 800400e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2b01      	cmp	r3, #1
 8004016:	d122      	bne.n	800405e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800402c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004042:	2b01      	cmp	r3, #1
 8004044:	d105      	bne.n	8004052 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9a0 	bl	8004398 <USB_CoreReset>
 8004058:	4603      	mov	r3, r0
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	e01a      	b.n	8004094 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f994 	bl	8004398 <USB_CoreReset>
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	639a      	str	r2, [r3, #56]	; 0x38
 8004086:	e005      	b.n	8004094 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10b      	bne.n	80040b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f043 0206 	orr.w	r2, r3, #6
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f043 0220 	orr.w	r2, r3, #32
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040be:	b004      	add	sp, #16
 80040c0:	4770      	bx	lr

080040c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f043 0201 	orr.w	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f023 0201 	bic.w	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	460b      	mov	r3, r1
 8004110:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d115      	bne.n	8004154 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004134:	2001      	movs	r0, #1
 8004136:	f7fc fe75 	bl	8000e24 <HAL_Delay>
      ms++;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3301      	adds	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f91a 	bl	800437a <USB_GetMode>
 8004146:	4603      	mov	r3, r0
 8004148:	2b01      	cmp	r3, #1
 800414a:	d01e      	beq.n	800418a <USB_SetCurrentMode+0x84>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b31      	cmp	r3, #49	; 0x31
 8004150:	d9f0      	bls.n	8004134 <USB_SetCurrentMode+0x2e>
 8004152:	e01a      	b.n	800418a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d115      	bne.n	8004186 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004166:	2001      	movs	r0, #1
 8004168:	f7fc fe5c 	bl	8000e24 <HAL_Delay>
      ms++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3301      	adds	r3, #1
 8004170:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f901 	bl	800437a <USB_GetMode>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <USB_SetCurrentMode+0x84>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b31      	cmp	r3, #49	; 0x31
 8004182:	d9f0      	bls.n	8004166 <USB_SetCurrentMode+0x60>
 8004184:	e001      	b.n	800418a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e005      	b.n	8004196 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b32      	cmp	r3, #50	; 0x32
 800418e:	d101      	bne.n	8004194 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	f043 0220 	orr.w	r2, r3, #32
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3301      	adds	r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <USB_FlushTxFifo+0x44>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e006      	b.n	80041d8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d0f1      	beq.n	80041ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	00030d40 	.word	0x00030d40

080041e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2210      	movs	r2, #16
 80041f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	4a08      	ldr	r2, [pc, #32]	; (8004224 <USB_FlushRxFifo+0x3c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e006      	b.n	8004218 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b10      	cmp	r3, #16
 8004214:	d0f1      	beq.n	80041fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	00030d40 	.word	0x00030d40

08004228 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	4611      	mov	r1, r2
 8004234:	461a      	mov	r2, r3
 8004236:	460b      	mov	r3, r1
 8004238:	71fb      	strb	r3, [r7, #7]
 800423a:	4613      	mov	r3, r2
 800423c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004246:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d123      	bne.n	8004296 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800424e:	88bb      	ldrh	r3, [r7, #4]
 8004250:	3303      	adds	r3, #3
 8004252:	089b      	lsrs	r3, r3, #2
 8004254:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	e018      	b.n	800428e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	031a      	lsls	r2, r3, #12
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	4413      	add	r3, r2
 8004264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004268:	461a      	mov	r2, r3
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	3301      	adds	r3, #1
 8004274:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	3301      	adds	r3, #1
 800427a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	3301      	adds	r3, #1
 8004280:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3301      	adds	r3, #1
 8004286:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	3301      	adds	r3, #1
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	429a      	cmp	r2, r3
 8004294:	d3e2      	bcc.n	800425c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3724      	adds	r7, #36	; 0x24
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b08b      	sub	sp, #44	; 0x2c
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	623b      	str	r3, [r7, #32]
 80042ce:	e014      	b.n	80042fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	601a      	str	r2, [r3, #0]
    pDest++;
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	3301      	adds	r3, #1
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	3301      	adds	r3, #1
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	3301      	adds	r3, #1
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	3301      	adds	r3, #1
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	3301      	adds	r3, #1
 80042f8:	623b      	str	r3, [r7, #32]
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d3e6      	bcc.n	80042d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004302:	8bfb      	ldrh	r3, [r7, #30]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01e      	beq.n	8004346 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004312:	461a      	mov	r2, r3
 8004314:	f107 0310 	add.w	r3, r7, #16
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	b2da      	uxtb	r2, r3
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	701a      	strb	r2, [r3, #0]
      i++;
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	3301      	adds	r3, #1
 8004332:	623b      	str	r3, [r7, #32]
      pDest++;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	3301      	adds	r3, #1
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800433a:	8bfb      	ldrh	r3, [r7, #30]
 800433c:	3b01      	subs	r3, #1
 800433e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004340:	8bfb      	ldrh	r3, [r7, #30]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1ea      	bne.n	800431c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004348:	4618      	mov	r0, r3
 800434a:	372c      	adds	r7, #44	; 0x2c
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4013      	ands	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800436c:	68fb      	ldr	r3, [r7, #12]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0301 	and.w	r3, r3, #1
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3301      	adds	r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	4a13      	ldr	r2, [pc, #76]	; (80043f8 <USB_CoreReset+0x60>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d901      	bls.n	80043b4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e01a      	b.n	80043ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	daf3      	bge.n	80043a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f043 0201 	orr.w	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3301      	adds	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <USB_CoreReset+0x60>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d901      	bls.n	80043dc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e006      	b.n	80043ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d0f1      	beq.n	80043cc <USB_CoreReset+0x34>

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	00030d40 	.word	0x00030d40

080043fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043fc:	b084      	sub	sp, #16
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	f107 001c 	add.w	r0, r7, #28
 800440a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004418:	461a      	mov	r2, r3
 800441a:	2300      	movs	r3, #0
 800441c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d018      	beq.n	8004480 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	2b01      	cmp	r3, #1
 8004452:	d10a      	bne.n	800446a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	e014      	b.n	8004494 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004478:	f023 0304 	bic.w	r3, r3, #4
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e009      	b.n	8004494 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800448e:	f023 0304 	bic.w	r3, r3, #4
 8004492:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004494:	2110      	movs	r1, #16
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff fe82 	bl	80041a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff fea3 	bl	80041e8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	e015      	b.n	80044d4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b4:	461a      	mov	r2, r3
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c8:	461a      	mov	r2, r3
 80044ca:	2300      	movs	r3, #0
 80044cc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3301      	adds	r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d3e5      	bcc.n	80044a8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f04f 32ff 	mov.w	r2, #4294967295
 80044e8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a13      	ldr	r2, [pc, #76]	; (8004550 <USB_HostInit+0x154>)
 8004502:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a13      	ldr	r2, [pc, #76]	; (8004554 <USB_HostInit+0x158>)
 8004508:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800450c:	e009      	b.n	8004522 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a10      	ldr	r2, [pc, #64]	; (8004558 <USB_HostInit+0x15c>)
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a0f      	ldr	r2, [pc, #60]	; (800455c <USB_HostInit+0x160>)
 800451e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f043 0210 	orr.w	r2, r3, #16
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699a      	ldr	r2, [r3, #24]
 8004538:	4b09      	ldr	r3, [pc, #36]	; (8004560 <USB_HostInit+0x164>)
 800453a:	4313      	orrs	r3, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800454c:	b004      	add	sp, #16
 800454e:	4770      	bx	lr
 8004550:	01000200 	.word	0x01000200
 8004554:	00e00300 	.word	0x00e00300
 8004558:	00600080 	.word	0x00600080
 800455c:	004000e0 	.word	0x004000e0
 8004560:	a3200008 	.word	0xa3200008

08004564 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004582:	f023 0303 	bic.w	r3, r3, #3
 8004586:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800459c:	4313      	orrs	r3, r2
 800459e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d107      	bne.n	80045b6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ac:	461a      	mov	r2, r3
 80045ae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80045b2:	6053      	str	r3, [r2, #4]
 80045b4:	e009      	b.n	80045ca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d106      	bne.n	80045ca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045c2:	461a      	mov	r2, r3
 80045c4:	f241 7370 	movw	r3, #6000	; 0x1770
 80045c8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80045f8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004606:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004608:	2064      	movs	r0, #100	; 0x64
 800460a:	f7fc fc0b 	bl	8000e24 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800461a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800461c:	200a      	movs	r0, #10
 800461e:	f7fc fc01 	bl	8000e24 <HAL_Delay>

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004650:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <USB_DriveVbus+0x44>
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d106      	bne.n	8004670 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800466a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800466e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467a:	d109      	bne.n	8004690 <USB_DriveVbus+0x64>
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800468a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800468e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	0c5b      	lsrs	r3, r3, #17
 80046bc:	f003 0303 	and.w	r3, r3, #3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	b29b      	uxth	r3, r3
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	4608      	mov	r0, r1
 80046fa:	4611      	mov	r1, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	4603      	mov	r3, r0
 8004700:	70fb      	strb	r3, [r7, #3]
 8004702:	460b      	mov	r3, r1
 8004704:	70bb      	strb	r3, [r7, #2]
 8004706:	4613      	mov	r3, r2
 8004708:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4413      	add	r3, r2
 800471a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471e:	461a      	mov	r2, r3
 8004720:	f04f 33ff 	mov.w	r3, #4294967295
 8004724:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004726:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800472a:	2b03      	cmp	r3, #3
 800472c:	d87e      	bhi.n	800482c <USB_HC_Init+0x13c>
 800472e:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <USB_HC_Init+0x44>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004745 	.word	0x08004745
 8004738:	080047ef 	.word	0x080047ef
 800473c:	08004745 	.word	0x08004745
 8004740:	080047b1 	.word	0x080047b1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4413      	add	r3, r2
 800474c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004750:	461a      	mov	r2, r3
 8004752:	f240 439d 	movw	r3, #1181	; 0x49d
 8004756:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004758:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800475c:	2b00      	cmp	r3, #0
 800475e:	da10      	bge.n	8004782 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4413      	add	r3, r2
 8004768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	78fa      	ldrb	r2, [r7, #3]
 8004770:	0151      	lsls	r1, r2, #5
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	440a      	add	r2, r1
 8004776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800477a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004780:	e057      	b.n	8004832 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	2b00      	cmp	r3, #0
 800478c:	d051      	beq.n	8004832 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	4413      	add	r3, r2
 8004796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	78fa      	ldrb	r2, [r7, #3]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047ac:	60d3      	str	r3, [r2, #12]
      break;
 80047ae:	e040      	b.n	8004832 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80047b0:	78fb      	ldrb	r3, [r7, #3]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047bc:	461a      	mov	r2, r3
 80047be:	f240 639d 	movw	r3, #1693	; 0x69d
 80047c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80047c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	da34      	bge.n	8004836 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ea:	60d3      	str	r3, [r2, #12]
      }

      break;
 80047ec:	e023      	b.n	8004836 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fa:	461a      	mov	r2, r3
 80047fc:	f240 2325 	movw	r3, #549	; 0x225
 8004800:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004802:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004806:	2b00      	cmp	r3, #0
 8004808:	da17      	bge.n	800483a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	78fa      	ldrb	r2, [r7, #3]
 800481a:	0151      	lsls	r1, r2, #5
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	440a      	add	r2, r1
 8004820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004824:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004828:	60d3      	str	r3, [r2, #12]
      }
      break;
 800482a:	e006      	b.n	800483a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	77fb      	strb	r3, [r7, #31]
      break;
 8004830:	e004      	b.n	800483c <USB_HC_Init+0x14c>
      break;
 8004832:	bf00      	nop
 8004834:	e002      	b.n	800483c <USB_HC_Init+0x14c>
      break;
 8004836:	bf00      	nop
 8004838:	e000      	b.n	800483c <USB_HC_Init+0x14c>
      break;
 800483a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	2101      	movs	r1, #1
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	6939      	ldr	r1, [r7, #16]
 8004852:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004856:	4313      	orrs	r3, r2
 8004858:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004866:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800486a:	2b00      	cmp	r3, #0
 800486c:	da03      	bge.n	8004876 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800486e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004872:	61bb      	str	r3, [r7, #24]
 8004874:	e001      	b.n	800487a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ff0f 	bl	800469e <USB_GetHostSpeed>
 8004880:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004882:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004886:	2b02      	cmp	r3, #2
 8004888:	d106      	bne.n	8004898 <USB_HC_Init+0x1a8>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d003      	beq.n	8004898 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e001      	b.n	800489c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800489c:	787b      	ldrb	r3, [r7, #1]
 800489e:	059b      	lsls	r3, r3, #22
 80048a0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80048a4:	78bb      	ldrb	r3, [r7, #2]
 80048a6:	02db      	lsls	r3, r3, #11
 80048a8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80048ac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80048ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80048b2:	049b      	lsls	r3, r3, #18
 80048b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80048b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80048ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80048bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80048c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	0159      	lsls	r1, r3, #5
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	440b      	add	r3, r1
 80048ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80048d8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80048da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d10f      	bne.n	8004902 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004900:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004902:	7ffb      	ldrb	r3, [r7, #31]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08c      	sub	sp, #48	; 0x30
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	4613      	mov	r3, r2
 8004918:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	785b      	ldrb	r3, [r3, #1]
 8004922:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004928:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d02d      	beq.n	8004992 <USB_HC_StartXfer+0x86>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	791b      	ldrb	r3, [r3, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d129      	bne.n	8004992 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d117      	bne.n	8004974 <USB_HC_StartXfer+0x68>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	79db      	ldrb	r3, [r3, #7]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <USB_HC_StartXfer+0x48>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	79db      	ldrb	r3, [r3, #7]
 8004950:	2b02      	cmp	r3, #2
 8004952:	d10f      	bne.n	8004974 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	4413      	add	r3, r2
 800495c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	6a3a      	ldr	r2, [r7, #32]
 8004968:	440a      	add	r2, r1
 800496a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800496e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004972:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <USB_HC_StartXfer+0x86>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	795b      	ldrb	r3, [r3, #5]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	4619      	mov	r1, r3
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fa2f 	bl	8004dec <USB_DoPing>
      return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e0f8      	b.n	8004b84 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d018      	beq.n	80049cc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	8912      	ldrh	r2, [r2, #8]
 80049a2:	4413      	add	r3, r2
 80049a4:	3b01      	subs	r3, #1
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	8912      	ldrh	r2, [r2, #8]
 80049aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80049ae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80049b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80049b2:	8b7b      	ldrh	r3, [r7, #26]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d90b      	bls.n	80049d0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80049b8:	8b7b      	ldrh	r3, [r7, #26]
 80049ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80049bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	8912      	ldrh	r2, [r2, #8]
 80049c2:	fb02 f203 	mul.w	r2, r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	611a      	str	r2, [r3, #16]
 80049ca:	e001      	b.n	80049d0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80049cc:	2301      	movs	r3, #1
 80049ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	78db      	ldrb	r3, [r3, #3]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80049d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	8912      	ldrh	r2, [r2, #8]
 80049de:	fb02 f203 	mul.w	r2, r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	e003      	b.n	80049f0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	695a      	ldr	r2, [r3, #20]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80049f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049fa:	04d9      	lsls	r1, r3, #19
 80049fc:	4b63      	ldr	r3, [pc, #396]	; (8004b8c <USB_HC_StartXfer+0x280>)
 80049fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a00:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	7a9b      	ldrb	r3, [r3, #10]
 8004a06:	075b      	lsls	r3, r3, #29
 8004a08:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a0c:	69f9      	ldr	r1, [r7, #28]
 8004a0e:	0148      	lsls	r0, r1, #5
 8004a10:	6a39      	ldr	r1, [r7, #32]
 8004a12:	4401      	add	r1, r0
 8004a14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004a18:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a1a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	68d9      	ldr	r1, [r3, #12]
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a32:	460a      	mov	r2, r1
 8004a34:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	6a3a      	ldr	r2, [r7, #32]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a6c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	7e7b      	ldrb	r3, [r7, #25]
 8004a7e:	075b      	lsls	r3, r3, #29
 8004a80:	69f9      	ldr	r1, [r7, #28]
 8004a82:	0148      	lsls	r0, r1, #5
 8004a84:	6a39      	ldr	r1, [r7, #32]
 8004a86:	4401      	add	r1, r0
 8004a88:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aa6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	78db      	ldrb	r3, [r3, #3]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d004      	beq.n	8004aba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	e003      	b.n	8004ac2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ac0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ac8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e04e      	b.n	8004b84 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	78db      	ldrb	r3, [r3, #3]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d149      	bne.n	8004b82 <USB_HC_StartXfer+0x276>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d045      	beq.n	8004b82 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	79db      	ldrb	r3, [r3, #7]
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d830      	bhi.n	8004b60 <USB_HC_StartXfer+0x254>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <USB_HC_StartXfer+0x1f8>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b15 	.word	0x08004b15
 8004b08:	08004b39 	.word	0x08004b39
 8004b0c:	08004b15 	.word	0x08004b15
 8004b10:	08004b39 	.word	0x08004b39
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	3303      	adds	r3, #3
 8004b1a:	089b      	lsrs	r3, r3, #2
 8004b1c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004b1e:	8afa      	ldrh	r2, [r7, #22]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d91c      	bls.n	8004b64 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	619a      	str	r2, [r3, #24]
        }
        break;
 8004b36:	e015      	b.n	8004b64 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	3303      	adds	r3, #3
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004b42:	8afa      	ldrh	r2, [r7, #22]
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d90a      	bls.n	8004b68 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	619a      	str	r2, [r3, #24]
        }
        break;
 8004b5e:	e003      	b.n	8004b68 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004b60:	bf00      	nop
 8004b62:	e002      	b.n	8004b6a <USB_HC_StartXfer+0x25e>
        break;
 8004b64:	bf00      	nop
 8004b66:	e000      	b.n	8004b6a <USB_HC_StartXfer+0x25e>
        break;
 8004b68:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	68d9      	ldr	r1, [r3, #12]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	785a      	ldrb	r2, [r3, #1]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2000      	movs	r0, #0
 8004b7a:	9000      	str	r0, [sp, #0]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7ff fb53 	bl	8004228 <USB_WritePacket>
  }

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3728      	adds	r7, #40	; 0x28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	1ff80000 	.word	0x1ff80000

08004b90 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	b29b      	uxth	r3, r3
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b089      	sub	sp, #36	; 0x24
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	0c9b      	lsrs	r3, r3, #18
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	0fdb      	lsrs	r3, r3, #31
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d104      	bne.n	8004c0c <USB_HC_Halt+0x5a>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e0e8      	b.n	8004dde <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <USB_HC_Halt+0x66>
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d173      	bne.n	8004d00 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c36:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f040 80cb 	bne.w	8004ddc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d143      	bne.n	8004cda <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c70:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c90:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cb0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cbe:	d81d      	bhi.n	8004cfc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd6:	d0ec      	beq.n	8004cb2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004cd8:	e080      	b.n	8004ddc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	0151      	lsls	r1, r2, #5
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	440a      	add	r2, r1
 8004cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cf8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004cfa:	e06f      	b.n	8004ddc <USB_HC_Halt+0x22a>
            break;
 8004cfc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004cfe:	e06d      	b.n	8004ddc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	0151      	lsls	r1, r2, #5
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	440a      	add	r2, r1
 8004d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d1e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d143      	bne.n	8004db8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d4e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d8e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d9c:	d81d      	bhi.n	8004dda <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004db4:	d0ec      	beq.n	8004d90 <USB_HC_Halt+0x1de>
 8004db6:	e011      	b.n	8004ddc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	e000      	b.n	8004ddc <USB_HC_Halt+0x22a>
          break;
 8004dda:	bf00      	nop
    }
  }

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3724      	adds	r7, #36	; 0x24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004e00:	2301      	movs	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	04da      	lsls	r2, r3, #19
 8004e08:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <USB_DoPing+0x74>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e1c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e34:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e3c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	1ff80000 	.word	0x1ff80000

08004e64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff f935 	bl	80040e4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004e7a:	2110      	movs	r1, #16
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff f98f 	bl	80041a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff f9b0 	bl	80041e8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	e01f      	b.n	8004ece <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004eac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eb4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b0f      	cmp	r3, #15
 8004ed2:	d9dc      	bls.n	8004e8e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	e034      	b.n	8004f44 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ef0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ef8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f00:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	3301      	adds	r3, #1
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f20:	d80c      	bhi.n	8004f3c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f38:	d0ec      	beq.n	8004f14 <USB_StopHost+0xb0>
 8004f3a:	e000      	b.n	8004f3e <USB_StopHost+0xda>
        break;
 8004f3c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	3301      	adds	r3, #1
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	2b0f      	cmp	r3, #15
 8004f48:	d9c7      	bls.n	8004eda <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f50:	461a      	mov	r2, r3
 8004f52:	f04f 33ff 	mov.w	r3, #4294967295
 8004f56:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff f8ae 	bl	80040c2 <USB_EnableGlobalInt>

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <USBH_HID_InterfaceInit>:
 phost->pActiveClass->iface_initnum  - variable where last index of an active interface is hold. It
 is used as an index of HID_Handle index as well.

 phost->pActiveClass->interfaces - this variable hold all successfully initialised interfaces.
 */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost) {
 8004f70:	b5b0      	push	{r4, r5, r7, lr}
 8004f72:	b08c      	sub	sp, #48	; 0x30
 8004f74:	af04      	add	r7, sp, #16
 8004f76:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	77fb      	strb	r3, [r7, #31]
	USBH_StatusTypeDef ctlStatus = USBH_BUSY;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	77bb      	strb	r3, [r7, #30]
	HID_HandleTypeDef *HID_Handle;
	USBH_InterfaceDescTypeDef *Itf_Desc;

	uint8_t iface_num = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	76fb      	strb	r3, [r7, #27]
	uint8_t i = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	777b      	strb	r3, [r7, #29]
	uint8_t max_ep;
	uint8_t num = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	773b      	strb	r3, [r7, #28]

	switch (phost->pActiveClass->iface_init) {
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004f92:	7f9b      	ldrb	r3, [r3, #30]
 8004f94:	2b07      	cmp	r3, #7
 8004f96:	f200 8297 	bhi.w	80054c8 <USBH_HID_InterfaceInit+0x558>
 8004f9a:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <USBH_HID_InterfaceInit+0x30>)
 8004f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa0:	08004fc1 	.word	0x08004fc1
 8004fa4:	08005073 	.word	0x08005073
 8004fa8:	080050e9 	.word	0x080050e9
 8004fac:	08005161 	.word	0x08005161
 8004fb0:	0800523b 	.word	0x0800523b
 8004fb4:	08005397 	.word	0x08005397
 8004fb8:	080053c7 	.word	0x080053c7
 8004fbc:	0800547d 	.word	0x0800547d
	case IFACE_INIT: {

		phost->pActiveClass->iface_initnum = 0U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	775a      	strb	r2, [r3, #29]

		//init all possible HID_Handlers even if not all will be used.

		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 8004fca:	e044      	b.n	8005056 <USBH_HID_InterfaceInit+0xe6>
			phost->pActiveClass->pData[i] = (HID_HandleTypeDef*) USBH_malloc(
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 4380 	ldr.w	r4, [r3, #896]	; 0x380
 8004fd2:	7f7d      	ldrb	r5, [r7, #29]
 8004fd4:	206c      	movs	r0, #108	; 0x6c
 8004fd6:	f003 fc57 	bl	8008888 <malloc>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f105 0308 	add.w	r3, r5, #8
 8004fe2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
					sizeof(HID_HandleTypeDef));
			HID_Handle = (HID_HandleTypeDef*) phost->pActiveClass->pData[i];
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004fec:	7f7a      	ldrb	r2, [r7, #29]
 8004fee:	3208      	adds	r2, #8
 8004ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff4:	617b      	str	r3, [r7, #20]
			memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8004ff6:	226c      	movs	r2, #108	; 0x6c
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	6978      	ldr	r0, [r7, #20]
 8004ffc:	f003 fc54 	bl	80088a8 <memset>

			// HID_Handle = phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
			HID_Handle->state = HID_INIT;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2200      	movs	r2, #0
 8005004:	709a      	strb	r2, [r3, #2]
			HID_Handle->ctl_state = HID_REQ_INIT;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2200      	movs	r2, #0
 800500a:	715a      	strb	r2, [r3, #5]
			HID_Handle->ep_addr =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bEndpointAddress;
 800500c:	7f7b      	ldrb	r3, [r7, #29]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	211a      	movs	r1, #26
 8005012:	fb01 f303 	mul.w	r3, r1, r3
 8005016:	4413      	add	r3, r2
 8005018:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800501c:	781a      	ldrb	r2, [r3, #0]
			HID_Handle->ep_addr =
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	769a      	strb	r2, [r3, #26]
			HID_Handle->length =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].wMaxPacketSize;
 8005022:	7f7b      	ldrb	r3, [r7, #29]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	211a      	movs	r1, #26
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	4413      	add	r3, r2
 800502e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005032:	881a      	ldrh	r2, [r3, #0]
			HID_Handle->length =
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	831a      	strh	r2, [r3, #24]
			HID_Handle->poll =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bInterval;
 8005038:	7f7b      	ldrb	r3, [r7, #29]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	211a      	movs	r1, #26
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	4413      	add	r3, r2
 8005044:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	b29a      	uxth	r2, r3
			HID_Handle->poll =
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	839a      	strh	r2, [r3, #28]
		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 8005050:	7f7b      	ldrb	r3, [r7, #29]
 8005052:	3301      	adds	r3, #1
 8005054:	777b      	strb	r3, [r7, #29]
 8005056:	7f7b      	ldrb	r3, [r7, #29]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d9b7      	bls.n	8004fcc <USBH_HID_InterfaceInit+0x5c>

		}
		phost->pActiveClass->interfaces = 0U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005062:	2200      	movs	r2, #0
 8005064:	771a      	strb	r2, [r3, #28]
		phost->pActiveClass->iface_init = IFACE_READHID;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800506c:	2201      	movs	r2, #1
 800506e:	779a      	strb	r2, [r3, #30]

	}
		break;
 8005070:	e22a      	b.n	80054c8 <USBH_HID_InterfaceInit+0x558>

	case IFACE_READHID: {
		iface_num =
				phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005078:	7f5b      	ldrb	r3, [r3, #29]
 800507a:	4619      	mov	r1, r3
		iface_num =
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	231a      	movs	r3, #26
 8005080:	fb03 f301 	mul.w	r3, r3, r1
 8005084:	4413      	add	r3, r2
 8005086:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	76fb      	strb	r3, [r7, #27]
		USBH_SelectInterface(phost, iface_num);
 800508e:	7efb      	ldrb	r3, [r7, #27]
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 fe68 	bl	8006d68 <USBH_SelectInterface>

		if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE,
				phost->pActiveClass->iface_initnum) == USBH_OK) {
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
		if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE,
 800509e:	7f5b      	ldrb	r3, [r3, #29]
 80050a0:	461a      	mov	r2, r3
 80050a2:	2109      	movs	r1, #9
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fb9b 	bl	80057e0 <USBH_HID_GetHIDDescriptor>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f040 8204 	bne.w	80054ba <USBH_HID_InterfaceInit+0x54a>

			HID_Handle =
					phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 80050be:	7f52      	ldrb	r2, [r2, #29]
			HID_Handle =
 80050c0:	3208      	adds	r2, #8
 80050c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c6:	617b      	str	r3, [r7, #20]
			USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80050d4:	4619      	mov	r1, r3
 80050d6:	4610      	mov	r0, r2
 80050d8:	f000 fbef 	bl	80058ba <USBH_HID_ParseHIDDesc>
			phost->pActiveClass->iface_init = IFACE_READHIDRPTDESC;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80050e2:	2202      	movs	r2, #2
 80050e4:	779a      	strb	r2, [r3, #30]
		} else {
			//TODO Check if device is XBOX360 game controller as it doesn't do HID Descriptors aparently
		}

	}
		break;
 80050e6:	e1e8      	b.n	80054ba <USBH_HID_InterfaceInit+0x54a>

	case IFACE_READHIDRPTDESC: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 80050f4:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 80050f6:	3208      	adds	r2, #8
 80050f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050fc:	617b      	str	r3, [r7, #20]
		iface_num =
				phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005104:	7f5b      	ldrb	r3, [r3, #29]
 8005106:	4619      	mov	r1, r3
		iface_num =
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	231a      	movs	r3, #26
 800510c:	fb03 f301 	mul.w	r3, r3, r1
 8005110:	4413      	add	r3, r2
 8005112:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	76fb      	strb	r3, [r7, #27]
		USBH_SelectInterface(phost, iface_num);
 800511a:	7efb      	ldrb	r3, [r7, #27]
 800511c:	4619      	mov	r1, r3
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f001 fe22 	bl	8006d68 <USBH_SelectInterface>

		if (USBH_HID_GetHIDReportDescriptor(phost,
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
				HID_Handle->HID_Desc.wItemLength,
				phost->pActiveClass->iface_initnum) == USBH_OK) {
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
		if (USBH_HID_GetHIDReportDescriptor(phost,
 800512e:	7f5b      	ldrb	r3, [r3, #29]
 8005130:	461a      	mov	r2, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fb37 	bl	80057a6 <USBH_HID_GetHIDReportDescriptor>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	f040 81bf 	bne.w	80054be <USBH_HID_InterfaceInit+0x54e>

			parse_report_descriptor(phost->device.Data,
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	3330      	adds	r3, #48	; 0x30
 800514e:	461a      	mov	r2, r3
 8005150:	f000 fd96 	bl	8005c80 <parse_report_descriptor>
					HID_Handle->HID_Desc.wItemLength,
					&(HID_Handle->HID_Desc.RptDesc));

			phost->pActiveClass->iface_init = IFACE_INITSUBCLASS;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800515a:	2203      	movs	r2, #3
 800515c:	779a      	strb	r2, [r3, #30]
		}
	}
		break;
 800515e:	e1ae      	b.n	80054be <USBH_HID_InterfaceInit+0x54e>

	case IFACE_INITSUBCLASS: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 800516c:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 800516e:	3208      	adds	r2, #8
 8005170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005174:	617b      	str	r3, [r7, #20]

		Itf_Desc =
				&phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800517c:	7f5b      	ldrb	r3, [r3, #29]
 800517e:	461a      	mov	r2, r3
		Itf_Desc =
 8005180:	231a      	movs	r3, #26
 8005182:	fb03 f302 	mul.w	r3, r3, r2
 8005186:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	330a      	adds	r3, #10
 8005190:	613b      	str	r3, [r7, #16]

		if ((Itf_Desc->bInterfaceClass == 0x03
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	795b      	ldrb	r3, [r3, #5]
 8005196:	2b03      	cmp	r3, #3
 8005198:	d107      	bne.n	80051aa <USBH_HID_InterfaceInit+0x23a>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	799b      	ldrb	r3, [r3, #6]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d103      	bne.n	80051aa <USBH_HID_InterfaceInit+0x23a>
				&& Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	79db      	ldrb	r3, [r3, #7]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d007      	beq.n	80051ba <USBH_HID_InterfaceInit+0x24a>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD))
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d109      	bne.n	80051ce <USBH_HID_InterfaceInit+0x25e>

				{
			HID_Handle->Init = USBH_HID_KeybdInit;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	4aac      	ldr	r2, [pc, #688]	; (8005470 <USBH_HID_InterfaceInit+0x500>)
 80051be:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80051c6:	7f1a      	ldrb	r2, [r3, #28]
 80051c8:	3201      	adds	r2, #1
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	771a      	strb	r2, [r3, #28]
		}

		if ((Itf_Desc->bInterfaceClass == 0x03
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	795b      	ldrb	r3, [r3, #5]
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d107      	bne.n	80051e6 <USBH_HID_InterfaceInit+0x276>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	799b      	ldrb	r3, [r3, #6]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d103      	bne.n	80051e6 <USBH_HID_InterfaceInit+0x276>
				&& Itf_Desc->bInterfaceProtocol == HID_MOUSE_BOOT_CODE)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	79db      	ldrb	r3, [r3, #7]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d007      	beq.n	80051f6 <USBH_HID_InterfaceInit+0x286>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE))
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d109      	bne.n	800520a <USBH_HID_InterfaceInit+0x29a>

				{
			HID_Handle->Init = USBH_HID_MouseInit;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	4a9e      	ldr	r2, [pc, #632]	; (8005474 <USBH_HID_InterfaceInit+0x504>)
 80051fa:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005202:	7f1a      	ldrb	r2, [r3, #28]
 8005204:	3201      	adds	r2, #1
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	771a      	strb	r2, [r3, #28]
		}

		if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK) {
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b03      	cmp	r3, #3
 8005218:	d109      	bne.n	800522e <USBH_HID_InterfaceInit+0x2be>
			HID_Handle->Init = USBH_HID_GamepadInit;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	4a96      	ldr	r2, [pc, #600]	; (8005478 <USBH_HID_InterfaceInit+0x508>)
 800521e:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005226:	7f1a      	ldrb	r2, [r3, #28]
 8005228:	3201      	adds	r2, #1
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	771a      	strb	r2, [r3, #28]
		}

		phost->pActiveClass->iface_init = IFACE_INITENDPNT;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005234:	2204      	movs	r2, #4
 8005236:	779a      	strb	r2, [r3, #30]
	}
		break;
 8005238:	e146      	b.n	80054c8 <USBH_HID_InterfaceInit+0x558>

	case IFACE_INITENDPNT: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 8005246:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 8005248:	3208      	adds	r2, #8
 800524a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524e:	617b      	str	r3, [r7, #20]

		/* Check fo available number of endpoints*/
		/* Find the number of EPs in the Interface Descriptor*/
		/* Choose the lower number in order not to overrun the buffer allocated*/
		max_ep =
				((phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005256:	4619      	mov	r1, r3
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	231a      	movs	r3, #26
 800525c:	fb03 f301 	mul.w	r3, r3, r1
 8005260:	4413      	add	r3, r2
 8005262:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005266:	781b      	ldrb	r3, [r3, #0]
		max_ep =
 8005268:	2b02      	cmp	r3, #2
 800526a:	bf28      	it	cs
 800526c:	2302      	movcs	r3, #2
 800526e:	73fb      	strb	r3, [r7, #15]
						<= USBH_MAX_NUM_ENDPOINTS) ?
						phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
						USBH_MAX_NUM_ENDPOINTS);

		/* Decode endpoint IN and OUT address from interface descriptor*/
		for (; num < max_ep; num++) {
 8005270:	e086      	b.n	8005380 <USBH_HID_InterfaceInit+0x410>
			if (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005278:	4618      	mov	r0, r3
 800527a:	7f3b      	ldrb	r3, [r7, #28]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	3301      	adds	r3, #1
 8005280:	00d9      	lsls	r1, r3, #3
 8005282:	231a      	movs	r3, #26
 8005284:	fb03 f300 	mul.w	r3, r3, r0
 8005288:	440b      	add	r3, r1
 800528a:	4413      	add	r3, r2
 800528c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	b25b      	sxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	da38      	bge.n	800530a <USBH_HID_InterfaceInit+0x39a>
					& 0x80U) {
				HID_Handle->InEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800529e:	4618      	mov	r0, r3
 80052a0:	7f3b      	ldrb	r3, [r7, #28]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	3301      	adds	r3, #1
 80052a6:	00d9      	lsls	r1, r3, #3
 80052a8:	231a      	movs	r3, #26
 80052aa:	fb03 f300 	mul.w	r3, r3, r0
 80052ae:	440b      	add	r3, r1
 80052b0:	4413      	add	r3, r2
 80052b2:	f203 3346 	addw	r3, r3, #838	; 0x346
 80052b6:	781a      	ldrb	r2, [r3, #0]
				HID_Handle->InEp =
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	711a      	strb	r2, [r3, #4]
				HID_Handle->InPipe =\
 USBH_AllocPipe(phost, HID_Handle->InEp);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	791b      	ldrb	r3, [r3, #4]
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f002 ff79 	bl	80081ba <USBH_AllocPipe>
 80052c8:	4603      	mov	r3, r0
 80052ca:	461a      	mov	r2, r3
				HID_Handle->InPipe =\
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	705a      	strb	r2, [r3, #1]

				/* Open pipe for IN endpoint*/
				USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp,
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	7859      	ldrb	r1, [r3, #1]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	7918      	ldrb	r0, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	8b12      	ldrh	r2, [r2, #24]
 80052e8:	9202      	str	r2, [sp, #8]
 80052ea:	2203      	movs	r2, #3
 80052ec:	9201      	str	r2, [sp, #4]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4623      	mov	r3, r4
 80052f2:	4602      	mov	r2, r0
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f002 ff31 	bl	800815c <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HID_Handle->length);

				USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	785b      	ldrb	r3, [r3, #1]
 80052fe:	2200      	movs	r2, #0
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f003 fa2f 	bl	8008766 <USBH_LL_SetToggle>
 8005308:	e037      	b.n	800537a <USBH_HID_InterfaceInit+0x40a>

			} else {
				HID_Handle->OutEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005310:	4618      	mov	r0, r3
 8005312:	7f3b      	ldrb	r3, [r7, #28]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	3301      	adds	r3, #1
 8005318:	00d9      	lsls	r1, r3, #3
 800531a:	231a      	movs	r3, #26
 800531c:	fb03 f300 	mul.w	r3, r3, r0
 8005320:	440b      	add	r3, r1
 8005322:	4413      	add	r3, r2
 8005324:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005328:	781a      	ldrb	r2, [r3, #0]
				HID_Handle->OutEp =
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	70da      	strb	r2, [r3, #3]
				HID_Handle->OutPipe =\
 USBH_AllocPipe(phost,
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	78db      	ldrb	r3, [r3, #3]
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f002 ff40 	bl	80081ba <USBH_AllocPipe>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
				HID_Handle->OutPipe =\
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	701a      	strb	r2, [r3, #0]
						HID_Handle->OutEp);

				/* Open pipe for OUT endpoint*/
				USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp,
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	7819      	ldrb	r1, [r3, #0]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	78d8      	ldrb	r0, [r3, #3]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	8b12      	ldrh	r2, [r2, #24]
 800535a:	9202      	str	r2, [sp, #8]
 800535c:	2203      	movs	r2, #3
 800535e:	9201      	str	r2, [sp, #4]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	4623      	mov	r3, r4
 8005364:	4602      	mov	r2, r0
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f002 fef8 	bl	800815c <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HID_Handle->length);

				USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2200      	movs	r2, #0
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f003 f9f6 	bl	8008766 <USBH_LL_SetToggle>
		for (; num < max_ep; num++) {
 800537a:	7f3b      	ldrb	r3, [r7, #28]
 800537c:	3301      	adds	r3, #1
 800537e:	773b      	strb	r3, [r7, #28]
 8005380:	7f3a      	ldrb	r2, [r7, #28]
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	429a      	cmp	r2, r3
 8005386:	f4ff af74 	bcc.w	8005272 <USBH_HID_InterfaceInit+0x302>
			}

		}

		phost->pActiveClass->iface_init = IFACE_SETPROTOCOL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005390:	2205      	movs	r2, #5
 8005392:	779a      	strb	r2, [r3, #30]
	}
		break;
 8005394:	e098      	b.n	80054c8 <USBH_HID_InterfaceInit+0x558>

	case IFACE_SETPROTOCOL: {
		//Set protocol (0U boot, 1U report)

		ctlStatus = USBH_HID_SetProtocol(phost, 1U,
				phost->device.current_interface);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
		ctlStatus = USBH_HID_SetProtocol(phost, 1U,
 800539c:	b29b      	uxth	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	2101      	movs	r1, #1
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fa67 	bl	8005876 <USBH_HID_SetProtocol>
 80053a8:	4603      	mov	r3, r0
 80053aa:	77bb      	strb	r3, [r7, #30]

		if (ctlStatus == USBH_OK || ctlStatus == USBH_NOT_SUPPORTED) {
 80053ac:	7fbb      	ldrb	r3, [r7, #30]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <USBH_HID_InterfaceInit+0x44a>
 80053b2:	7fbb      	ldrb	r3, [r7, #30]
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	f040 8084 	bne.w	80054c2 <USBH_HID_InterfaceInit+0x552>
			phost->pActiveClass->iface_init = IFACE_SETIDLE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80053c0:	2206      	movs	r2, #6
 80053c2:	779a      	strb	r2, [r3, #30]
		}

	}
		break;
 80053c4:	e07d      	b.n	80054c2 <USBH_HID_InterfaceInit+0x552>

	case IFACE_SETIDLE: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 80053d2:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 80053d4:	3208      	adds	r2, #8
 80053d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053da:	617b      	str	r3, [r7, #20]
		Itf_Desc =
				&phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80053e2:	7f5b      	ldrb	r3, [r3, #29]
 80053e4:	461a      	mov	r2, r3
		Itf_Desc =
 80053e6:	231a      	movs	r3, #26
 80053e8:	fb03 f302 	mul.w	r3, r3, r2
 80053ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	4413      	add	r3, r2
 80053f4:	330a      	adds	r3, #10
 80053f6:	613b      	str	r3, [r7, #16]

		if ((Itf_Desc->bInterfaceClass == 0x03
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	795b      	ldrb	r3, [r3, #5]
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d107      	bne.n	8005410 <USBH_HID_InterfaceInit+0x4a0>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	799b      	ldrb	r3, [r3, #6]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d103      	bne.n	8005410 <USBH_HID_InterfaceInit+0x4a0>
				&& Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	79db      	ldrb	r3, [r3, #7]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d007      	beq.n	8005420 <USBH_HID_InterfaceInit+0x4b0>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD)) {
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d10a      	bne.n	8005436 <USBH_HID_InterfaceInit+0x4c6>
			//set up polling at 500ms - 1 unit should be 4ms
			ctlStatus = USBH_HID_SetIdle(phost, 125U, 0U,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005426:	2200      	movs	r2, #0
 8005428:	217d      	movs	r1, #125	; 0x7d
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f9f5 	bl	800581a <USBH_HID_SetIdle>
 8005430:	4603      	mov	r3, r0
 8005432:	77bb      	strb	r3, [r7, #30]
 8005434:	e009      	b.n	800544a <USBH_HID_InterfaceInit+0x4da>
					phost->device.current_interface);
		} else {
			ctlStatus = USBH_HID_SetIdle(phost, 0U, 0U,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800543c:	2200      	movs	r2, #0
 800543e:	2100      	movs	r1, #0
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f9ea 	bl	800581a <USBH_HID_SetIdle>
 8005446:	4603      	mov	r3, r0
 8005448:	77bb      	strb	r3, [r7, #30]
					phost->device.current_interface);
		}

		if (ctlStatus == USBH_OK) {
 800544a:	7fbb      	ldrb	r3, [r7, #30]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <USBH_HID_InterfaceInit+0x4ec>
			phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005456:	2207      	movs	r2, #7
 8005458:	779a      	strb	r2, [r3, #30]

			}
		}

	}
		break;
 800545a:	e034      	b.n	80054c6 <USBH_HID_InterfaceInit+0x556>
			if (ctlStatus == USBH_NOT_SUPPORTED) {
 800545c:	7fbb      	ldrb	r3, [r7, #30]
 800545e:	2b03      	cmp	r3, #3
 8005460:	d131      	bne.n	80054c6 <USBH_HID_InterfaceInit+0x556>
				phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005468:	2207      	movs	r2, #7
 800546a:	779a      	strb	r2, [r3, #30]
		break;
 800546c:	e02b      	b.n	80054c6 <USBH_HID_InterfaceInit+0x556>
 800546e:	bf00      	nop
 8005470:	08005a9d 	.word	0x08005a9d
 8005474:	08005b55 	.word	0x08005b55
 8005478:	08005a25 	.word	0x08005a25

	case IFACE_SELECTIFACE: {
		//Check if we have any other interfaces to phost->device.CfgDesc.bNumInterfaces
		if (++phost->pActiveClass->iface_initnum
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005482:	7f5a      	ldrb	r2, [r3, #29]
 8005484:	3201      	adds	r2, #1
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	775a      	strb	r2, [r3, #29]
 800548a:	7f5a      	ldrb	r2, [r3, #29]
				< phost->device.CfgDesc.bNumInterfaces) {
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
		if (++phost->pActiveClass->iface_initnum
 8005492:	429a      	cmp	r2, r3
 8005494:	d20e      	bcs.n	80054b4 <USBH_HID_InterfaceInit+0x544>
			//Have we reached maximum of interfaces? USBH_MAX_NUM_INTERFACES
			if (phost->pActiveClass->iface_initnum <= USBH_MAX_NUM_INTERFACES) {
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800549c:	7f5b      	ldrb	r3, [r3, #29]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d805      	bhi.n	80054ae <USBH_HID_InterfaceInit+0x53e>
				phost->pActiveClass->iface_init = IFACE_READHID;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80054a8:	2201      	movs	r2, #1
 80054aa:	779a      	strb	r2, [r3, #30]
			}
		} else {
			status = USBH_OK;
		}
	}
		break;
 80054ac:	e00c      	b.n	80054c8 <USBH_HID_InterfaceInit+0x558>
				status = USBH_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	77fb      	strb	r3, [r7, #31]
		break;
 80054b2:	e009      	b.n	80054c8 <USBH_HID_InterfaceInit+0x558>
			status = USBH_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	77fb      	strb	r3, [r7, #31]
		break;
 80054b8:	e006      	b.n	80054c8 <USBH_HID_InterfaceInit+0x558>
		break;
 80054ba:	bf00      	nop
 80054bc:	e004      	b.n	80054c8 <USBH_HID_InterfaceInit+0x558>
		break;
 80054be:	bf00      	nop
 80054c0:	e002      	b.n	80054c8 <USBH_HID_InterfaceInit+0x558>
		break;
 80054c2:	bf00      	nop
 80054c4:	e000      	b.n	80054c8 <USBH_HID_InterfaceInit+0x558>
		break;
 80054c6:	bf00      	nop
	}

	return status;
 80054c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bdb0      	pop	{r4, r5, r7, pc}
 80054d2:	bf00      	nop

080054d4 <USBH_HID_InterfaceDeInit>:
 * @brief  USBH_HID_InterfaceDeInit
 *         The function DeInit the Pipes used for the HID class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef static USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

	HID_HandleTypeDef *HID_Handle;

	uint8_t i = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	73fb      	strb	r3, [r7, #15]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 80054e0:	e055      	b.n	800558e <USBH_HID_InterfaceDeInit+0xba>

		HID_Handle = (HID_HandleTypeDef*) phost->pActiveClass->pData[i];
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80054e8:	7bfa      	ldrb	r2, [r7, #15]
 80054ea:	3208      	adds	r2, #8
 80054ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f0:	60bb      	str	r3, [r7, #8]

		if (HID_Handle->InPipe != 0x00U) {
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00e      	beq.n	8005518 <USBH_HID_InterfaceDeInit+0x44>
			USBH_ClosePipe(phost, HID_Handle->InPipe);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	785b      	ldrb	r3, [r3, #1]
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f002 fe4a 	bl	800819a <USBH_ClosePipe>
			USBH_FreePipe(phost, HID_Handle->InPipe);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f002 fe74 	bl	80081fa <USBH_FreePipe>
			HID_Handle->InPipe = 0U; /* Reset the pipe as Free */
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2200      	movs	r2, #0
 8005516:	705a      	strb	r2, [r3, #1]
		}

		if (HID_Handle->OutPipe != 0x00U) {
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00e      	beq.n	800553e <USBH_HID_InterfaceDeInit+0x6a>
			USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f002 fe37 	bl	800819a <USBH_ClosePipe>
			USBH_FreePipe(phost, HID_Handle->OutPipe);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f002 fe61 	bl	80081fa <USBH_FreePipe>
			HID_Handle->OutPipe = 0U; /* Reset the pipe as Free */
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2200      	movs	r2, #0
 800553c:	701a      	strb	r2, [r3, #0]
		}

		if (phost->pActiveClass->pData[i]) {
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005544:	7bfa      	ldrb	r2, [r7, #15]
 8005546:	3208      	adds	r2, #8
 8005548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01b      	beq.n	8005588 <USBH_HID_InterfaceDeInit+0xb4>
			USBH_free(phost->pActiveClass->pData[i]);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005556:	7bfa      	ldrb	r2, [r7, #15]
 8005558:	3208      	adds	r2, #8
 800555a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555e:	4618      	mov	r0, r3
 8005560:	f003 f99a 	bl	8008898 <free>
			free(phost->pActiveClass->pData[i]);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800556a:	7bfa      	ldrb	r2, [r7, #15]
 800556c:	3208      	adds	r2, #8
 800556e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005572:	4618      	mov	r0, r3
 8005574:	f003 f990 	bl	8008898 <free>
			phost->pActiveClass->pData[i] = 0U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800557e:	7bfa      	ldrb	r2, [r7, #15]
 8005580:	3208      	adds	r2, #8
 8005582:	2100      	movs	r1, #0
 8005584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	3301      	adds	r3, #1
 800558c:	73fb      	strb	r3, [r7, #15]
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d9a6      	bls.n	80054e2 <USBH_HID_InterfaceDeInit+0xe>
		}
	}
	phost->pActiveClass->iface_init = 0U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800559a:	2200      	movs	r2, #0
 800559c:	779a      	strb	r2, [r3, #30]
	phost->pActiveClass->iface_initnum = 0U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80055a4:	2200      	movs	r2, #0
 80055a6:	775a      	strb	r2, [r3, #29]
	phost->pActiveClass->interfaces = 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80055ae:	2200      	movs	r2, #0
 80055b0:	771a      	strb	r2, [r3, #28]

	return USBH_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <USBH_HID_NextInterface>:
 *         for HID class.
 * @param  phost: Host handle
 * @retval USBH Status
 */

void USBH_HID_NextInterface(USBH_HandleTypeDef *phost) {
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	phost->device.current_interface++;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80055ca:	3301      	adds	r3, #1
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	if (phost->device.current_interface >= phost->pActiveClass->interfaces) {
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80055e0:	7f1b      	ldrb	r3, [r3, #28]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d303      	bcc.n	80055ee <USBH_HID_NextInterface+0x32>
		phost->device.current_interface = 0;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
	}
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USBH_HID_ClassRequest>:

static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost) {
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
	//All config has been done already in USBH_HID_InterfaceInit refactoring needed TODO
	return USBH_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USBH_HID_Process>:
 * @brief  USBH_HID_Process
 *         The function is for managing state machine for HID data transfers
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost) {
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	75fb      	strb	r3, [r7, #23]
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef*) phost->pActiveClass->pData[phost->device.current_interface];
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
	HID_HandleTypeDef *HID_Handle =
 8005628:	3208      	adds	r2, #8
 800562a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800562e:	613b      	str	r3, [r7, #16]
	uint32_t XferSize;

	switch (HID_Handle->state) {
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	789b      	ldrb	r3, [r3, #2]
 8005634:	2b06      	cmp	r3, #6
 8005636:	f200 8084 	bhi.w	8005742 <USBH_HID_Process+0x132>
 800563a:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <USBH_HID_Process+0x30>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	0800565d 	.word	0x0800565d
 8005644:	08005743 	.word	0x08005743
 8005648:	08005743 	.word	0x08005743
 800564c:	08005743 	.word	0x08005743
 8005650:	0800568f 	.word	0x0800568f
 8005654:	08005679 	.word	0x08005679
 8005658:	080056bd 	.word	0x080056bd
	case HID_INIT:
		HID_Handle->Init(phost);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	4798      	blx	r3
		HID_Handle->state = HID_SYNC;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2205      	movs	r2, #5
 8005668:	709a      	strb	r2, [r3, #2]
		phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8005670:	2102      	movs	r1, #2
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	4798      	blx	r3
		break;
 8005676:	e069      	b.n	800574c <USBH_HID_Process+0x13c>

	case HID_SYNC:
		/* Sync with start of Even Frame */
		if (phost->Timer & 1U) {
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d05f      	beq.n	8005746 <USBH_HID_Process+0x136>
			HID_Handle->state = HID_GET_DATA;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2204      	movs	r2, #4
 800568a:	709a      	strb	r2, [r3, #2]
		}
		break;
 800568c:	e05b      	b.n	8005746 <USBH_HID_Process+0x136>

	case HID_GET_DATA:
		USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	6959      	ldr	r1, [r3, #20]
				(uint8_t) HID_Handle->length, HID_Handle->InPipe);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	8b1b      	ldrh	r3, [r3, #24]
		USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005696:	b2da      	uxtb	r2, r3
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f002 fd3e 	bl	800811e <USBH_InterruptReceiveData>

		HID_Handle->state = HID_POLL;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2206      	movs	r2, #6
 80056a6:	709a      	strb	r2, [r3, #2]
		HID_Handle->timer = phost->Timer;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	621a      	str	r2, [r3, #32]
		HID_Handle->DataReady = 0U;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 80056ba:	e047      	b.n	800574c <USBH_HID_Process+0x13c>

	case HID_POLL:
		if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE) {
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f003 f82e 	bl	8008724 <USBH_LL_GetURBState>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d120      	bne.n	8005710 <USBH_HID_Process+0x100>

			XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	785b      	ldrb	r3, [r3, #1]
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f002 ff93 	bl	8008600 <USBH_LL_GetLastXferSize>
 80056da:	60f8      	str	r0, [r7, #12]

			if (HID_Handle->DataReady == 0U && XferSize != 0U) {
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d131      	bne.n	800574a <USBH_HID_Process+0x13a>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d02e      	beq.n	800574a <USBH_HID_Process+0x13a>
				USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData,
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f103 0008 	add.w	r0, r3, #8
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	6959      	ldr	r1, [r3, #20]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	8b1b      	ldrh	r3, [r3, #24]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f000 f934 	bl	8005968 <USBH_HID_FifoWrite>
						HID_Handle->length);
				HID_Handle->DataReady = 1U;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				USBH_HID_EventCallback(phost);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f981 	bl	8005a10 <USBH_HID_EventCallback>
					HID_Handle->state = HID_GET_DATA;
					USBH_HID_NextInterface(phost);
				}
			}
		}
		break;
 800570e:	e01c      	b.n	800574a <USBH_HID_Process+0x13a>
			if (USBH_LL_GetURBState(phost, HID_Handle->InPipe)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	785b      	ldrb	r3, [r3, #1]
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f003 f804 	bl	8008724 <USBH_LL_GetURBState>
 800571c:	4603      	mov	r3, r0
 800571e:	2b05      	cmp	r3, #5
 8005720:	d113      	bne.n	800574a <USBH_HID_Process+0x13a>
				if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK) {
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	7e9b      	ldrb	r3, [r3, #26]
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f002 f90a 	bl	8007942 <USBH_ClrFeature>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <USBH_HID_Process+0x13a>
					HID_Handle->state = HID_GET_DATA;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2204      	movs	r2, #4
 8005738:	709a      	strb	r2, [r3, #2]
					USBH_HID_NextInterface(phost);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff ff3e 	bl	80055bc <USBH_HID_NextInterface>
		break;
 8005740:	e003      	b.n	800574a <USBH_HID_Process+0x13a>

	default:
		break;
 8005742:	bf00      	nop
 8005744:	e002      	b.n	800574c <USBH_HID_Process+0x13c>
		break;
 8005746:	bf00      	nop
 8005748:	e000      	b.n	800574c <USBH_HID_Process+0x13c>
		break;
 800574a:	bf00      	nop
	}

	return status;
 800574c:	7dfb      	ldrb	r3, [r7, #23]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop

08005758 <USBH_HID_SOFProcess>:
 * @brief  USBH_HID_SOFProcess
 *         The function is for managing the SOF Process
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef*) phost->pActiveClass->pData[phost->device.current_interface];
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
	HID_HandleTypeDef *HID_Handle =
 800576c:	3208      	adds	r2, #8
 800576e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005772:	60fb      	str	r3, [r7, #12]

	if (HID_Handle->state == HID_POLL) {
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	789b      	ldrb	r3, [r3, #2]
 8005778:	2b06      	cmp	r3, #6
 800577a:	d10f      	bne.n	800579c <USBH_HID_SOFProcess+0x44>
		if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll) {
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	8b92      	ldrh	r2, [r2, #28]
 800578c:	4293      	cmp	r3, r2
 800578e:	d305      	bcc.n	800579c <USBH_HID_SOFProcess+0x44>
			HID_Handle->state = HID_GET_DATA;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2204      	movs	r2, #4
 8005794:	709a      	strb	r2, [r3, #2]
			USBH_HID_NextInterface(phost);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff ff10 	bl	80055bc <USBH_HID_NextInterface>
		}
	}
	return USBH_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <USBH_HID_GetHIDReportDescriptor>:
 * @param  phost: Host handle
 * @param  Length : HID Report Descriptor Length
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx) {
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b086      	sub	sp, #24
 80057aa:	af02      	add	r7, sp, #8
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	807b      	strh	r3, [r7, #2]
 80057b2:	4613      	mov	r3, r2
 80057b4:	707b      	strb	r3, [r7, #1]

	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID_REPORT, iface_idx, phost->device.Data, length);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 80057bc:	7879      	ldrb	r1, [r7, #1]
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	9201      	str	r2, [sp, #4]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	460b      	mov	r3, r1
 80057c6:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 80057ca:	2101      	movs	r1, #1
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f002 f813 	bl	80077f8 <USBH_GetDescriptor>
 80057d2:	4603      	mov	r3, r0
 80057d4:	73fb      	strb	r3, [r7, #15]
	 In case of USB Boot Mode devices for In report handling ,
	 HID report descriptor parsing is not required.
	 In case, for supporting Non-Boot Protocol devices and output reports,
	 user may parse the report descriptor*/

	return status;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <USBH_HID_GetHIDDescriptor>:
 * @param  phost: Host handle
 * @param  Length : HID Descriptor Length
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af02      	add	r7, sp, #8
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	807b      	strh	r3, [r7, #2]
 80057ec:	4613      	mov	r3, r2
 80057ee:	707b      	strb	r3, [r7, #1]
	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID, iface_idx, phost->device.Data, length);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 80057f6:	7879      	ldrb	r1, [r7, #1]
 80057f8:	887a      	ldrh	r2, [r7, #2]
 80057fa:	9201      	str	r2, [sp, #4]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	460b      	mov	r3, r1
 8005800:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8005804:	2101      	movs	r1, #1
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 fff6 	bl	80077f8 <USBH_GetDescriptor>
 800580c:	4603      	mov	r3, r0
 800580e:	73fb      	strb	r3, [r7, #15]

	return status;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <USBH_HID_SetIdle>:
 * @param  duration: Duration for HID Idle request
 * @param  reportId : Targeted report ID for Set Idle request
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost, uint8_t duration,
		uint8_t reportId, uint8_t interface) {
 800581a:	b580      	push	{r7, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	4608      	mov	r0, r1
 8005824:	4611      	mov	r1, r2
 8005826:	461a      	mov	r2, r3
 8005828:	4603      	mov	r3, r0
 800582a:	70fb      	strb	r3, [r7, #3]
 800582c:	460b      	mov	r3, r1
 800582e:	70bb      	strb	r3, [r7, #2]
 8005830:	4613      	mov	r3, r2
 8005832:	707b      	strb	r3, [r7, #1]

	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2221      	movs	r2, #33	; 0x21
 8005838:	741a      	strb	r2, [r3, #16]
			|
			USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	220a      	movs	r2, #10
 800583e:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = (uint16_t) (((uint32_t) duration << 8U)
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	b29b      	uxth	r3, r3
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	b29a      	uxth	r2, r3
 8005848:	78bb      	ldrb	r3, [r7, #2]
 800584a:	b29b      	uxth	r3, r3
 800584c:	4313      	orrs	r3, r2
 800584e:	b29a      	uxth	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	825a      	strh	r2, [r3, #18]
			| (uint32_t) reportId);

	phost->Control.setup.b.wIndex.w = 0U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = interface;
 800585a:	787b      	ldrb	r3, [r7, #1]
 800585c:	b29a      	uxth	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, 0U, 0U);
 8005862:	2200      	movs	r2, #0
 8005864:	2100      	movs	r1, #0
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f002 fa4b 	bl	8007d02 <USBH_CtlReq>
 800586c:	4603      	mov	r3, r0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <USBH_HID_SetProtocol>:
 * @param  phost: Host handle
 * @param  protocol : Set Protocol for HID : boot/report protocol
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
		uint8_t protocol, uint16_t interface) {
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	70fb      	strb	r3, [r7, #3]
 8005882:	4613      	mov	r3, r2
 8005884:	803b      	strh	r3, [r7, #0]
	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2221      	movs	r2, #33	; 0x21
 800588a:	741a      	strb	r2, [r3, #16]
			| USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	220b      	movs	r2, #11
 8005890:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = protocol;
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	b29a      	uxth	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	825a      	strh	r2, [r3, #18]
	phost->Control.setup.b.wIndex.w = interface;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	883a      	ldrh	r2, [r7, #0]
 800589e:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = 0U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, 0U, 0U);
 80058a6:	2200      	movs	r2, #0
 80058a8:	2100      	movs	r1, #0
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f002 fa29 	bl	8007d02 <USBH_CtlReq>
 80058b0:	4603      	mov	r3, r0

}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <USBH_HID_ParseHIDDesc>:
 *         This function Parse the HID descriptor
 * @param  desc: HID Descriptor
 * @param  buf: Buffer where the source descriptor is available
 * @retval None
 */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf) {
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]

	desc->bLength = *(uint8_t*) (buf + 0);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781a      	ldrb	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	701a      	strb	r2, [r3, #0]
	desc->bDescriptorType = *(uint8_t*) (buf + 1);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	785a      	ldrb	r2, [r3, #1]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	705a      	strb	r2, [r3, #1]
	desc->bcdHID = LE16(buf + 2);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	3302      	adds	r3, #2
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	b29a      	uxth	r2, r3
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	3303      	adds	r3, #3
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	4313      	orrs	r3, r2
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	805a      	strh	r2, [r3, #2]
	desc->bCountryCode = *(uint8_t*) (buf + 4);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	791a      	ldrb	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	711a      	strb	r2, [r3, #4]
	desc->bNumDescriptors = *(uint8_t*) (buf + 5);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	795a      	ldrb	r2, [r3, #5]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	715a      	strb	r2, [r3, #5]
	desc->bReportDescriptorType = *(uint8_t*) (buf + 6);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	799a      	ldrb	r2, [r3, #6]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	719a      	strb	r2, [r3, #6]
	desc->wItemLength = LE16(buf + 7);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	3307      	adds	r3, #7
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	b29a      	uxth	r2, r3
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	021b      	lsls	r3, r3, #8
 800591a:	b29b      	uxth	r3, r3
 800591c:	4313      	orrs	r3, r2
 800591e:	b29a      	uxth	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	811a      	strh	r2, [r3, #8]
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USBH_HID_FifoInit>:
 * @param  f: Fifo address
 * @param  buf: Fifo buffer
 * @param  size: Fifo Size
 * @retval none
 */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size) {
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
	f->head = 0U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	809a      	strh	r2, [r3, #4]
	f->tail = 0U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	80da      	strh	r2, [r3, #6]
	f->lock = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	729a      	strb	r2, [r3, #10]
	f->size = size;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	88fa      	ldrh	r2, [r7, #6]
 8005954:	811a      	strh	r2, [r3, #8]
	f->buf = buf;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	601a      	str	r2, [r3, #0]
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <USBH_HID_FifoWrite>:
 * @param  f: Fifo address
 * @param  buf: read buffer
 * @param  nbytes: number of item to write
 * @retval number of written items
 */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t nbytes) {
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	4613      	mov	r3, r2
 8005974:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t *p;

	p = (uint8_t*) buf;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	613b      	str	r3, [r7, #16]

	if (f->lock == 0U) {
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	7a9b      	ldrb	r3, [r3, #10]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d13c      	bne.n	80059fc <USBH_HID_FifoWrite+0x94>
		f->lock = 1U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	729a      	strb	r2, [r3, #10]

		for (i = 0U; i < nbytes; i++) {
 8005988:	2300      	movs	r3, #0
 800598a:	82fb      	strh	r3, [r7, #22]
 800598c:	e032      	b.n	80059f4 <USBH_HID_FifoWrite+0x8c>
			if ((f->head + 1U == f->tail)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	889b      	ldrh	r3, [r3, #4]
 8005992:	3301      	adds	r3, #1
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	88d2      	ldrh	r2, [r2, #6]
 8005998:	4293      	cmp	r3, r2
 800599a:	d00a      	beq.n	80059b2 <USBH_HID_FifoWrite+0x4a>
					|| ((f->head + 1U == f->size) && (f->tail == 0U))) {
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	889b      	ldrh	r3, [r3, #4]
 80059a0:	3301      	adds	r3, #1
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	8912      	ldrh	r2, [r2, #8]
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d108      	bne.n	80059bc <USBH_HID_FifoWrite+0x54>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	88db      	ldrh	r3, [r3, #6]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d104      	bne.n	80059bc <USBH_HID_FifoWrite+0x54>
				f->lock = 0U;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	729a      	strb	r2, [r3, #10]
				return i;
 80059b8:	8afb      	ldrh	r3, [r7, #22]
 80059ba:	e023      	b.n	8005a04 <USBH_HID_FifoWrite+0x9c>
			} else {
				f->buf[f->head] = *p++;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	613a      	str	r2, [r7, #16]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	68f9      	ldr	r1, [r7, #12]
 80059c8:	8889      	ldrh	r1, [r1, #4]
 80059ca:	440a      	add	r2, r1
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	7013      	strb	r3, [r2, #0]
				f->head++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	889b      	ldrh	r3, [r3, #4]
 80059d4:	3301      	adds	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	809a      	strh	r2, [r3, #4]

				if (f->head == f->size) {
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	889a      	ldrh	r2, [r3, #4]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	891b      	ldrh	r3, [r3, #8]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d102      	bne.n	80059ee <USBH_HID_FifoWrite+0x86>
					f->head = 0U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	809a      	strh	r2, [r3, #4]
		for (i = 0U; i < nbytes; i++) {
 80059ee:	8afb      	ldrh	r3, [r7, #22]
 80059f0:	3301      	adds	r3, #1
 80059f2:	82fb      	strh	r3, [r7, #22]
 80059f4:	8afa      	ldrh	r2, [r7, #22]
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d3c8      	bcc.n	800598e <USBH_HID_FifoWrite+0x26>
				}
			}
		}
	}

	f->lock = 0U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	729a      	strb	r2, [r3, #10]

	return nbytes;
 8005a02:	88fb      	ldrh	r3, [r7, #6]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <USBH_HID_EventCallback>:
/**
 * @brief  The function is a callback about HID Data events
 *  @param  phost: Selected device
 * @retval None
 */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) {
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(phost);
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USBH_HID_GamepadInit>:
  *         The function init the HID gamepad.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GamepadInit(USBH_HandleTypeDef *phost)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8005a38:	3208      	adds	r2, #8
 8005a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3e:	60fb      	str	r3, [r7, #12]
  uint8_t reportSize = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	72fb      	strb	r3, [r7, #11]
  reportSize = HID_Handle->HID_Desc.RptDesc.report_size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005a4a:	72fb      	strb	r3, [r7, #11]





  HID_Handle->length = reportSize;
 8005a4c:	7afb      	ldrb	r3, [r7, #11]
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	831a      	strh	r2, [r3, #24]


  HID_Handle->pData = (uint8_t*) malloc (reportSize *sizeof(uint8_t)); //(uint8_t*)(void *)
 8005a54:	7afb      	ldrb	r3, [r7, #11]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f002 ff16 	bl	8008888 <malloc>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	615a      	str	r2, [r3, #20]
  gamepad_report_data = HID_Handle->pData;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	4a0b      	ldr	r2, [pc, #44]	; (8005a98 <USBH_HID_GamepadInit+0x74>)
 8005a6a:	6013      	str	r3, [r2, #0]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * reportSize);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f103 0008 	add.w	r0, r3, #8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 8005a78:	7afb      	ldrb	r3, [r7, #11]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	0092      	lsls	r2, r2, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	f7ff ff52 	bl	8005930 <USBH_HID_FifoInit>

  return USBH_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	200000ec 	.word	0x200000ec

08005a9c <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8005ab0:	3208      	adds	r2, #8
 8005ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab6:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8005ab8:	4b23      	ldr	r3, [pc, #140]	; (8005b48 <USBH_HID_KeybdInit+0xac>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	709a      	strb	r2, [r3, #2]
 8005abe:	4b22      	ldr	r3, [pc, #136]	; (8005b48 <USBH_HID_KeybdInit+0xac>)
 8005ac0:	789a      	ldrb	r2, [r3, #2]
 8005ac2:	4b21      	ldr	r3, [pc, #132]	; (8005b48 <USBH_HID_KeybdInit+0xac>)
 8005ac4:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8005ac6:	4b20      	ldr	r3, [pc, #128]	; (8005b48 <USBH_HID_KeybdInit+0xac>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	711a      	strb	r2, [r3, #4]
 8005acc:	4b1e      	ldr	r3, [pc, #120]	; (8005b48 <USBH_HID_KeybdInit+0xac>)
 8005ace:	791a      	ldrb	r2, [r3, #4]
 8005ad0:	4b1d      	ldr	r3, [pc, #116]	; (8005b48 <USBH_HID_KeybdInit+0xac>)
 8005ad2:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8005ad4:	4b1c      	ldr	r3, [pc, #112]	; (8005b48 <USBH_HID_KeybdInit+0xac>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	719a      	strb	r2, [r3, #6]
 8005ada:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <USBH_HID_KeybdInit+0xac>)
 8005adc:	799a      	ldrb	r2, [r3, #6]
 8005ade:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <USBH_HID_KeybdInit+0xac>)
 8005ae0:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8005ae2:	4b19      	ldr	r3, [pc, #100]	; (8005b48 <USBH_HID_KeybdInit+0xac>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	721a      	strb	r2, [r3, #8]
 8005ae8:	4b17      	ldr	r3, [pc, #92]	; (8005b48 <USBH_HID_KeybdInit+0xac>)
 8005aea:	7a1a      	ldrb	r2, [r3, #8]
 8005aec:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <USBH_HID_KeybdInit+0xac>)
 8005aee:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	e00c      	b.n	8005b10 <USBH_HID_KeybdInit+0x74>
  {
    keybd_report_data[x] = 0U;
 8005af6:	4a15      	ldr	r2, [pc, #84]	; (8005b4c <USBH_HID_KeybdInit+0xb0>)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2100      	movs	r1, #0
 8005afc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8005b00:	4a13      	ldr	r2, [pc, #76]	; (8005b50 <USBH_HID_KeybdInit+0xb4>)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2100      	movs	r1, #0
 8005b06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d9ef      	bls.n	8005af6 <USBH_HID_KeybdInit+0x5a>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	8b1b      	ldrh	r3, [r3, #24]
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d902      	bls.n	8005b24 <USBH_HID_KeybdInit+0x88>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2208      	movs	r2, #8
 8005b22:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4a0a      	ldr	r2, [pc, #40]	; (8005b50 <USBH_HID_KeybdInit+0xb4>)
 8005b28:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f103 0008 	add.w	r0, r3, #8
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005b36:	2250      	movs	r2, #80	; 0x50
 8005b38:	4619      	mov	r1, r3
 8005b3a:	f7ff fef9 	bl	8005930 <USBH_HID_FifoInit>

  return USBH_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	200001e8 	.word	0x200001e8
 8005b4c:	200001d8 	.word	0x200001d8
 8005b50:	200001e0 	.word	0x200001e0

08005b54 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8005b68:	3208      	adds	r2, #8
 8005b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6e:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8005b70:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <USBH_HID_MouseInit+0xb4>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	801a      	strh	r2, [r3, #0]
  mouse_info.y = 0U;
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <USBH_HID_MouseInit+0xb4>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	805a      	strh	r2, [r3, #2]
  mouse_info.buttons[0] = 0U;
 8005b7c:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <USBH_HID_MouseInit+0xb4>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	711a      	strb	r2, [r3, #4]
  mouse_info.buttons[1] = 0U;
 8005b82:	4b21      	ldr	r3, [pc, #132]	; (8005c08 <USBH_HID_MouseInit+0xb4>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	715a      	strb	r2, [r3, #5]
  mouse_info.buttons[2] = 0U;
 8005b88:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <USBH_HID_MouseInit+0xb4>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	719a      	strb	r2, [r3, #6]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	e00c      	b.n	8005bae <USBH_HID_MouseInit+0x5a>
  {
    mouse_report_data[i] = 0U;
 8005b94:	4a1d      	ldr	r2, [pc, #116]	; (8005c0c <USBH_HID_MouseInit+0xb8>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	; (8005c10 <USBH_HID_MouseInit+0xbc>)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3301      	adds	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d9ef      	bls.n	8005b94 <USBH_HID_MouseInit+0x40>

  //if (HID_Handle->length > sizeof(mouse_report_data))
  //{
  //  HID_Handle->length = sizeof(mouse_report_data);
  //}
  HID_Handle->length = HID_Handle->HID_Desc.RptDesc.report_size+ (HID_Handle->HID_Desc.RptDesc.report_id?1:0);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bf14      	ite	ne
 8005bc6:	2301      	movne	r3, #1
 8005bc8:	2300      	moveq	r3, #0
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	4413      	add	r3, r2
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	831a      	strh	r2, [r3, #24]
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	4a0d      	ldr	r2, [pc, #52]	; (8005c10 <USBH_HID_MouseInit+0xbc>)
 8005bda:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * HID_Handle->length);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f103 0008 	add.w	r0, r3, #8
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	8b1b      	ldrh	r3, [r3, #24]
 8005bec:	461a      	mov	r2, r3
 8005bee:	0092      	lsls	r2, r2, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f7ff fe9a 	bl	8005930 <USBH_HID_FifoInit>

  return USBH_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	200001f8 	.word	0x200001f8
 8005c0c:	20000200 	.word	0x20000200
 8005c10:	20000208 	.word	0x20000208

08005c14 <report_is_usable>:
  uint8_t bType: 2;
  uint8_t bTag: 4;
} __attribute__((packed)) item_t;


int report_is_usable(uint16_t bit_count, uint8_t report_complete, hid_report_t *conf) {
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	603a      	str	r2, [r7, #0]
 8005c1e:	80fb      	strh	r3, [r7, #6]
 8005c20:	460b      	mov	r3, r1
 8005c22:	717b      	strb	r3, [r7, #5]
// hidp_debugf("  - total bit count: %d (%d bytes, %d bits)",
//	      bit_count, bit_count/8, bit_count%8);

  conf->report_size = bit_count/8;
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	08db      	lsrs	r3, r3, #3
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	709a      	strb	r2, [r3, #2]

  // check if something useful was detected
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d104      	bne.n	8005c48 <report_is_usable+0x34>
 8005c3e:	797b      	ldrb	r3, [r7, #5]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	2b07      	cmp	r3, #7
 8005c46:	d012      	beq.n	8005c6e <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	b2db      	uxtb	r3, r3
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d104      	bne.n	8005c60 <report_is_usable+0x4c>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 8005c56:	797b      	ldrb	r3, [r7, #5]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	2b0f      	cmp	r3, #15
 8005c5e:	d006      	beq.n	8005c6e <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_KEYBOARD))) {
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	b2db      	uxtb	r3, r3
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d101      	bne.n	8005c72 <report_is_usable+0x5e>
 //   hidp_debugf("  - report %d is usable", conf->report_id);
    return 1;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <report_is_usable+0x60>
  }

//  hidp_debugf("  - unusable report %d", conf->report_id);
  return 0;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <parse_report_descriptor>:



int parse_report_descriptor(uint8_t *rep, uint16_t rep_size,hid_report_t *conf) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08e      	sub	sp, #56	; 0x38
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	817b      	strh	r3, [r7, #10]
  int8_t app_collection = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int8_t phys_log_collection = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint8_t skip_collection = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  int8_t generic_desktop = -1;   // depth at which first gen_desk was found
 8005ca0:	23ff      	movs	r3, #255	; 0xff
 8005ca2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  uint8_t collection_depth = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33


  //
  uint8_t report_size = 0, report_count = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  uint16_t bit_count = 0, usage_count = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t logical_minimum=0, logical_maximum=0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	853b      	strh	r3, [r7, #40]	; 0x28

  // mask used to check of all required components have been found, so
  // that e.g. both axes and the button of a joystick are ready to be used
  uint8_t report_complete = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  // joystick/mouse components
  int8_t axis[2] = { -1, -1};
 8005cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cd2:	823b      	strh	r3, [r7, #16]
  uint8_t btns = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  int8_t hat = -1;
 8005cda:	23ff      	movs	r3, #255	; 0xff
 8005cdc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


  while(rep_size) {
 8005ce0:	e2d4      	b.n	800628c <parse_report_descriptor+0x60c>
    // extract short item
    uint8_t tag = ((item_t*)rep)->bTag;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	777b      	strb	r3, [r7, #29]
    uint8_t type = ((item_t*)rep)->bType;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	773b      	strb	r3, [r7, #28]
    uint8_t size = ((item_t*)rep)->bSize;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	76fb      	strb	r3, [r7, #27]

    rep++;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]
    rep_size--;   // one byte consumed
 8005d0c:	897b      	ldrh	r3, [r7, #10]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	817b      	strh	r3, [r7, #10]



    uint32_t value = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	623b      	str	r3, [r7, #32]
     if(size) {      // size 1/2/3
 8005d16:	7efb      	ldrb	r3, [r7, #27]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d007      	beq.n	8005d2c <parse_report_descriptor+0xac>
       value = *rep++;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	60fa      	str	r2, [r7, #12]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	623b      	str	r3, [r7, #32]
       rep_size--;
 8005d26:	897b      	ldrh	r3, [r7, #10]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	817b      	strh	r3, [r7, #10]
     }

     if(size > 1) {  // size 2/3
 8005d2c:	7efb      	ldrb	r3, [r7, #27]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d90b      	bls.n	8005d4a <parse_report_descriptor+0xca>
       value = (value & 0xff) + ((uint32_t)(*rep++)<<8);
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1c59      	adds	r1, r3, #1
 8005d3a:	60f9      	str	r1, [r7, #12]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	4413      	add	r3, r2
 8005d42:	623b      	str	r3, [r7, #32]
       rep_size--;
 8005d44:	897b      	ldrh	r3, [r7, #10]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	817b      	strh	r3, [r7, #10]
     }

     if(size > 2) {  // size 3
 8005d4a:	7efb      	ldrb	r3, [r7, #27]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d915      	bls.n	8005d7c <parse_report_descriptor+0xfc>
       value &= 0xffff;
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<16);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	60fa      	str	r2, [r7, #12]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	041b      	lsls	r3, r3, #16
 8005d60:	6a3a      	ldr	r2, [r7, #32]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<24);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	60fa      	str	r2, [r7, #12]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	6a3a      	ldr	r2, [r7, #32]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	623b      	str	r3, [r7, #32]
       rep_size-=2;
 8005d76:	897b      	ldrh	r3, [r7, #10]
 8005d78:	3b02      	subs	r3, #2
 8005d7a:	817b      	strh	r3, [r7, #10]
     }


       // we are currently skipping an unknown/unsupported collection)
           if(skip_collection) {
 8005d7c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d029      	beq.n	8005dd8 <parse_report_descriptor+0x158>
             if(!type) {  // main item
 8005d84:	7f3b      	ldrb	r3, [r7, #28]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f040 8280 	bne.w	800628c <parse_report_descriptor+0x60c>
       				// any new collection increases the depth of collections to skip
       				if(tag == 10) {
 8005d8c:	7f7b      	ldrb	r3, [r7, #29]
 8005d8e:	2b0a      	cmp	r3, #10
 8005d90:	d109      	bne.n	8005da6 <parse_report_descriptor+0x126>
       					skip_collection++;
 8005d92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005d96:	3301      	adds	r3, #1
 8005d98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth++;
 8005d9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005da0:	3301      	adds	r3, #1
 8005da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
       				}

       				// any end collection decreases it
       				if(tag == 12) {
 8005da6:	7f7b      	ldrb	r3, [r7, #29]
 8005da8:	2b0c      	cmp	r3, #12
 8005daa:	f040 826f 	bne.w	800628c <parse_report_descriptor+0x60c>
       					skip_collection--;
 8005dae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005db2:	3b01      	subs	r3, #1
 8005db4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth--;
 8005db8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

       					// leaving the depth the generic desktop was valid for
       					if(generic_desktop > collection_depth)
 8005dc2:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8005dc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	f340 825e 	ble.w	800628c <parse_report_descriptor+0x60c>
       						generic_desktop = -1;
 8005dd0:	23ff      	movs	r3, #255	; 0xff
 8005dd2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8005dd6:	e259      	b.n	800628c <parse_report_descriptor+0x60c>
             }

           } else {


                 switch(type) {
 8005dd8:	7f3b      	ldrb	r3, [r7, #28]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	f000 81cb 	beq.w	8006176 <parse_report_descriptor+0x4f6>
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	f300 8252 	bgt.w	800628a <parse_report_descriptor+0x60a>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <parse_report_descriptor+0x172>
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	f000 8172 	beq.w	80060d4 <parse_report_descriptor+0x454>
 8005df0:	e24b      	b.n	800628a <parse_report_descriptor+0x60a>
                 case 0:
           	// main item

           	switch(tag) {
 8005df2:	7f7b      	ldrb	r3, [r7, #29]
 8005df4:	3b08      	subs	r3, #8
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	f200 8168 	bhi.w	80060cc <parse_report_descriptor+0x44c>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <parse_report_descriptor+0x184>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e19 	.word	0x08005e19
 8005e08:	080060d1 	.word	0x080060d1
 8005e0c:	08005fff 	.word	0x08005fff
 8005e10:	080060d1 	.word	0x080060d1
 8005e14:	0800605b 	.word	0x0800605b
           	case 8:
           	  // handle found buttons
           	  if(btns) {
 8005e18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d050      	beq.n	8005ec2 <parse_report_descriptor+0x242>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d006      	beq.n	8005e3c <parse_report_descriptor+0x1bc>
           	       (conf->type == REPORT_TYPE_MOUSE)) {
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	b2db      	uxtb	r3, r3
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d142      	bne.n	8005ec2 <parse_report_descriptor+0x242>
           	      // scan for up to four buttons
           	      uint8_t b;
           	      for(b=0;b<12;b++) {
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	77fb      	strb	r3, [r7, #31]
 8005e40:	e02c      	b.n	8005e9c <parse_report_descriptor+0x21c>
           		if(report_count > b) {
 8005e42:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8005e46:	7ffb      	ldrb	r3, [r7, #31]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d91a      	bls.n	8005e82 <parse_report_descriptor+0x202>
           		  uint16_t this_bit = bit_count+b;
 8005e4c:	7ffb      	ldrb	r3, [r7, #31]
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e52:	4413      	add	r3, r2
 8005e54:	833b      	strh	r3, [r7, #24]

           		  conf->joystick_mouse.button[b].byte_offset = this_bit/8;
 8005e56:	8b3b      	ldrh	r3, [r7, #24]
 8005e58:	08db      	lsrs	r3, r3, #3
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	7ffa      	ldrb	r2, [r7, #31]
 8005e5e:	b2d9      	uxtb	r1, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	320c      	adds	r2, #12
 8005e64:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
           		  conf->joystick_mouse.button[b].bitmask = 1 << (this_bit%8);
 8005e68:	8b3b      	ldrh	r3, [r7, #24]
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	2201      	movs	r2, #1
 8005e70:	409a      	lsls	r2, r3
 8005e72:	7ffb      	ldrb	r3, [r7, #31]
 8005e74:	b2d1      	uxtb	r1, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	330c      	adds	r3, #12
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	4413      	add	r3, r2
 8005e7e:	460a      	mov	r2, r1
 8005e80:	705a      	strb	r2, [r3, #1]
           		}
           					conf->joystick_mouse.button_count = report_count * report_size;
 8005e82:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8005e86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005e8a:	fb12 f303 	smulbb	r3, r2, r3
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
           	      for(b=0;b<12;b++) {
 8005e96:	7ffb      	ldrb	r3, [r7, #31]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	77fb      	strb	r3, [r7, #31]
 8005e9c:	7ffb      	ldrb	r3, [r7, #31]
 8005e9e:	2b0b      	cmp	r3, #11
 8005ea0:	d9cf      	bls.n	8005e42 <parse_report_descriptor+0x1c2>
           	      }

           	      // we found at least one button which is all we want to accept this as a valid
           	      // joystick
           	      report_complete |= JOY_MOUSE_REQ_BTN_0;
 8005ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ea6:	f043 0304 	orr.w	r3, r3, #4
 8005eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	      if(report_count > 1) report_complete |= JOY_MOUSE_REQ_BTN_1;
 8005eae:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d905      	bls.n	8005ec2 <parse_report_descriptor+0x242>
 8005eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eba:	f043 0308 	orr.w	r3, r3, #8
 8005ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	    }
           	  }

           	  // handle found axes
           	  uint8_t c;
           	  for(c=0;c<2;c++) {
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	77bb      	strb	r3, [r7, #30]
 8005ec6:	e05e      	b.n	8005f86 <parse_report_descriptor+0x306>
           	    if(axis[c] >= 0) {
 8005ec8:	7fbb      	ldrb	r3, [r7, #30]
 8005eca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005ece:	4413      	add	r3, r2
 8005ed0:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	db53      	blt.n	8005f80 <parse_report_descriptor+0x300>
           	      uint16_t cnt = bit_count + report_size * axis[c];
 8005ed8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	7fbb      	ldrb	r3, [r7, #30]
 8005ee0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005ee4:	440b      	add	r3, r1
 8005ee6:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	fb12 f303 	smulbb	r3, r2, r3
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ef4:	4413      	add	r3, r2
 8005ef6:	82bb      	strh	r3, [r7, #20]

           	      if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d006      	beq.n	8005f14 <parse_report_descriptor+0x294>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d135      	bne.n	8005f80 <parse_report_descriptor+0x300>
           		// save in joystick report
           		conf->joystick_mouse.axis[c].offset = cnt;
 8005f14:	7fba      	ldrb	r2, [r7, #30]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3201      	adds	r2, #1
 8005f1a:	8ab9      	ldrh	r1, [r7, #20]
 8005f1c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
           		conf->joystick_mouse.axis[c].size = report_size;
 8005f20:	7fbb      	ldrb	r3, [r7, #30]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	3301      	adds	r3, #1
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	4413      	add	r3, r2
 8005f2a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8005f2e:	709a      	strb	r2, [r3, #2]
           		conf->joystick_mouse.axis[c].logical.min = logical_minimum;
 8005f30:	7fbb      	ldrb	r3, [r7, #30]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	3301      	adds	r3, #1
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	4413      	add	r3, r2
 8005f3a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005f3c:	809a      	strh	r2, [r3, #4]
           		conf->joystick_mouse.axis[c].logical.max = logical_maximum;
 8005f3e:	7fbb      	ldrb	r3, [r7, #30]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	3301      	adds	r3, #1
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	4413      	add	r3, r2
 8005f48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005f4a:	80da      	strh	r2, [r3, #6]
           		conf->joystick_mouse.axis[c].size = report_size;
 8005f4c:	7fbb      	ldrb	r3, [r7, #30]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	3301      	adds	r3, #1
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4413      	add	r3, r2
 8005f56:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8005f5a:	709a      	strb	r2, [r3, #2]
           		if(c==0) report_complete |= JOY_MOUSE_REQ_AXIS_X;
 8005f5c:	7fbb      	ldrb	r3, [r7, #30]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d105      	bne.n	8005f6e <parse_report_descriptor+0x2ee>
 8005f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           		if(c==1) report_complete |= JOY_MOUSE_REQ_AXIS_Y;
 8005f6e:	7fbb      	ldrb	r3, [r7, #30]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d105      	bne.n	8005f80 <parse_report_descriptor+0x300>
 8005f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f78:	f043 0302 	orr.w	r3, r3, #2
 8005f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  for(c=0;c<2;c++) {
 8005f80:	7fbb      	ldrb	r3, [r7, #30]
 8005f82:	3301      	adds	r3, #1
 8005f84:	77bb      	strb	r3, [r7, #30]
 8005f86:	7fbb      	ldrb	r3, [r7, #30]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d99d      	bls.n	8005ec8 <parse_report_descriptor+0x248>
           	      }
           	    }
           	  }

           	  // handle found hat
           	  if(hat >= 0) {
 8005f8c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	db1a      	blt.n	8005fca <parse_report_descriptor+0x34a>
           	    uint16_t cnt = bit_count + report_size * hat;
 8005f94:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	fb12 f303 	smulbb	r3, r2, r3
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fa8:	4413      	add	r3, r2
 8005faa:	82fb      	strh	r3, [r7, #22]
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	f003 0303 	and.w	r3, r3, #3
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d107      	bne.n	8005fca <parse_report_descriptor+0x34a>
           	      conf->joystick_mouse.hat.offset = cnt;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	8afa      	ldrh	r2, [r7, #22]
 8005fbe:	861a      	strh	r2, [r3, #48]	; 0x30
           	      conf->joystick_mouse.hat.size = report_size;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8005fc6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
           	    }
           	  }


           	  // reset for next inputs
           	  bit_count += report_count * report_size;
 8005fca:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	fb12 f303 	smulbb	r3, r2, r3
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fde:	4413      	add	r3, r2
 8005fe0:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	  usage_count = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  btns = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
           	  axis[0] = axis[1] = -1;
 8005fec:	23ff      	movs	r3, #255	; 0xff
 8005fee:	747b      	strb	r3, [r7, #17]
 8005ff0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005ff4:	743b      	strb	r3, [r7, #16]
           	  hat = -1;
 8005ff6:	23ff      	movs	r3, #255	; 0xff
 8005ff8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
           	  break;
 8005ffc:	e069      	b.n	80060d2 <parse_report_descriptor+0x452>

           	case 11:
           	  break;

           	case 10:
           	  collection_depth++;
 8005ffe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006002:	3301      	adds	r3, #1
 8006004:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
           	  usage_count = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	85bb      	strh	r3, [r7, #44]	; 0x2c

           	  if(value == 1) {	   // app collection
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d107      	bne.n	8006022 <parse_report_descriptor+0x3a2>
           	    app_collection++;
 8006012:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006016:	b2db      	uxtb	r3, r3
 8006018:	3301      	adds	r3, #1
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	  } else if(value == 2) {  // logical collection
           	    phys_log_collection++;
           	  } else {
           	    skip_collection++;
           	  }
           	  break;
 8006020:	e057      	b.n	80060d2 <parse_report_descriptor+0x452>
           	  } else if(value == 0) {  // physical collection
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d107      	bne.n	8006038 <parse_report_descriptor+0x3b8>
           	    phys_log_collection++;
 8006028:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800602c:	b2db      	uxtb	r3, r3
 800602e:	3301      	adds	r3, #1
 8006030:	b2db      	uxtb	r3, r3
 8006032:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8006036:	e04c      	b.n	80060d2 <parse_report_descriptor+0x452>
           	  } else if(value == 2) {  // logical collection
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	2b02      	cmp	r3, #2
 800603c:	d107      	bne.n	800604e <parse_report_descriptor+0x3ce>
           	    phys_log_collection++;
 800603e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8006042:	b2db      	uxtb	r3, r3
 8006044:	3301      	adds	r3, #1
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 800604c:	e041      	b.n	80060d2 <parse_report_descriptor+0x452>
           	    skip_collection++;
 800604e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006052:	3301      	adds	r3, #1
 8006054:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
           	  break;
 8006058:	e03b      	b.n	80060d2 <parse_report_descriptor+0x452>

           	case 12:
           	  collection_depth--;
 800605a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800605e:	3b01      	subs	r3, #1
 8006060:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

           	  // leaving the depth the generic desktop was valid for
           	  if(generic_desktop > collection_depth)
 8006064:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8006068:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800606c:	429a      	cmp	r2, r3
 800606e:	dd02      	ble.n	8006076 <parse_report_descriptor+0x3f6>
           	    generic_desktop = -1;
 8006070:	23ff      	movs	r3, #255	; 0xff
 8006072:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

           	  if(phys_log_collection) {
 8006076:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <parse_report_descriptor+0x40e>

           	    phys_log_collection--;
 800607e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8006082:	b2db      	uxtb	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	    }

           	  } else {
           	    return 0;
           	  }
           	  break;
 800608c:	e021      	b.n	80060d2 <parse_report_descriptor+0x452>
           	  } else if(app_collection) {
 800608e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006092:	2b00      	cmp	r3, #0
 8006094:	d018      	beq.n	80060c8 <parse_report_descriptor+0x448>
           	    app_collection--;
 8006096:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800609a:	b2db      	uxtb	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	     if(report_is_usable(bit_count, report_complete, conf))
 80060a4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80060a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fdb1 	bl	8005c14 <report_is_usable>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <parse_report_descriptor+0x43c>
           	      return 1;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0ec      	b.n	8006296 <parse_report_descriptor+0x616>
           	      bit_count = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	      report_complete = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  break;
 80060c6:	e004      	b.n	80060d2 <parse_report_descriptor+0x452>
           	    return 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e0e4      	b.n	8006296 <parse_report_descriptor+0x616>

           	default:
           	  return 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	e0e2      	b.n	8006296 <parse_report_descriptor+0x616>
           	  break;
 80060d0:	bf00      	nop
           	  break;
           	}
           	break;
 80060d2:	e0db      	b.n	800628c <parse_report_descriptor+0x60c>

                 case 1:
           	// global item
           	switch(tag) {
 80060d4:	7f7b      	ldrb	r3, [r7, #29]
 80060d6:	2b09      	cmp	r3, #9
 80060d8:	d847      	bhi.n	800616a <parse_report_descriptor+0x4ea>
 80060da:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <parse_report_descriptor+0x460>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	08006109 	.word	0x08006109
 80060e4:	08006145 	.word	0x08006145
 80060e8:	0800614b 	.word	0x0800614b
 80060ec:	0800616f 	.word	0x0800616f
 80060f0:	0800616f 	.word	0x0800616f
 80060f4:	0800616f 	.word	0x0800616f
 80060f8:	0800616f 	.word	0x0800616f
 80060fc:	08006151 	.word	0x08006151
 8006100:	08006159 	.word	0x08006159
 8006104:	08006163 	.word	0x08006163
           	case 0:

           	  if(value == USAGE_PAGE_KEYBOARD) {
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	2b07      	cmp	r3, #7
 800610c:	d01a      	beq.n	8006144 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_GAMING) {
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	2b05      	cmp	r3, #5
 8006112:	d017      	beq.n	8006144 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_LEDS) {
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	2b08      	cmp	r3, #8
 8006118:	d014      	beq.n	8006144 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_CONSUMER) {
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	2b0c      	cmp	r3, #12
 800611e:	d011      	beq.n	8006144 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_BUTTON) {
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	2b09      	cmp	r3, #9
 8006124:	d103      	bne.n	800612e <parse_report_descriptor+0x4ae>
           	    btns = 1;
 8006126:	2301      	movs	r3, #1
 8006128:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800612c:	e00a      	b.n	8006144 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_GENERIC_DESKTOP) {
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d11e      	bne.n	8006172 <parse_report_descriptor+0x4f2>
           	    if(generic_desktop < 0)
 8006134:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8006138:	2b00      	cmp	r3, #0
 800613a:	da03      	bge.n	8006144 <parse_report_descriptor+0x4c4>
           	      generic_desktop = collection_depth;
 800613c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006140:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
           	  } else

           	  break;

           	case 1:
           	  logical_minimum = value;
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	857b      	strh	r3, [r7, #42]	; 0x2a
           	  break;
 8006148:	e014      	b.n	8006174 <parse_report_descriptor+0x4f4>

           	case 2:
           	  logical_maximum = value;
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	853b      	strh	r3, [r7, #40]	; 0x28
           	  break;
 800614e:	e011      	b.n	8006174 <parse_report_descriptor+0x4f4>

           	case 6:
           	  break;

           	case 7:
           	  report_size = value;
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
           		break;
 8006156:	e00d      	b.n	8006174 <parse_report_descriptor+0x4f4>

           	case 8:
           	  conf->report_id = value;
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	b2da      	uxtb	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	705a      	strb	r2, [r3, #1]
           	  break;
 8006160:	e008      	b.n	8006174 <parse_report_descriptor+0x4f4>

           	case 9:
           		report_count = value;
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
           	  break;
 8006168:	e004      	b.n	8006174 <parse_report_descriptor+0x4f4>

           	default:
           	  return 0;
 800616a:	2300      	movs	r3, #0
 800616c:	e093      	b.n	8006296 <parse_report_descriptor+0x616>
           	  break;
 800616e:	bf00      	nop
 8006170:	e08c      	b.n	800628c <parse_report_descriptor+0x60c>
           	  break;
 8006172:	bf00      	nop
           	  break;
           	}
           	break;
 8006174:	e08a      	b.n	800628c <parse_report_descriptor+0x60c>

                 case 2:
           	// local item
           	switch(tag) {
 8006176:	7f7b      	ldrb	r3, [r7, #29]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d07e      	beq.n	800627a <parse_report_descriptor+0x5fa>
 800617c:	2b02      	cmp	r3, #2
 800617e:	f300 8082 	bgt.w	8006286 <parse_report_descriptor+0x606>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <parse_report_descriptor+0x50c>
 8006186:	2b01      	cmp	r3, #1
 8006188:	d06f      	beq.n	800626a <parse_report_descriptor+0x5ea>
           	  usage_count += value;
           	  break;

           	default:

           	  break;
 800618a:	e07c      	b.n	8006286 <parse_report_descriptor+0x606>
           	  if( !collection_depth && (value == USAGE_KEYBOARD)) {
 800618c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006190:	2b00      	cmp	r3, #0
 8006192:	d109      	bne.n	80061a8 <parse_report_descriptor+0x528>
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	2b06      	cmp	r3, #6
 8006198:	d106      	bne.n	80061a8 <parse_report_descriptor+0x528>
           	    conf->type = REPORT_TYPE_KEYBOARD;
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	7813      	ldrb	r3, [r2, #0]
 800619e:	2102      	movs	r1, #2
 80061a0:	f361 0301 	bfi	r3, r1, #0, #2
 80061a4:	7013      	strb	r3, [r2, #0]
 80061a6:	e05c      	b.n	8006262 <parse_report_descriptor+0x5e2>
           	  } else if(!collection_depth && (value == USAGE_MOUSE)) {
 80061a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <parse_report_descriptor+0x544>
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d106      	bne.n	80061c4 <parse_report_descriptor+0x544>
           	    conf->type = REPORT_TYPE_MOUSE;
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	7813      	ldrb	r3, [r2, #0]
 80061ba:	2101      	movs	r1, #1
 80061bc:	f361 0301 	bfi	r3, r1, #0, #2
 80061c0:	7013      	strb	r3, [r2, #0]
 80061c2:	e04e      	b.n	8006262 <parse_report_descriptor+0x5e2>
           	  } else if(!collection_depth &&
 80061c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10b      	bne.n	80061e4 <parse_report_descriptor+0x564>
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	d002      	beq.n	80061d8 <parse_report_descriptor+0x558>
           		    ((value == USAGE_GAMEPAD) || (value == USAGE_JOYSTICK))) {
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d105      	bne.n	80061e4 <parse_report_descriptor+0x564>
           	    conf->type = REPORT_TYPE_JOYSTICK;
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	7813      	ldrb	r3, [r2, #0]
 80061dc:	f043 0303 	orr.w	r3, r3, #3
 80061e0:	7013      	strb	r3, [r2, #0]
 80061e2:	e03e      	b.n	8006262 <parse_report_descriptor+0x5e2>
           	  } else if(value == USAGE_POINTER && app_collection) {
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d103      	bne.n	80061f2 <parse_report_descriptor+0x572>
 80061ea:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d137      	bne.n	8006262 <parse_report_descriptor+0x5e2>
           	  } else if((value == USAGE_X || value == USAGE_Y) && app_collection) {
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	2b30      	cmp	r3, #48	; 0x30
 80061f6:	d002      	beq.n	80061fe <parse_report_descriptor+0x57e>
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	2b31      	cmp	r3, #49	; 0x31
 80061fc:	d11e      	bne.n	800623c <parse_report_descriptor+0x5bc>
 80061fe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01a      	beq.n	800623c <parse_report_descriptor+0x5bc>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b03      	cmp	r3, #3
 8006212:	d006      	beq.n	8006222 <parse_report_descriptor+0x5a2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	f003 0303 	and.w	r3, r3, #3
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b01      	cmp	r3, #1
 8006220:	d11e      	bne.n	8006260 <parse_report_descriptor+0x5e0>
           	      if(value == USAGE_X) {
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	2b30      	cmp	r3, #48	; 0x30
 8006226:	d102      	bne.n	800622e <parse_report_descriptor+0x5ae>
           		axis[0] = usage_count;
 8006228:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800622a:	b25b      	sxtb	r3, r3
 800622c:	743b      	strb	r3, [r7, #16]
           	      if(value == USAGE_Y) {
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	2b31      	cmp	r3, #49	; 0x31
 8006232:	d115      	bne.n	8006260 <parse_report_descriptor+0x5e0>
           		axis[1] = usage_count;
 8006234:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006236:	b25b      	sxtb	r3, r3
 8006238:	747b      	strb	r3, [r7, #17]
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 800623a:	e011      	b.n	8006260 <parse_report_descriptor+0x5e0>
           	  } else if((value == USAGE_HAT) && app_collection) {
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	2b39      	cmp	r3, #57	; 0x39
 8006240:	d10f      	bne.n	8006262 <parse_report_descriptor+0x5e2>
 8006242:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00b      	beq.n	8006262 <parse_report_descriptor+0x5e2>
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b03      	cmp	r3, #3
 8006256:	d104      	bne.n	8006262 <parse_report_descriptor+0x5e2>
           	      hat = usage_count;
 8006258:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800625a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800625e:	e000      	b.n	8006262 <parse_report_descriptor+0x5e2>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8006260:	bf00      	nop
           	  usage_count++;
 8006262:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006264:	3301      	adds	r3, #1
 8006266:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8006268:	e00e      	b.n	8006288 <parse_report_descriptor+0x608>
           	  usage_count -= (value-1);
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	b29b      	uxth	r3, r3
 800626e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	b29b      	uxth	r3, r3
 8006274:	3301      	adds	r3, #1
 8006276:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8006278:	e006      	b.n	8006288 <parse_report_descriptor+0x608>
           	  usage_count += value;
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	b29a      	uxth	r2, r3
 800627e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006280:	4413      	add	r3, r2
 8006282:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8006284:	e000      	b.n	8006288 <parse_report_descriptor+0x608>
           	  break;
 8006286:	bf00      	nop
           	}
           	break;
 8006288:	e000      	b.n	800628c <parse_report_descriptor+0x60c>

                 default:
           	// reserved

           	break;
 800628a:	bf00      	nop
  while(rep_size) {
 800628c:	897b      	ldrh	r3, [r7, #10]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f47f ad27 	bne.w	8005ce2 <parse_report_descriptor+0x62>
                 }
               }
             }

             // if we get here then no usable setup was found
             return 0;
 8006294:	2300      	movs	r3, #0
           }
 8006296:	4618      	mov	r0, r3
 8006298:	3738      	adds	r7, #56	; 0x38
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop

080062a0 <USBH_HUB_SetPortFeature>:
		USBH_HUB_ClassRequest, USBH_HUB_Process, USBH_HUB_SOFProcess, 0, 0, 0, {
				0 } };


static USBH_StatusTypeDef USBH_HUB_SetPortFeature(USBH_HandleTypeDef *phost,uint8_t feature, uint8_t port)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af06      	add	r7, sp, #24
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
 80062ac:	4613      	mov	r3, r2
 80062ae:	70bb      	strb	r3, [r7, #2]
	return USBH_HUB_ControlRequest(phost, 0b00100011,HUB_SET_FEATURE,feature, 0U, port, 0U, 0U, 0U );
 80062b0:	78fa      	ldrb	r2, [r7, #3]
 80062b2:	2300      	movs	r3, #0
 80062b4:	9304      	str	r3, [sp, #16]
 80062b6:	2300      	movs	r3, #0
 80062b8:	9303      	str	r3, [sp, #12]
 80062ba:	2300      	movs	r3, #0
 80062bc:	9302      	str	r3, [sp, #8]
 80062be:	78bb      	ldrb	r3, [r7, #2]
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	2300      	movs	r3, #0
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	4613      	mov	r3, r2
 80062c8:	2203      	movs	r2, #3
 80062ca:	2123      	movs	r1, #35	; 0x23
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fc67 	bl	8006ba0 <USBH_HUB_ControlRequest>
 80062d2:	4603      	mov	r3, r0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USBH_HUB_ParseDevDesc>:


static void  USBH_HUB_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781a      	ldrb	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	785a      	ldrb	r2, [r3, #1]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	3302      	adds	r3, #2
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	3303      	adds	r3, #3
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	b29b      	uxth	r3, r3
 800630a:	4313      	orrs	r3, r2
 800630c:	b29a      	uxth	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	791a      	ldrb	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	795a      	ldrb	r2, [r3, #5]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	799a      	ldrb	r2, [r3, #6]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	79da      	ldrb	r2, [r3, #7]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	71da      	strb	r2, [r3, #7]
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <USBH_HUB_GetPortStatus>:
	return USBH_HUB_ControlRequest(phost, 0b10100000, HUB_GET_STATUS,0U, 0U, 0U, 0U, 4U, buff );
}


static USBH_StatusTypeDef USBH_HUB_GetPortStatus(USBH_HandleTypeDef *phost,uint8_t port, uint8_t *buff)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b08a      	sub	sp, #40	; 0x28
 8006342:	af06      	add	r7, sp, #24
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	460b      	mov	r3, r1
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	72fb      	strb	r3, [r7, #11]
	return USBH_HUB_ControlRequest(phost, 0b10100011, HUB_GET_STATUS,0U, 0U, port, 0U, 4U, buff );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	9304      	str	r3, [sp, #16]
 8006350:	2304      	movs	r3, #4
 8006352:	9303      	str	r3, [sp, #12]
 8006354:	2300      	movs	r3, #0
 8006356:	9302      	str	r3, [sp, #8]
 8006358:	7afb      	ldrb	r3, [r7, #11]
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	2300      	movs	r3, #0
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	2300      	movs	r3, #0
 8006362:	2200      	movs	r2, #0
 8006364:	21a3      	movs	r1, #163	; 0xa3
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 fc1a 	bl	8006ba0 <USBH_HUB_ControlRequest>
 800636c:	4603      	mov	r3, r0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBH_HUB_ParseHUBDescriptor>:


static void USBH_HUB_ParseHUBDescriptor(HUB_DescTypeDef *desc, uint8_t *buf) {
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]

	desc->bDescLength = *(uint8_t*) (buf + 0);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	701a      	strb	r2, [r3, #0]
	desc->bDescriptorType = *(uint8_t*) (buf + 1);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	785a      	ldrb	r2, [r3, #1]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	705a      	strb	r2, [r3, #1]
	desc->bNbrPorts = *(uint8_t*) (buf + 2);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	789a      	ldrb	r2, [r3, #2]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	709a      	strb	r2, [r3, #2]
	desc->wHubCharacteristics = LE16(buf + 3);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	3303      	adds	r3, #3
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b29a      	uxth	r2, r3
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	3304      	adds	r3, #4
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	021b      	lsls	r3, r3, #8
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	4313      	orrs	r3, r2
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	809a      	strh	r2, [r3, #4]
	desc->bPwrOn2PwrGood = *(uint8_t*) (buf + 5);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	795a      	ldrb	r2, [r3, #5]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	719a      	strb	r2, [r3, #6]
	desc->bHubContrCurrent = *(uint8_t*) (buf + 6);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	799a      	ldrb	r2, [r3, #6]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	71da      	strb	r2, [r3, #7]
	desc->DeviceRemovable = *(uint8_t*) (buf + 7); //assume that only 4 port hubs are used, so no more than 1 byte will be used
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	3307      	adds	r3, #7
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	6879      	ldr	r1, [r7, #4]
 80063d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	desc->PortPwrCtrlMask = *(uint8_t*) (buf + 8); // this should always be 0xFF
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	3308      	adds	r3, #8
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	611a      	str	r2, [r3, #16]
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <USBH_HUB_ParseStatusChange>:

static void USBH_HUB_ParseStatusChange(Status_ChangeTypeDef *sc, uint8_t buf)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	70fb      	strb	r3, [r7, #3]
	sc->Hub = CHECK_STATUSCHANGE_BIT(buf,0);
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	b2d9      	uxtb	r1, r3
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	7813      	ldrb	r3, [r2, #0]
 8006406:	f361 0300 	bfi	r3, r1, #0, #1
 800640a:	7013      	strb	r3, [r2, #0]
	sc->Port_1 = CHECK_STATUSCHANGE_BIT(buf,1);
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	105b      	asrs	r3, r3, #1
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	b2d9      	uxtb	r1, r3
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	7813      	ldrb	r3, [r2, #0]
 800641a:	f361 0341 	bfi	r3, r1, #1, #1
 800641e:	7013      	strb	r3, [r2, #0]
	sc->Port_2 = CHECK_STATUSCHANGE_BIT(buf,2);
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	109b      	asrs	r3, r3, #2
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	b2d9      	uxtb	r1, r3
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	7813      	ldrb	r3, [r2, #0]
 800642e:	f361 0382 	bfi	r3, r1, #2, #1
 8006432:	7013      	strb	r3, [r2, #0]
	sc->Port_3 = CHECK_STATUSCHANGE_BIT(buf,3);
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	10db      	asrs	r3, r3, #3
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	b2d9      	uxtb	r1, r3
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	7813      	ldrb	r3, [r2, #0]
 8006442:	f361 03c3 	bfi	r3, r1, #3, #1
 8006446:	7013      	strb	r3, [r2, #0]
	sc->Port_4 = CHECK_STATUSCHANGE_BIT(buf,4);
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	111b      	asrs	r3, r3, #4
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	b2d9      	uxtb	r1, r3
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	7813      	ldrb	r3, [r2, #0]
 8006456:	f361 1304 	bfi	r3, r1, #4, #1
 800645a:	7013      	strb	r3, [r2, #0]
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <USBH_HUB_InterfaceInit>:

static USBH_StatusTypeDef USBH_HUB_InterfaceInit(USBH_HandleTypeDef *phost) {
 8006468:	b5b0      	push	{r4, r5, r7, lr}
 800646a:	b08a      	sub	sp, #40	; 0x28
 800646c:	af04      	add	r7, sp, #16
 800646e:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef ctlStatus = USBH_BUSY;
 8006470:	2301      	movs	r3, #1
 8006472:	753b      	strb	r3, [r7, #20]
	USBH_StatusTypeDef status = USBH_BUSY;
 8006474:	2301      	movs	r3, #1
 8006476:	75fb      	strb	r3, [r7, #23]
	HUB_HandleTypeDef *HUB_Handle;
	uint8_t max_ep;
	uint8_t num = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	75bb      	strb	r3, [r7, #22]
	uint8_t i = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	757b      	strb	r3, [r7, #21]

	switch (phost->pActiveClass->iface_init) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006486:	7f9b      	ldrb	r3, [r3, #30]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <USBH_HUB_InterfaceInit+0x2a>
 800648c:	2b02      	cmp	r3, #2
 800648e:	d06a      	beq.n	8006566 <USBH_HUB_InterfaceInit+0xfe>
 8006490:	e113      	b.n	80066ba <USBH_HUB_InterfaceInit+0x252>
	case HUB_IFACE_INIT: {

		Port_1_Handler = (USBH_HandleTypeDef*) USBH_malloc( sizeof(USBH_HandleTypeDef));
 8006492:	f44f 7077 	mov.w	r0, #988	; 0x3dc
 8006496:	f002 f9f7 	bl	8008888 <malloc>
 800649a:	4603      	mov	r3, r0
 800649c:	461a      	mov	r2, r3
 800649e:	4b89      	ldr	r3, [pc, #548]	; (80066c4 <USBH_HUB_InterfaceInit+0x25c>)
 80064a0:	601a      	str	r2, [r3, #0]

		phost->pActiveClass->iface_initnum = 0U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064a8:	2200      	movs	r2, #0
 80064aa:	775a      	strb	r2, [r3, #29]

		//init all possible HUB_Handle even if not all will be used.

		if (USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x00,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064b2:	7919      	ldrb	r1, [r3, #4]
 80064b4:	2300      	movs	r3, #0
 80064b6:	2200      	movs	r2, #0
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fc71 	bl	8006da0 <USBH_FindInterface>
 80064be:	4603      	mov	r3, r0
 80064c0:	2bff      	cmp	r3, #255	; 0xff
 80064c2:	d148      	bne.n	8006556 <USBH_HUB_InterfaceInit+0xee>
				0x00) == 0xFF) {
			status = USBH_FAIL;
 80064c4:	2302      	movs	r3, #2
 80064c6:	75fb      	strb	r3, [r7, #23]
			return status;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	e0f7      	b.n	80066bc <USBH_HUB_InterfaceInit+0x254>
		}

		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
			phost->pActiveClass->pData[i] = (HUB_HandleTypeDef*) USBH_malloc(
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 4380 	ldr.w	r4, [r3, #896]	; 0x380
 80064d2:	7d7d      	ldrb	r5, [r7, #21]
 80064d4:	2040      	movs	r0, #64	; 0x40
 80064d6:	f002 f9d7 	bl	8008888 <malloc>
 80064da:	4603      	mov	r3, r0
 80064dc:	461a      	mov	r2, r3
 80064de:	f105 0308 	add.w	r3, r5, #8
 80064e2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
					sizeof(HUB_HandleTypeDef));
			HUB_Handle = (HUB_HandleTypeDef*) phost->pActiveClass->pData[i];
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064ec:	7d7a      	ldrb	r2, [r7, #21]
 80064ee:	3208      	adds	r2, #8
 80064f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f4:	613b      	str	r3, [r7, #16]
			memset(HUB_Handle, 0, sizeof(HUB_HandleTypeDef));
 80064f6:	2240      	movs	r2, #64	; 0x40
 80064f8:	2100      	movs	r1, #0
 80064fa:	6938      	ldr	r0, [r7, #16]
 80064fc:	f002 f9d4 	bl	80088a8 <memset>

			HUB_Handle->state = HUB_IDLE;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
			HUB_Handle->ctl_state = HUB_REQ_IDLE;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2200      	movs	r2, #0
 800650a:	705a      	strb	r2, [r3, #1]

			HUB_Handle->ep_addr =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bEndpointAddress;
 800650c:	7d7b      	ldrb	r3, [r7, #21]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	211a      	movs	r1, #26
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	4413      	add	r3, r2
 8006518:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800651c:	781a      	ldrb	r2, [r3, #0]
			HUB_Handle->ep_addr =
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	749a      	strb	r2, [r3, #18]
			HUB_Handle->length =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].wMaxPacketSize;
 8006522:	7d7b      	ldrb	r3, [r7, #21]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	211a      	movs	r1, #26
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	4413      	add	r3, r2
 800652e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006532:	881a      	ldrh	r2, [r3, #0]
			HUB_Handle->length =
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	821a      	strh	r2, [r3, #16]
			HUB_Handle->poll =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bInterval;
 8006538:	7d7b      	ldrb	r3, [r7, #21]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	211a      	movs	r1, #26
 800653e:	fb01 f303 	mul.w	r3, r1, r3
 8006542:	4413      	add	r3, r2
 8006544:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	b29a      	uxth	r2, r3
			HUB_Handle->poll =
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	829a      	strh	r2, [r3, #20]
		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 8006550:	7d7b      	ldrb	r3, [r7, #21]
 8006552:	3301      	adds	r3, #1
 8006554:	757b      	strb	r3, [r7, #21]
 8006556:	7d7b      	ldrb	r3, [r7, #21]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d9b7      	bls.n	80064cc <USBH_HUB_InterfaceInit+0x64>

		}
		phost->pActiveClass->iface_init = HUB_IFACE_ENDPNT;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006562:	2202      	movs	r2, #2
 8006564:	779a      	strb	r2, [r3, #30]
	}

	case HUB_IFACE_ENDPNT: {

		HUB_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	f8d2 2380 	ldr.w	r2, [r2, #896]	; 0x380
 8006572:	7f52      	ldrb	r2, [r2, #29]
		HUB_Handle =
 8006574:	3208      	adds	r2, #8
 8006576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657a:	613b      	str	r3, [r7, #16]

		/* Check fo available number of endpoints*/
		/* Find the number of EPs in the Interface Descriptor*/
		/* Choose the lower number in order not to overrun the buffer allocated*/
		max_ep =
				((phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8006582:	4619      	mov	r1, r3
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	231a      	movs	r3, #26
 8006588:	fb03 f301 	mul.w	r3, r3, r1
 800658c:	4413      	add	r3, r2
 800658e:	f203 3346 	addw	r3, r3, #838	; 0x346
 8006592:	781b      	ldrb	r3, [r3, #0]
		max_ep =
 8006594:	2b02      	cmp	r3, #2
 8006596:	bf28      	it	cs
 8006598:	2302      	movcs	r3, #2
 800659a:	73fb      	strb	r3, [r7, #15]
						<= USBH_MAX_NUM_ENDPOINTS) ?
						phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
						USBH_MAX_NUM_ENDPOINTS);

		/* Decode endpoint IN and OUT address from interface descriptor*/
		for (; num < max_ep; num++) {
 800659c:	e086      	b.n	80066ac <USBH_HUB_InterfaceInit+0x244>
			if (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80065a4:	4618      	mov	r0, r3
 80065a6:	7dbb      	ldrb	r3, [r7, #22]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	3301      	adds	r3, #1
 80065ac:	00d9      	lsls	r1, r3, #3
 80065ae:	231a      	movs	r3, #26
 80065b0:	fb03 f300 	mul.w	r3, r3, r0
 80065b4:	440b      	add	r3, r1
 80065b6:	4413      	add	r3, r2
 80065b8:	f203 3346 	addw	r3, r3, #838	; 0x346
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	b25b      	sxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	da38      	bge.n	8006636 <USBH_HUB_InterfaceInit+0x1ce>
					& 0x80U) {
				HUB_Handle->InEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80065ca:	4618      	mov	r0, r3
 80065cc:	7dbb      	ldrb	r3, [r7, #22]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	3301      	adds	r3, #1
 80065d2:	00d9      	lsls	r1, r3, #3
 80065d4:	231a      	movs	r3, #26
 80065d6:	fb03 f300 	mul.w	r3, r3, r0
 80065da:	440b      	add	r3, r1
 80065dc:	4413      	add	r3, r2
 80065de:	f203 3346 	addw	r3, r3, #838	; 0x346
 80065e2:	781a      	ldrb	r2, [r3, #0]
				HUB_Handle->InEp =
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	715a      	strb	r2, [r3, #5]

				HUB_Handle->InPipe = USBH_AllocPipe(phost, HUB_Handle->InEp);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	795b      	ldrb	r3, [r3, #5]
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fde3 	bl	80081ba <USBH_AllocPipe>
 80065f4:	4603      	mov	r3, r0
 80065f6:	461a      	mov	r2, r3
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	70da      	strb	r2, [r3, #3]

				/* Open pipe for IN endpoint*/
				USBH_OpenPipe(phost, HUB_Handle->InPipe, HUB_Handle->InEp,
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	78d9      	ldrb	r1, [r3, #3]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	7958      	ldrb	r0, [r3, #5]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	8a12      	ldrh	r2, [r2, #16]
 8006614:	9202      	str	r2, [sp, #8]
 8006616:	2203      	movs	r2, #3
 8006618:	9201      	str	r2, [sp, #4]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	4623      	mov	r3, r4
 800661e:	4602      	mov	r2, r0
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fd9b 	bl	800815c <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HUB_Handle->length);

				USBH_LL_SetToggle(phost, HUB_Handle->InPipe, 0U);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	78db      	ldrb	r3, [r3, #3]
 800662a:	2200      	movs	r2, #0
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f002 f899 	bl	8008766 <USBH_LL_SetToggle>
 8006634:	e037      	b.n	80066a6 <USBH_HUB_InterfaceInit+0x23e>

			} else {
				HUB_Handle->OutEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800663c:	4618      	mov	r0, r3
 800663e:	7dbb      	ldrb	r3, [r7, #22]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	3301      	adds	r3, #1
 8006644:	00d9      	lsls	r1, r3, #3
 8006646:	231a      	movs	r3, #26
 8006648:	fb03 f300 	mul.w	r3, r3, r0
 800664c:	440b      	add	r3, r1
 800664e:	4413      	add	r3, r2
 8006650:	f203 3346 	addw	r3, r3, #838	; 0x346
 8006654:	781a      	ldrb	r2, [r3, #0]
				HUB_Handle->OutEp =
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	711a      	strb	r2, [r3, #4]
				HUB_Handle->OutPipe =\
 USBH_AllocPipe(phost,
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	791b      	ldrb	r3, [r3, #4]
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fdaa 	bl	80081ba <USBH_AllocPipe>
 8006666:	4603      	mov	r3, r0
 8006668:	461a      	mov	r2, r3
				HUB_Handle->OutPipe =\
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	709a      	strb	r2, [r3, #2]
						HUB_Handle->OutEp);

				/* Open pipe for OUT endpoint*/
				USBH_OpenPipe(phost, HUB_Handle->OutPipe, HUB_Handle->OutEp,
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	7899      	ldrb	r1, [r3, #2]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	7918      	ldrb	r0, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	8a12      	ldrh	r2, [r2, #16]
 8006686:	9202      	str	r2, [sp, #8]
 8006688:	2203      	movs	r2, #3
 800668a:	9201      	str	r2, [sp, #4]
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	4623      	mov	r3, r4
 8006690:	4602      	mov	r2, r0
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fd62 	bl	800815c <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HUB_Handle->length);

				USBH_LL_SetToggle(phost, HUB_Handle->OutPipe, 0U);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	789b      	ldrb	r3, [r3, #2]
 800669c:	2200      	movs	r2, #0
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f002 f860 	bl	8008766 <USBH_LL_SetToggle>
		for (; num < max_ep; num++) {
 80066a6:	7dbb      	ldrb	r3, [r7, #22]
 80066a8:	3301      	adds	r3, #1
 80066aa:	75bb      	strb	r3, [r7, #22]
 80066ac:	7dba      	ldrb	r2, [r7, #22]
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	f4ff af74 	bcc.w	800659e <USBH_HUB_InterfaceInit+0x136>
			}

		}
		status = USBH_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]
	}
	}

	return status;
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bdb0      	pop	{r4, r5, r7, pc}
 80066c4:	20000210 	.word	0x20000210

080066c8 <USBH_HUB_InterfaceDeInit>:

static USBH_StatusTypeDef USBH_HUB_InterfaceDeInit(USBH_HandleTypeDef *phost) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
	HUB_HandleTypeDef *HUB_Handle;

	uint8_t i = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	73fb      	strb	r3, [r7, #15]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 80066d4:	e055      	b.n	8006782 <USBH_HUB_InterfaceDeInit+0xba>

		HUB_Handle = (HUB_HandleTypeDef*) phost->pActiveClass->pData[i];
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066dc:	7bfa      	ldrb	r2, [r7, #15]
 80066de:	3208      	adds	r2, #8
 80066e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e4:	60bb      	str	r3, [r7, #8]

		if (HUB_Handle->InPipe != 0x00U) {
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	78db      	ldrb	r3, [r3, #3]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00e      	beq.n	800670c <USBH_HUB_InterfaceDeInit+0x44>
			USBH_ClosePipe(phost, HUB_Handle->InPipe);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	78db      	ldrb	r3, [r3, #3]
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f001 fd50 	bl	800819a <USBH_ClosePipe>
			USBH_FreePipe(phost, HUB_Handle->InPipe);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	78db      	ldrb	r3, [r3, #3]
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fd7a 	bl	80081fa <USBH_FreePipe>
			HUB_Handle->InPipe = 0U; /* Reset the pipe as Free */
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2200      	movs	r2, #0
 800670a:	70da      	strb	r2, [r3, #3]
		}

		if (HUB_Handle->OutPipe != 0x00U) {
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	789b      	ldrb	r3, [r3, #2]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00e      	beq.n	8006732 <USBH_HUB_InterfaceDeInit+0x6a>
			USBH_ClosePipe(phost, HUB_Handle->OutPipe);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	789b      	ldrb	r3, [r3, #2]
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f001 fd3d 	bl	800819a <USBH_ClosePipe>
			USBH_FreePipe(phost, HUB_Handle->OutPipe);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	789b      	ldrb	r3, [r3, #2]
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 fd67 	bl	80081fa <USBH_FreePipe>
			HUB_Handle->OutPipe = 0U; /* Reset the pipe as Free */
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2200      	movs	r2, #0
 8006730:	709a      	strb	r2, [r3, #2]
		}

		if (phost->pActiveClass->pData[i]) {
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006738:	7bfa      	ldrb	r2, [r7, #15]
 800673a:	3208      	adds	r2, #8
 800673c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01b      	beq.n	800677c <USBH_HUB_InterfaceDeInit+0xb4>
			USBH_free(phost->pActiveClass->pData[i]);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800674a:	7bfa      	ldrb	r2, [r7, #15]
 800674c:	3208      	adds	r2, #8
 800674e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006752:	4618      	mov	r0, r3
 8006754:	f002 f8a0 	bl	8008898 <free>
			free(phost->pActiveClass->pData[i]);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800675e:	7bfa      	ldrb	r2, [r7, #15]
 8006760:	3208      	adds	r2, #8
 8006762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006766:	4618      	mov	r0, r3
 8006768:	f002 f896 	bl	8008898 <free>
			phost->pActiveClass->pData[i] = 0U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006772:	7bfa      	ldrb	r2, [r7, #15]
 8006774:	3208      	adds	r2, #8
 8006776:	2100      	movs	r1, #0
 8006778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	3301      	adds	r3, #1
 8006780:	73fb      	strb	r3, [r7, #15]
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d9a6      	bls.n	80066d6 <USBH_HUB_InterfaceDeInit+0xe>
		}
	}

	return USBH_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <USBH_HUB_ClassRequest>:

static USBH_StatusTypeDef USBH_HUB_ClassRequest(USBH_HandleTypeDef *phost) {
 8006792:	b580      	push	{r7, lr}
 8006794:	b08c      	sub	sp, #48	; 0x30
 8006796:	af06      	add	r7, sp, #24
 8006798:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 800679a:	2301      	movs	r3, #1
 800679c:	75fb      	strb	r3, [r7, #23]
	USBH_StatusTypeDef ctlStatus = USBH_BUSY;
 800679e:	2301      	movs	r3, #1
 80067a0:	757b      	strb	r3, [r7, #21]
	HUB_HandleTypeDef *HUB_Handle;

	HUB_Handle = (HUB_HandleTypeDef*) phost->pActiveClass->pData[0];
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	613b      	str	r3, [r7, #16]
	switch (HUB_Handle->ctl_state) {
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	dc02      	bgt.n	80067ba <USBH_HUB_ClassRequest+0x28>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	da03      	bge.n	80067c0 <USBH_HUB_ClassRequest+0x2e>
 80067b8:	e051      	b.n	800685e <USBH_HUB_ClassRequest+0xcc>
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d024      	beq.n	8006808 <USBH_HUB_ClassRequest+0x76>
 80067be:	e04e      	b.n	800685e <USBH_HUB_ClassRequest+0xcc>
	case HUB_REQ_IDLE:
	case HUB_REQ_GET_DESCRIPTOR: {
		ctlStatus = USBH_GetDescriptor(phost,
		USB_REQ_TYPE_CLASS | USB_REQ_RECIPIENT_DEVICE,
		HUB_DESCRIPTOR_TYPE_REQUEST, 0U, phost->device.Data, 0xFFFF);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
		ctlStatus = USBH_GetDescriptor(phost,
 80067c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067ca:	9201      	str	r2, [sp, #4]
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	2300      	movs	r3, #0
 80067d0:	f44f 5224 	mov.w	r2, #10496	; 0x2900
 80067d4:	2120      	movs	r1, #32
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 f80e 	bl	80077f8 <USBH_GetDescriptor>
 80067dc:	4603      	mov	r3, r0
 80067de:	757b      	strb	r3, [r7, #21]
		if (ctlStatus == USBH_OK || ctlStatus == USBH_NOT_SUPPORTED) {
 80067e0:	7d7b      	ldrb	r3, [r7, #21]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <USBH_HUB_ClassRequest+0x5a>
 80067e6:	7d7b      	ldrb	r3, [r7, #21]
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d137      	bne.n	800685c <USBH_HUB_ClassRequest+0xca>
			USBH_HUB_ParseHUBDescriptor(&HUB_Handle->HUB_Desc,
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f103 0220 	add.w	r2, r3, #32
					phost->device.Data);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
			USBH_HUB_ParseHUBDescriptor(&HUB_Handle->HUB_Desc,
 80067f8:	4619      	mov	r1, r3
 80067fa:	4610      	mov	r0, r2
 80067fc:	f7ff fdbb 	bl	8006376 <USBH_HUB_ParseHUBDescriptor>
			HUB_Handle->ctl_state = HUB_REQ_SET_POWER;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	2202      	movs	r2, #2
 8006804:	705a      	strb	r2, [r3, #1]
		}
	}
	break;
 8006806:	e029      	b.n	800685c <USBH_HUB_ClassRequest+0xca>

	case HUB_REQ_SET_POWER: {
	}

	uint8_t port = HUB_Handle->HUB_Desc.bNbrPorts;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800680e:	73fb      	strb	r3, [r7, #15]
	uint8_t PortIndex = 1;
 8006810:	2301      	movs	r3, #1
 8006812:	75bb      	strb	r3, [r7, #22]
			while(PortIndex<=port)
 8006814:	e017      	b.n	8006846 <USBH_HUB_ClassRequest+0xb4>
			{
					while (1)
					{
						ctlStatus =	USBH_HUB_ControlRequest(phost, 0b00100011,HUB_SET_FEATURE,PORT_POWER, 0U, PortIndex, 0U, 0U, 0U );
 8006816:	2300      	movs	r3, #0
 8006818:	9304      	str	r3, [sp, #16]
 800681a:	2300      	movs	r3, #0
 800681c:	9303      	str	r3, [sp, #12]
 800681e:	2300      	movs	r3, #0
 8006820:	9302      	str	r3, [sp, #8]
 8006822:	7dbb      	ldrb	r3, [r7, #22]
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	2300      	movs	r3, #0
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	2308      	movs	r3, #8
 800682c:	2203      	movs	r2, #3
 800682e:	2123      	movs	r1, #35	; 0x23
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f9b5 	bl	8006ba0 <USBH_HUB_ControlRequest>
 8006836:	4603      	mov	r3, r0
 8006838:	757b      	strb	r3, [r7, #21]
						if (ctlStatus == USBH_OK)
 800683a:	7d7b      	ldrb	r3, [r7, #21]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1ea      	bne.n	8006816 <USBH_HUB_ClassRequest+0x84>
						{
							PortIndex++;
 8006840:	7dbb      	ldrb	r3, [r7, #22]
 8006842:	3301      	adds	r3, #1
 8006844:	75bb      	strb	r3, [r7, #22]
			while(PortIndex<=port)
 8006846:	7dba      	ldrb	r2, [r7, #22]
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	429a      	cmp	r2, r3
 800684c:	d9e3      	bls.n	8006816 <USBH_HUB_ClassRequest+0x84>
					}

			}

			//lazy wait for hub to be ready
			USBH_Delay(500U);
 800684e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006852:	f001 ffb8 	bl	80087c6 <USBH_Delay>
			status = USBH_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	75fb      	strb	r3, [r7, #23]
 800685a:	e000      	b.n	800685e <USBH_HUB_ClassRequest+0xcc>
	break;
 800685c:	bf00      	nop


	}

	return status;
 800685e:	7dfb      	ldrb	r3, [r7, #23]

}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <USBH_HUB_Process>:

static USBH_StatusTypeDef USBH_HUB_Process(USBH_HandleTypeDef *phost) {
 8006868:	b590      	push	{r4, r7, lr}
 800686a:	b08f      	sub	sp, #60	; 0x3c
 800686c:	af02      	add	r7, sp, #8
 800686e:	6078      	str	r0, [r7, #4]
	static Status_ChangeTypeDef CurrentStatusChange;
	USBH_StatusTypeDef status = USBH_BUSY;
 8006870:	2301      	movs	r3, #1
 8006872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HUB_HandleTypeDef *HUB_Handle;
	HUB_Handle = (HUB_HandleTypeDef*) phost->pActiveClass->pData[0];
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	62bb      	str	r3, [r7, #40]	; 0x28





	switch (HUB_Handle->state) {
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b07      	cmp	r3, #7
 8006886:	f200 8140 	bhi.w	8006b0a <USBH_HUB_Process+0x2a2>
 800688a:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <USBH_HUB_Process+0x28>)
 800688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006890:	080068b1 	.word	0x080068b1
 8006894:	080068c5 	.word	0x080068c5
 8006898:	08006b0b 	.word	0x08006b0b
 800689c:	080068dd 	.word	0x080068dd
 80068a0:	08006909 	.word	0x08006909
 80068a4:	08006b0b 	.word	0x08006b0b
 80068a8:	08006b0b 	.word	0x08006b0b
 80068ac:	08006989 	.word	0x08006989
	case HUB_IDLE:
		HUB_Handle->state = HUB_SYNC;
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	2201      	movs	r2, #1
 80068b4:	701a      	strb	r2, [r3, #0]
		phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80068bc:	2102      	movs	r1, #2
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
		break;
 80068c2:	e127      	b.n	8006b14 <USBH_HUB_Process+0x2ac>

	case HUB_SYNC:
		/* Sync with start of Even Frame */
		if (phost->Timer & 1U) {
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 811d 	beq.w	8006b0e <USBH_HUB_Process+0x2a6>
			HUB_Handle->state = HUB_GET_DATA;
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	2203      	movs	r2, #3
 80068d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80068da:	e118      	b.n	8006b0e <USBH_HUB_Process+0x2a6>

	case HUB_GET_DATA:
		USBH_InterruptReceiveData(phost, HUB_Handle->pData,
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	1d99      	adds	r1, r3, #6
				(uint8_t) HUB_Handle->length, HUB_Handle->InPipe);
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	8a1b      	ldrh	r3, [r3, #16]
		USBH_InterruptReceiveData(phost, HUB_Handle->pData,
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e8:	78db      	ldrb	r3, [r3, #3]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fc17 	bl	800811e <USBH_InterruptReceiveData>

		HUB_Handle->state = HUB_POLL;
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	2204      	movs	r2, #4
 80068f4:	701a      	strb	r2, [r3, #0]
		HUB_Handle->timer = phost->Timer;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	619a      	str	r2, [r3, #24]
		HUB_Handle->DataReady = 0U;
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	2200      	movs	r2, #0
 8006904:	771a      	strb	r2, [r3, #28]
		break;
 8006906:	e105      	b.n	8006b14 <USBH_HUB_Process+0x2ac>

	case HUB_POLL:
		URBState = USBH_LL_GetURBState(phost, HUB_Handle->InPipe);
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	78db      	ldrb	r3, [r3, #3]
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 ff08 	bl	8008724 <USBH_LL_GetURBState>
 8006914:	4603      	mov	r3, r0
 8006916:	77fb      	strb	r3, [r7, #31]

		if ( URBState == USBH_URB_DONE) {
 8006918:	7ffb      	ldrb	r3, [r7, #31]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d11c      	bne.n	8006958 <USBH_HUB_Process+0xf0>


			XferSize = USBH_LL_GetLastXferSize(phost, HUB_Handle->InPipe);
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	78db      	ldrb	r3, [r3, #3]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 fe6b 	bl	8008600 <USBH_LL_GetLastXferSize>
 800692a:	61b8      	str	r0, [r7, #24]

			if (HUB_Handle->DataReady == 0U && XferSize != 0U) {
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	7f1b      	ldrb	r3, [r3, #28]
 8006930:	2b00      	cmp	r3, #0
 8006932:	f040 80ee 	bne.w	8006b12 <USBH_HUB_Process+0x2aa>
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80ea 	beq.w	8006b12 <USBH_HUB_Process+0x2aa>
					USBH_HUB_ParseStatusChange(&CurrentStatusChange, HUB_Handle->pData[0]);
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	799b      	ldrb	r3, [r3, #6]
 8006942:	4619      	mov	r1, r3
 8006944:	4876      	ldr	r0, [pc, #472]	; (8006b20 <USBH_HUB_Process+0x2b8>)
 8006946:	f7ff fd52 	bl	80063ee <USBH_HUB_ParseStatusChange>
					HUB_Handle->DataReady = 1U;
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	2201      	movs	r2, #1
 800694e:	771a      	strb	r2, [r3, #28]
					HUB_Handle->state = HUB_PORT_CHANGED;
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	2207      	movs	r2, #7
 8006954:	701a      	strb	r2, [r3, #0]
					HUB_Handle->state = HUB_GET_DATA;

				}
			}
		}
		break;
 8006956:	e0dc      	b.n	8006b12 <USBH_HUB_Process+0x2aa>
			if (USBH_LL_GetURBState(phost, HUB_Handle->InPipe)
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	78db      	ldrb	r3, [r3, #3]
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 fee0 	bl	8008724 <USBH_LL_GetURBState>
 8006964:	4603      	mov	r3, r0
 8006966:	2b05      	cmp	r3, #5
 8006968:	f040 80d3 	bne.w	8006b12 <USBH_HUB_Process+0x2aa>
				if (USBH_ClrFeature(phost, HUB_Handle->ep_addr) == USBH_OK) {
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	7c9b      	ldrb	r3, [r3, #18]
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 ffe5 	bl	8007942 <USBH_ClrFeature>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	f040 80c9 	bne.w	8006b12 <USBH_HUB_Process+0x2aa>
					HUB_Handle->state = HUB_GET_DATA;
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	2203      	movs	r2, #3
 8006984:	701a      	strb	r2, [r3, #0]
		break;
 8006986:	e0c4      	b.n	8006b12 <USBH_HUB_Process+0x2aa>

	case HUB_PORT_CHANGED:

		if(CurrentStatusChange.Port_1 == 1)
 8006988:	4b65      	ldr	r3, [pc, #404]	; (8006b20 <USBH_HUB_Process+0x2b8>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8094 	beq.w	8006ac0 <USBH_HUB_Process+0x258>
		{

			 USBH_HUB_ResetPort(phost,1U);
 8006998:	2101      	movs	r1, #1
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f8e5 	bl	8006b6a <USBH_HUB_ResetPort>
			 HAL_Delay(200);
 80069a0:	20c8      	movs	r0, #200	; 0xc8
 80069a2:	f7fa fa3f 	bl	8000e24 <HAL_Delay>
			 USBH_StatusTypeDef PortStatusStatus;
			 USBH_StatusTypeDef EnumStatus;
			 uint8_t buff[4] = {0};
 80069a6:	2300      	movs	r3, #0
 80069a8:	617b      	str	r3, [r7, #20]
			 uint8_t buffPort1[8] = {0};
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	2300      	movs	r3, #0
 80069b0:	613b      	str	r3, [r7, #16]
			 while(1)
			 {
				 PortStatusStatus = USBH_HUB_GetPortStatus(phost, 1U, buff);
 80069b2:	f107 0314 	add.w	r3, r7, #20
 80069b6:	461a      	mov	r2, r3
 80069b8:	2101      	movs	r1, #1
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff fcbf 	bl	800633e <USBH_HUB_GetPortStatus>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				 if ( PortStatusStatus == USBH_OK )
 80069c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1f1      	bne.n	80069b2 <USBH_HUB_Process+0x14a>
				 {
					 //Check if Port is enabled
					 if ( CHECK_BIT(buff[0],1) ) break;
 80069ce:	7d3b      	ldrb	r3, [r7, #20]
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d100      	bne.n	80069da <USBH_HUB_Process+0x172>
				 PortStatusStatus = USBH_HUB_GetPortStatus(phost, 1U, buff);
 80069d8:	e7eb      	b.n	80069b2 <USBH_HUB_Process+0x14a>
					 if ( CHECK_BIT(buff[0],1) ) break;
 80069da:	bf00      	nop
				 }
			 }



			 Port_1_Handler->id 					= 1;
 80069dc:	4b51      	ldr	r3, [pc, #324]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
			 Port_1_Handler->pActiveClass 		= NULL;
 80069e6:	4b4f      	ldr	r3, [pc, #316]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			 Port_1_Handler->ClassNumber 		= 0;
 80069f0:	4b4c      	ldr	r3, [pc, #304]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384

			 Port_1_Handler->pUser 				= phost->pUser;
 80069fa:	4b4a      	ldr	r3, [pc, #296]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8006a04:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
			 Port_1_Handler->EnumState 			= ENUM_IDLE;
 8006a08:	4b46      	ldr	r3, [pc, #280]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	705a      	strb	r2, [r3, #1]
			 Port_1_Handler->RequestState 		= CMD_SEND;
 8006a10:	4b44      	ldr	r3, [pc, #272]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2201      	movs	r2, #1
 8006a16:	709a      	strb	r2, [r3, #2]
			 Port_1_Handler->Timer 				= 0;
 8006a18:	4b42      	ldr	r3, [pc, #264]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
			 Port_1_Handler->Control.errorcount 	= 0;
 8006a22:	4b40      	ldr	r3, [pc, #256]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2200      	movs	r2, #0
 8006a28:	765a      	strb	r2, [r3, #25]
			 Port_1_Handler->Control.state 		= CTRL_SETUP;
 8006a2a:	4b3e      	ldr	r3, [pc, #248]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	761a      	strb	r2, [r3, #24]
			 Port_1_Handler->Control.pipe_size 	= 64;
 8006a32:	4b3c      	ldr	r3, [pc, #240]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2240      	movs	r2, #64	; 0x40
 8006a38:	719a      	strb	r2, [r3, #6]
			 Port_1_Handler->device.address 		= 0U;
 8006a3a:	4b3a      	ldr	r3, [pc, #232]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
			 Port_1_Handler->device.speed   		= USBH_SPEED_FULL;
 8006a44:	4b37      	ldr	r3, [pc, #220]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
			 Port_1_Handler->device.is_connected = 1;
 8006a4e:	4b35      	ldr	r3, [pc, #212]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

			 Port_1_Handler->Control.pipe_out = USBH_AllocPipe(Port_1_Handler, 0x00U);
 8006a58:	4b32      	ldr	r3, [pc, #200]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a31      	ldr	r2, [pc, #196]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a5e:	6814      	ldr	r4, [r2, #0]
 8006a60:	2100      	movs	r1, #0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f001 fba9 	bl	80081ba <USBH_AllocPipe>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	7163      	strb	r3, [r4, #5]
			 Port_1_Handler->Control.pipe_in  = USBH_AllocPipe(Port_1_Handler, 0x80U);
 8006a6c:	4b2d      	ldr	r3, [pc, #180]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a2c      	ldr	r2, [pc, #176]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a72:	6814      	ldr	r4, [r2, #0]
 8006a74:	2180      	movs	r1, #128	; 0x80
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 fb9f 	bl	80081ba <USBH_AllocPipe>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	7123      	strb	r3, [r4, #4]


			 while(1)
			 {

				 EnumStatus = USBH_GetDescriptor(Port_1_Handler, USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
 8006a80:	4b28      	ldr	r3, [pc, #160]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	2308      	movs	r3, #8
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	f107 030c 	add.w	r3, r7, #12
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a94:	2100      	movs	r1, #0
 8006a96:	f000 feaf 	bl	80077f8 <USBH_GetDescriptor>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				                                    USB_DESC_DEVICE, 0U, buffPort1,8U);

					if ( EnumStatus== USBH_OK)
 8006aa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1eb      	bne.n	8006a80 <USBH_HUB_Process+0x218>
					{

						USBH_HUB_ParseDevDesc(&Port_1_Handler,buffPort1);
 8006aa8:	f107 030c 	add.w	r3, r7, #12
 8006aac:	4619      	mov	r1, r3
 8006aae:	481d      	ldr	r0, [pc, #116]	; (8006b24 <USBH_HUB_Process+0x2bc>)
 8006ab0:	f7ff fc14 	bl	80062dc <USBH_HUB_ParseDevDesc>
					  int and = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	623b      	str	r3, [r7, #32]
					  and++;
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	3301      	adds	r3, #1
 8006abc:	623b      	str	r3, [r7, #32]
				 EnumStatus = USBH_GetDescriptor(Port_1_Handler, USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
 8006abe:	e7df      	b.n	8006a80 <USBH_HUB_Process+0x218>



		}

		if(CurrentStatusChange.Port_2 == 1)
 8006ac0:	4b17      	ldr	r3, [pc, #92]	; (8006b20 <USBH_HUB_Process+0x2b8>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <USBH_HUB_Process+0x26e>
		{
			 USBH_HUB_ResetPort(phost,2U);
 8006ace:	2102      	movs	r1, #2
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f84a 	bl	8006b6a <USBH_HUB_ResetPort>
		}

		if(CurrentStatusChange.Port_3 == 1)
 8006ad6:	4b12      	ldr	r3, [pc, #72]	; (8006b20 <USBH_HUB_Process+0x2b8>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <USBH_HUB_Process+0x284>
		{
			 USBH_HUB_ResetPort(phost,3U);
 8006ae4:	2103      	movs	r1, #3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f83f 	bl	8006b6a <USBH_HUB_ResetPort>
		}

		if(CurrentStatusChange.Port_4 == 1)
 8006aec:	4b0c      	ldr	r3, [pc, #48]	; (8006b20 <USBH_HUB_Process+0x2b8>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <USBH_HUB_Process+0x29a>
		{
			 USBH_HUB_ResetPort(phost,4U);
 8006afa:	2104      	movs	r1, #4
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f834 	bl	8006b6a <USBH_HUB_ResetPort>
		}




		HUB_Handle->state = HUB_GET_DATA;
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	2203      	movs	r2, #3
 8006b06:	701a      	strb	r2, [r3, #0]
	break;
 8006b08:	e004      	b.n	8006b14 <USBH_HUB_Process+0x2ac>

	default:
		break;
 8006b0a:	bf00      	nop
 8006b0c:	e002      	b.n	8006b14 <USBH_HUB_Process+0x2ac>
		break;
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <USBH_HUB_Process+0x2ac>
		break;
 8006b12:	bf00      	nop
	}


	return status;
 8006b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3734      	adds	r7, #52	; 0x34
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd90      	pop	{r4, r7, pc}
 8006b20:	200000f0 	.word	0x200000f0
 8006b24:	20000210 	.word	0x20000210

08006b28 <USBH_HUB_SOFProcess>:

static USBH_StatusTypeDef USBH_HUB_SOFProcess(USBH_HandleTypeDef *phost) {
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	HUB_HandleTypeDef *HUB_Handle =
			(HUB_HandleTypeDef*) phost->pActiveClass->pData[0];
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
	HUB_HandleTypeDef *HUB_Handle =
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	60fb      	str	r3, [r7, #12]


	if (HUB_Handle->state == HUB_POLL) {
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d10c      	bne.n	8006b5c <USBH_HUB_SOFProcess+0x34>
		if ((phost->Timer - HUB_Handle->timer) >= HUB_Handle->poll) {
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	8a92      	ldrh	r2, [r2, #20]
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d302      	bcc.n	8006b5c <USBH_HUB_SOFProcess+0x34>
			HUB_Handle->state = HUB_GET_DATA;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2203      	movs	r2, #3
 8006b5a:	701a      	strb	r2, [r3, #0]
			//USBH_HID_NextInterface(phost);
		}
	}
	return USBH_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <USBH_HUB_ResetPort>:

/// CONTROL REQUESTS
static USBH_StatusTypeDef USBH_HUB_ResetPort(USBH_HandleTypeDef *phost, uint8_t port) {
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	70fb      	strb	r3, [r7, #3]
	USBH_StatusTypeDef ctlStatus = USBH_BUSY;
 8006b76:	2301      	movs	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
	while(1){
	ctlStatus = USBH_HUB_SetPortFeature(phost,PORT_RESET, 1U);
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	2104      	movs	r1, #4
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff fb8e 	bl	80062a0 <USBH_HUB_SetPortFeature>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
		if (ctlStatus==USBH_OK)
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f5      	bne.n	8006b7a <USBH_HUB_ResetPort+0x10>
			{
				HAL_Delay(150);
 8006b8e:	2096      	movs	r0, #150	; 0x96
 8006b90:	f7fa f948 	bl	8000e24 <HAL_Delay>
				break;
 8006b94:	bf00      	nop
			}
	}

	return USBH_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBH_HUB_ControlRequest>:




static USBH_StatusTypeDef USBH_HUB_ControlRequest(USBH_HandleTypeDef *phost, uint8_t bmRequestType, uint8_t bRequest, uint8_t wValue_MSB,uint8_t wValue_LSB, uint8_t wIndex_MSB, uint8_t wIndex_LSB, uint16_t wLength, uint8_t *buffer)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	4608      	mov	r0, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	461a      	mov	r2, r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	70fb      	strb	r3, [r7, #3]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	70bb      	strb	r3, [r7, #2]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	707b      	strb	r3, [r7, #1]

	phost->Control.setup.b.bmRequestType = bmRequestType;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	78fa      	ldrb	r2, [r7, #3]
 8006bbe:	741a      	strb	r2, [r3, #16]
	phost->Control.setup.b.bRequest  	 = bRequest;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	78ba      	ldrb	r2, [r7, #2]
 8006bc4:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.bw.msb = wValue_MSB;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	787a      	ldrb	r2, [r7, #1]
 8006bca:	749a      	strb	r2, [r3, #18]
	phost->Control.setup.b.wValue.bw.lsb = wValue_LSB;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	7c3a      	ldrb	r2, [r7, #16]
 8006bd0:	74da      	strb	r2, [r3, #19]
	phost->Control.setup.b.wIndex.bw.msb = wIndex_MSB;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	7d3a      	ldrb	r2, [r7, #20]
 8006bd6:	751a      	strb	r2, [r3, #20]
	phost->Control.setup.b.wIndex.bw.lsb = wIndex_LSB;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	7e3a      	ldrb	r2, [r7, #24]
 8006bdc:	755a      	strb	r2, [r3, #21]
	phost->Control.setup.b.wLength.w     = wLength;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	8bba      	ldrh	r2, [r7, #28]
 8006be2:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, buffer, wLength);
 8006be4:	8bbb      	ldrh	r3, [r7, #28]
 8006be6:	461a      	mov	r2, r3
 8006be8:	6a39      	ldr	r1, [r7, #32]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 f889 	bl	8007d02 <USBH_CtlReq>
 8006bf0:	4603      	mov	r3, r0

//	USBH_StatusTypeDef res = USBH_FAIL;
//	do { res = USBH_CtlReq(phost, buffer, size); } while(res != USBH_OK && res != USBH_FAIL);
//	return res;
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	4613      	mov	r3, r2
 8006c06:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e029      	b.n	8006c66 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	79fa      	ldrb	r2, [r7, #7]
 8006c16:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
  phost->ClassNumber = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f81f 	bl	8006c6e <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f001 fc1a 	bl	8008498 <USBH_LL_Init>

  return USBH_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	e008      	b.n	8006c92 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	32e2      	adds	r2, #226	; 0xe2
 8006c86:	2100      	movs	r1, #0
 8006c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b0e      	cmp	r3, #14
 8006c96:	d9f3      	bls.n	8006c80 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	e009      	b.n	8006cb2 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb8:	d3f1      	bcc.n	8006c9e <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  phost->Control.state = CTRL_SETUP;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2240      	movs	r2, #64	; 0x40
 8006cde:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d016      	beq.n	8006d56 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d80e      	bhi.n	8006d50 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8006d38:	1c59      	adds	r1, r3, #1
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	f8c2 1384 	str.w	r1, [r2, #900]	; 0x384
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	33de      	adds	r3, #222	; 0xde
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]
 8006d4e:	e004      	b.n	8006d5a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006d50:	2302      	movs	r3, #2
 8006d52:	73fb      	strb	r3, [r7, #15]
 8006d54:	e001      	b.n	8006d5a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006d56:	2302      	movs	r3, #2
 8006d58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006d7e:	78fa      	ldrb	r2, [r7, #3]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d204      	bcs.n	8006d8e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	78fa      	ldrb	r2, [r7, #3]
 8006d88:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006d8c:	e001      	b.n	8006d92 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	4608      	mov	r0, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	461a      	mov	r2, r3
 8006dae:	4603      	mov	r3, r0
 8006db0:	70fb      	strb	r3, [r7, #3]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70bb      	strb	r3, [r7, #2]
 8006db6:	4613      	mov	r3, r2
 8006db8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006dc8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006dca:	e025      	b.n	8006e18 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	221a      	movs	r2, #26
 8006dd0:	fb02 f303 	mul.w	r3, r2, r3
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	3302      	adds	r3, #2
 8006ddc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	795b      	ldrb	r3, [r3, #5]
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d002      	beq.n	8006dee <USBH_FindInterface+0x4e>
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	2bff      	cmp	r3, #255	; 0xff
 8006dec:	d111      	bne.n	8006e12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006df2:	78ba      	ldrb	r2, [r7, #2]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d002      	beq.n	8006dfe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006df8:	78bb      	ldrb	r3, [r7, #2]
 8006dfa:	2bff      	cmp	r3, #255	; 0xff
 8006dfc:	d109      	bne.n	8006e12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e02:	787a      	ldrb	r2, [r7, #1]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d002      	beq.n	8006e0e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e08:	787b      	ldrb	r3, [r7, #1]
 8006e0a:	2bff      	cmp	r3, #255	; 0xff
 8006e0c:	d101      	bne.n	8006e12 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	e006      	b.n	8006e20 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	3301      	adds	r3, #1
 8006e16:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d9d6      	bls.n	8006dcc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e1e:	23ff      	movs	r3, #255	; 0xff
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 fb6b 	bl	8008510 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fc84 	bl	800874a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af04      	add	r7, sp, #16
 8006e52:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006e54:	2302      	movs	r3, #2
 8006e56:	737b      	strb	r3, [r7, #13]
  uint8_t idx = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d102      	bne.n	8006e6e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b0b      	cmp	r3, #11
 8006e76:	f200 81b8 	bhi.w	80071ea <USBH_Process+0x39e>
 8006e7a:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <USBH_Process+0x34>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006eb1 	.word	0x08006eb1
 8006e84:	08006ee3 	.word	0x08006ee3
 8006e88:	08006f4b 	.word	0x08006f4b
 8006e8c:	08007185 	.word	0x08007185
 8006e90:	080071eb 	.word	0x080071eb
 8006e94:	08006fef 	.word	0x08006fef
 8006e98:	0800712b 	.word	0x0800712b
 8006e9c:	08007025 	.word	0x08007025
 8006ea0:	08007045 	.word	0x08007045
 8006ea4:	08007065 	.word	0x08007065
 8006ea8:	08007093 	.word	0x08007093
 8006eac:	0800716d 	.word	0x0800716d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 8198 	beq.w	80071ee <USBH_Process+0x3a2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006ec4:	20c8      	movs	r0, #200	; 0xc8
 8006ec6:	f001 fc7e 	bl	80087c6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 fb7d 	bl	80085ca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006ee0:	e185      	b.n	80071ee <USBH_Process+0x3a2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d107      	bne.n	8006efc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006efa:	e187      	b.n	800720c <USBH_Process+0x3c0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f06:	d914      	bls.n	8006f32 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f0e:	3301      	adds	r3, #1
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d903      	bls.n	8006f2a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	220d      	movs	r2, #13
 8006f26:	701a      	strb	r2, [r3, #0]
      break;
 8006f28:	e170      	b.n	800720c <USBH_Process+0x3c0>
            phost->gState = HOST_IDLE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]
      break;
 8006f30:	e16c      	b.n	800720c <USBH_Process+0x3c0>
          phost->Timeout += 10U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006f38:	f103 020a 	add.w	r2, r3, #10
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
          USBH_Delay(10U);
 8006f42:	200a      	movs	r0, #10
 8006f44:	f001 fc3f 	bl	80087c6 <USBH_Delay>
      break;
 8006f48:	e160      	b.n	800720c <USBH_Process+0x3c0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006f5a:	2104      	movs	r1, #4
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006f60:	2064      	movs	r0, #100	; 0x64
 8006f62:	f001 fc30 	bl	80087c6 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 fb08 	bl	800857c <USBH_LL_GetSpeed>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	461a      	mov	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2205      	movs	r2, #5
 8006f7a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 f91b 	bl	80081ba <USBH_AllocPipe>
 8006f84:	4603      	mov	r3, r0
 8006f86:	461a      	mov	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006f8c:	2180      	movs	r1, #128	; 0x80
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 f913 	bl	80081ba <USBH_AllocPipe>
 8006f94:	4603      	mov	r3, r0
 8006f96:	461a      	mov	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	7919      	ldrb	r1, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006fb0:	b292      	uxth	r2, r2
 8006fb2:	9202      	str	r2, [sp, #8]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	9201      	str	r2, [sp, #4]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2280      	movs	r2, #128	; 0x80
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 f8cc 	bl	800815c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	7959      	ldrb	r1, [r3, #5]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006fd8:	b292      	uxth	r2, r2
 8006fda:	9202      	str	r2, [sp, #8]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	9201      	str	r2, [sp, #4]
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 f8b8 	bl	800815c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006fec:	e10e      	b.n	800720c <USBH_Process+0x3c0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f912 	bl	8007218 <USBH_HandleEnum>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	737b      	strb	r3, [r7, #13]
      if (status == USBH_OK)
 8006ff8:	7b7b      	ldrb	r3, [r7, #13]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f040 80f8 	bne.w	80071f2 <USBH_Process+0x3a6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007010:	2b01      	cmp	r3, #1
 8007012:	d103      	bne.n	800701c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2208      	movs	r2, #8
 8007018:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800701a:	e0ea      	b.n	80071f2 <USBH_Process+0x3a6>
          phost->gState = HOST_INPUT;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2207      	movs	r2, #7
 8007020:	701a      	strb	r2, [r3, #0]
      break;
 8007022:	e0e6      	b.n	80071f2 <USBH_Process+0x3a6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 80e3 	beq.w	80071f6 <USBH_Process+0x3aa>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007036:	2101      	movs	r1, #1
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2208      	movs	r2, #8
 8007040:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007042:	e0d8      	b.n	80071f6 <USBH_Process+0x3aa>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800704a:	b29b      	uxth	r3, r3
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fc30 	bl	80078b4 <USBH_SetCfg>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	f040 80cf 	bne.w	80071fa <USBH_Process+0x3ae>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2209      	movs	r2, #9
 8007060:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007062:	e0ca      	b.n	80071fa <USBH_Process+0x3ae>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00b      	beq.n	800708a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007072:	2101      	movs	r1, #1
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fc40 	bl	80078fa <USBH_SetFeature>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	f040 80be 	bne.w	80071fe <USBH_Process+0x3b2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	220a      	movs	r2, #10
 8007086:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007088:	e0b9      	b.n	80071fe <USBH_Process+0x3b2>
        phost->gState = HOST_CHECK_CLASS;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	220a      	movs	r2, #10
 800708e:	701a      	strb	r2, [r3, #0]
      break;
 8007090:	e0b5      	b.n	80071fe <USBH_Process+0x3b2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 80b2 	beq.w	8007202 <USBH_Process+0x3b6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80070a6:	2300      	movs	r3, #0
 80070a8:	73fb      	strb	r3, [r7, #15]
 80070aa:	e016      	b.n	80070da <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80070ac:	7bfa      	ldrb	r2, [r7, #15]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	32de      	adds	r2, #222	; 0xde
 80070b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b6:	791a      	ldrb	r2, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80070be:	429a      	cmp	r2, r3
 80070c0:	d108      	bne.n	80070d4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80070c2:	7bfa      	ldrb	r2, [r7, #15]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	32de      	adds	r2, #222	; 0xde
 80070c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
            break;
 80070d2:	e005      	b.n	80070e0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
 80070d6:	3301      	adds	r3, #1
 80070d8:	73fb      	strb	r3, [r7, #15]
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d9e5      	bls.n	80070ac <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01b      	beq.n	8007122 <USBH_Process+0x2d6>
        {
         USBH_StatusTypeDef init_status = phost->pActiveClass->Init(phost);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	73bb      	strb	r3, [r7, #14]
          if (init_status == USBH_OK)
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d109      	bne.n	8007114 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2206      	movs	r2, #6
 8007104:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800710c:	2103      	movs	r1, #3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007112:	e076      	b.n	8007202 <USBH_Process+0x3b6>
          else if (init_status!= USBH_BUSY)
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d073      	beq.n	8007202 <USBH_Process+0x3b6>
            phost->gState = HOST_ABORT_STATE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	220d      	movs	r2, #13
 800711e:	701a      	strb	r2, [r3, #0]
      break;
 8007120:	e06f      	b.n	8007202 <USBH_Process+0x3b6>
          phost->gState = HOST_ABORT_STATE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	220d      	movs	r2, #13
 8007126:	701a      	strb	r2, [r3, #0]
      break;
 8007128:	e06b      	b.n	8007202 <USBH_Process+0x3b6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007130:	2b00      	cmp	r3, #0
 8007132:	d017      	beq.n	8007164 <USBH_Process+0x318>
      {
        status = phost->pActiveClass->Requests(phost);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
 8007140:	4603      	mov	r3, r0
 8007142:	737b      	strb	r3, [r7, #13]

        if (status == USBH_OK)
 8007144:	7b7b      	ldrb	r3, [r7, #13]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d103      	bne.n	8007154 <USBH_Process+0x308>
        {
          phost->gState = HOST_CLASS;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	220b      	movs	r2, #11
 8007150:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007152:	e058      	b.n	8007206 <USBH_Process+0x3ba>
        else if (status == USBH_FAIL)
 8007154:	7b7b      	ldrb	r3, [r7, #13]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d154      	bne.n	8007206 <USBH_Process+0x3ba>
          phost->gState = HOST_ABORT_STATE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	220d      	movs	r2, #13
 8007160:	701a      	strb	r2, [r3, #0]
      break;
 8007162:	e050      	b.n	8007206 <USBH_Process+0x3ba>
        phost->gState = HOST_ABORT_STATE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	220d      	movs	r2, #13
 8007168:	701a      	strb	r2, [r3, #0]
      break;
 800716a:	e04c      	b.n	8007206 <USBH_Process+0x3ba>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007172:	2b00      	cmp	r3, #0
 8007174:	d049      	beq.n	800720a <USBH_Process+0x3be>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
      }
      break;
 8007182:	e042      	b.n	800720a <USBH_Process+0x3be>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff fd6e 	bl	8006c6e <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007198:	2b00      	cmp	r3, #0
 800719a:	d009      	beq.n	80071b0 <USBH_Process+0x364>
      {
        phost->pActiveClass->DeInit(phost);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
      }

      if (phost->pUser != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <USBH_Process+0x37a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80071c0:	2105      	movs	r1, #5
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d107      	bne.n	80071e2 <USBH_Process+0x396>
      {
        phost->device.is_ReEnumerated = 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7ff fe26 	bl	8006e2c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071e0:	e014      	b.n	800720c <USBH_Process+0x3c0>
        USBH_LL_Start(phost);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 f994 	bl	8008510 <USBH_LL_Start>
      break;
 80071e8:	e010      	b.n	800720c <USBH_Process+0x3c0>

    case HOST_ABORT_STATE:
    default :
      break;
 80071ea:	bf00      	nop
 80071ec:	e00e      	b.n	800720c <USBH_Process+0x3c0>
      break;
 80071ee:	bf00      	nop
 80071f0:	e00c      	b.n	800720c <USBH_Process+0x3c0>
      break;
 80071f2:	bf00      	nop
 80071f4:	e00a      	b.n	800720c <USBH_Process+0x3c0>
    break;
 80071f6:	bf00      	nop
 80071f8:	e008      	b.n	800720c <USBH_Process+0x3c0>
      break;
 80071fa:	bf00      	nop
 80071fc:	e006      	b.n	800720c <USBH_Process+0x3c0>
      break;
 80071fe:	bf00      	nop
 8007200:	e004      	b.n	800720c <USBH_Process+0x3c0>
      break;
 8007202:	bf00      	nop
 8007204:	e002      	b.n	800720c <USBH_Process+0x3c0>
      break;
 8007206:	bf00      	nop
 8007208:	e000      	b.n	800720c <USBH_Process+0x3c0>
      break;
 800720a:	bf00      	nop
  }
  return USBH_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop

08007218 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af04      	add	r7, sp, #16
 800721e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007220:	2301      	movs	r3, #1
 8007222:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007224:	2301      	movs	r3, #1
 8007226:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	2b07      	cmp	r3, #7
 800722e:	f200 81c1 	bhi.w	80075b4 <USBH_HandleEnum+0x39c>
 8007232:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <USBH_HandleEnum+0x20>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	08007259 	.word	0x08007259
 800723c:	08007317 	.word	0x08007317
 8007240:	08007381 	.word	0x08007381
 8007244:	0800740f 	.word	0x0800740f
 8007248:	08007479 	.word	0x08007479
 800724c:	080074e9 	.word	0x080074e9
 8007250:	0800752f 	.word	0x0800752f
 8007254:	08007575 	.word	0x08007575
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007258:	2108      	movs	r1, #8
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa50 	bl	8007700 <USBH_Get_DevDesc>
 8007260:	4603      	mov	r3, r0
 8007262:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d130      	bne.n	80072cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	7919      	ldrb	r1, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800728e:	b292      	uxth	r2, r2
 8007290:	9202      	str	r2, [sp, #8]
 8007292:	2200      	movs	r2, #0
 8007294:	9201      	str	r2, [sp, #4]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	4603      	mov	r3, r0
 800729a:	2280      	movs	r2, #128	; 0x80
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 ff5d 	bl	800815c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	7959      	ldrb	r1, [r3, #5]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072b6:	b292      	uxth	r2, r2
 80072b8:	9202      	str	r2, [sp, #8]
 80072ba:	2200      	movs	r2, #0
 80072bc:	9201      	str	r2, [sp, #4]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4603      	mov	r3, r0
 80072c2:	2200      	movs	r2, #0
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 ff49 	bl	800815c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80072ca:	e175      	b.n	80075b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	f040 8172 	bne.w	80075b8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072da:	3301      	adds	r3, #1
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d903      	bls.n	80072f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	220d      	movs	r2, #13
 80072f2:	701a      	strb	r2, [r3, #0]
      break;
 80072f4:	e160      	b.n	80075b8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	795b      	ldrb	r3, [r3, #5]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 ff7c 	bl	80081fa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	791b      	ldrb	r3, [r3, #4]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 ff76 	bl	80081fa <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
      break;
 8007314:	e150      	b.n	80075b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007316:	2112      	movs	r1, #18
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f9f1 	bl	8007700 <USBH_Get_DevDesc>
 800731e:	4603      	mov	r3, r0
 8007320:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d103      	bne.n	8007330 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800732e:	e145      	b.n	80075bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	2b03      	cmp	r3, #3
 8007334:	f040 8142 	bne.w	80075bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800733e:	3301      	adds	r3, #1
 8007340:	b2da      	uxtb	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800734e:	2b03      	cmp	r3, #3
 8007350:	d903      	bls.n	800735a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	220d      	movs	r2, #13
 8007356:	701a      	strb	r2, [r3, #0]
      break;
 8007358:	e130      	b.n	80075bc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	795b      	ldrb	r3, [r3, #5]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 ff4a 	bl	80081fa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	791b      	ldrb	r3, [r3, #4]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 ff44 	bl	80081fa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
      break;
 800737e:	e11d      	b.n	80075bc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007380:	2101      	movs	r1, #1
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa72 	bl	800786c <USBH_SetAddress>
 8007388:	4603      	mov	r3, r0
 800738a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d132      	bne.n	80073f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007392:	2002      	movs	r0, #2
 8007394:	f001 fa17 	bl	80087c6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2203      	movs	r2, #3
 80073a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	7919      	ldrb	r1, [r3, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073ba:	b292      	uxth	r2, r2
 80073bc:	9202      	str	r2, [sp, #8]
 80073be:	2200      	movs	r2, #0
 80073c0:	9201      	str	r2, [sp, #4]
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	4603      	mov	r3, r0
 80073c6:	2280      	movs	r2, #128	; 0x80
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fec7 	bl	800815c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	7959      	ldrb	r1, [r3, #5]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073e2:	b292      	uxth	r2, r2
 80073e4:	9202      	str	r2, [sp, #8]
 80073e6:	2200      	movs	r2, #0
 80073e8:	9201      	str	r2, [sp, #4]
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	4603      	mov	r3, r0
 80073ee:	2200      	movs	r2, #0
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 feb3 	bl	800815c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073f6:	e0e3      	b.n	80075c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	f040 80e0 	bne.w	80075c0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	220d      	movs	r2, #13
 8007404:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	705a      	strb	r2, [r3, #1]
      break;
 800740c:	e0d8      	b.n	80075c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800740e:	2109      	movs	r1, #9
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f99e 	bl	8007752 <USBH_Get_CfgDesc>
 8007416:	4603      	mov	r3, r0
 8007418:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d103      	bne.n	8007428 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2204      	movs	r2, #4
 8007424:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007426:	e0cd      	b.n	80075c4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	2b03      	cmp	r3, #3
 800742c:	f040 80ca 	bne.w	80075c4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007436:	3301      	adds	r3, #1
 8007438:	b2da      	uxtb	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007446:	2b03      	cmp	r3, #3
 8007448:	d903      	bls.n	8007452 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	220d      	movs	r2, #13
 800744e:	701a      	strb	r2, [r3, #0]
      break;
 8007450:	e0b8      	b.n	80075c4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	795b      	ldrb	r3, [r3, #5]
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fece 	bl	80081fa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	791b      	ldrb	r3, [r3, #4]
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fec8 	bl	80081fa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	701a      	strb	r2, [r3, #0]
      break;
 8007476:	e0a5      	b.n	80075c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f966 	bl	8007752 <USBH_Get_CfgDesc>
 8007486:	4603      	mov	r3, r0
 8007488:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d103      	bne.n	8007498 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2205      	movs	r2, #5
 8007494:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007496:	e097      	b.n	80075c8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	2b03      	cmp	r3, #3
 800749c:	f040 8094 	bne.w	80075c8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074a6:	3301      	adds	r3, #1
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d903      	bls.n	80074c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	220d      	movs	r2, #13
 80074be:	701a      	strb	r2, [r3, #0]
      break;
 80074c0:	e082      	b.n	80075c8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	795b      	ldrb	r3, [r3, #5]
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fe96 	bl	80081fa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	791b      	ldrb	r3, [r3, #4]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fe90 	bl	80081fa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	701a      	strb	r2, [r3, #0]
      break;
 80074e6:	e06f      	b.n	80075c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d019      	beq.n	8007526 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80074fe:	23ff      	movs	r3, #255	; 0xff
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f94c 	bl	800779e <USBH_Get_StringDesc>
 8007506:	4603      	mov	r3, r0
 8007508:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2206      	movs	r2, #6
 8007514:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007516:	e059      	b.n	80075cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	2b03      	cmp	r3, #3
 800751c:	d156      	bne.n	80075cc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2206      	movs	r2, #6
 8007522:	705a      	strb	r2, [r3, #1]
      break;
 8007524:	e052      	b.n	80075cc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2206      	movs	r2, #6
 800752a:	705a      	strb	r2, [r3, #1]
      break;
 800752c:	e04e      	b.n	80075cc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007534:	2b00      	cmp	r3, #0
 8007536:	d019      	beq.n	800756c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007544:	23ff      	movs	r3, #255	; 0xff
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f929 	bl	800779e <USBH_Get_StringDesc>
 800754c:	4603      	mov	r3, r0
 800754e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2207      	movs	r2, #7
 800755a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800755c:	e038      	b.n	80075d0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	2b03      	cmp	r3, #3
 8007562:	d135      	bne.n	80075d0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2207      	movs	r2, #7
 8007568:	705a      	strb	r2, [r3, #1]
      break;
 800756a:	e031      	b.n	80075d0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2207      	movs	r2, #7
 8007570:	705a      	strb	r2, [r3, #1]
      break;
 8007572:	e02d      	b.n	80075d0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800757a:	2b00      	cmp	r3, #0
 800757c:	d017      	beq.n	80075ae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800758a:	23ff      	movs	r3, #255	; 0xff
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f906 	bl	800779e <USBH_Get_StringDesc>
 8007592:	4603      	mov	r3, r0
 8007594:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d102      	bne.n	80075a2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80075a0:	e018      	b.n	80075d4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d115      	bne.n	80075d4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]
      break;
 80075ac:	e012      	b.n	80075d4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73fb      	strb	r3, [r7, #15]
      break;
 80075b2:	e00f      	b.n	80075d4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80075b4:	bf00      	nop
 80075b6:	e00e      	b.n	80075d6 <USBH_HandleEnum+0x3be>
      break;
 80075b8:	bf00      	nop
 80075ba:	e00c      	b.n	80075d6 <USBH_HandleEnum+0x3be>
      break;
 80075bc:	bf00      	nop
 80075be:	e00a      	b.n	80075d6 <USBH_HandleEnum+0x3be>
      break;
 80075c0:	bf00      	nop
 80075c2:	e008      	b.n	80075d6 <USBH_HandleEnum+0x3be>
      break;
 80075c4:	bf00      	nop
 80075c6:	e006      	b.n	80075d6 <USBH_HandleEnum+0x3be>
      break;
 80075c8:	bf00      	nop
 80075ca:	e004      	b.n	80075d6 <USBH_HandleEnum+0x3be>
      break;
 80075cc:	bf00      	nop
 80075ce:	e002      	b.n	80075d6 <USBH_HandleEnum+0x3be>
      break;
 80075d0:	bf00      	nop
 80075d2:	e000      	b.n	80075d6 <USBH_HandleEnum+0x3be>
      break;
 80075d4:	bf00      	nop
  }
  return Status;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
}
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
  USBH_HandleSof(phost);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f804 	bl	8007622 <USBH_HandleSof>
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b0b      	cmp	r3, #11
 8007632:	d10a      	bne.n	800764a <USBH_HandleSof+0x28>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800763a:	2b00      	cmp	r3, #0
 800763c:	d005      	beq.n	800764a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4798      	blx	r3
  }
}
 800764a:	bf00      	nop
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007662:	bf00      	nop
}
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800767e:	bf00      	nop
}
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 ff34 	bl	8008546 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	791b      	ldrb	r3, [r3, #4]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fd88 	bl	80081fa <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	795b      	ldrb	r3, [r3, #5]
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fd82 	bl	80081fa <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af02      	add	r7, sp, #8
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, 0U,phost->device.Data,
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007712:	78fa      	ldrb	r2, [r7, #3]
 8007714:	b292      	uxth	r2, r2
 8007716:	9201      	str	r2, [sp, #4]
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007720:	2100      	movs	r1, #0
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f868 	bl	80077f8 <USBH_GetDescriptor>
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <USBH_Get_DevDesc+0x48>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800773e:	78fa      	ldrb	r2, [r7, #3]
 8007740:	b292      	uxth	r2, r2
 8007742:	4619      	mov	r1, r3
 8007744:	f000 f921 	bl	800798a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007748:	7bfb      	ldrb	r3, [r7, #15]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007752:	b580      	push	{r7, lr}
 8007754:	b086      	sub	sp, #24
 8007756:	af02      	add	r7, sp, #8
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	460b      	mov	r3, r1
 800775c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	331c      	adds	r3, #28
 8007762:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007764:	887b      	ldrh	r3, [r7, #2]
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	2300      	movs	r3, #0
 800776e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007772:	2100      	movs	r1, #0
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f83f 	bl	80077f8 <USBH_GetDescriptor>
 800777a:	4603      	mov	r3, r0
 800777c:	72fb      	strb	r3, [r7, #11]
 800777e:	7afb      	ldrb	r3, [r7, #11]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d107      	bne.n	8007794 <USBH_Get_CfgDesc+0x42>
                                   USB_DESC_CONFIGURATION,0U,pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800778a:	887a      	ldrh	r2, [r7, #2]
 800778c:	68f9      	ldr	r1, [r7, #12]
 800778e:	4618      	mov	r0, r3
 8007790:	f000 f96b 	bl	8007a6a <USBH_ParseCfgDesc>
  }

  return status;
 8007794:	7afb      	ldrb	r3, [r7, #11]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b088      	sub	sp, #32
 80077a2:	af02      	add	r7, sp, #8
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	461a      	mov	r2, r3
 80077aa:	460b      	mov	r3, r1
 80077ac:	72fb      	strb	r3, [r7, #11]
 80077ae:	4613      	mov	r3, r2
 80077b0:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80077b2:	7afb      	ldrb	r3, [r7, #11]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80077ba:	b299      	uxth	r1, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,0U,
                                   phost->device.Data, length)) == USBH_OK)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80077c2:	893a      	ldrh	r2, [r7, #8]
 80077c4:	9201      	str	r2, [sp, #4]
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	2300      	movs	r3, #0
 80077ca:	460a      	mov	r2, r1
 80077cc:	2100      	movs	r1, #0
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f812 	bl	80077f8 <USBH_GetDescriptor>
 80077d4:	4603      	mov	r3, r0
 80077d6:	75fb      	strb	r3, [r7, #23]
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d107      	bne.n	80077ee <USBH_Get_StringDesc+0x50>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80077e4:	893a      	ldrh	r2, [r7, #8]
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fa3c 	bl	8007c66 <USBH_ParseStringDesc>
  }

  return status;
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBH_GetDescriptor>:
                                      uint8_t  req_type,
                                      uint16_t value_idx,
									  uint8_t iface_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	4608      	mov	r0, r1
 8007802:	4611      	mov	r1, r2
 8007804:	461a      	mov	r2, r3
 8007806:	4603      	mov	r3, r0
 8007808:	70fb      	strb	r3, [r7, #3]
 800780a:	460b      	mov	r3, r1
 800780c:	803b      	strh	r3, [r7, #0]
 800780e:	4613      	mov	r3, r2
 8007810:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	789b      	ldrb	r3, [r3, #2]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d11d      	bne.n	8007856 <USBH_GetDescriptor+0x5e>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007820:	b2da      	uxtb	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2206      	movs	r2, #6
 800782a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	883a      	ldrh	r2, [r7, #0]
 8007830:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007832:	883b      	ldrh	r3, [r7, #0]
 8007834:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800783c:	d104      	bne.n	8007848 <USBH_GetDescriptor+0x50>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f240 4209 	movw	r2, #1033	; 0x409
 8007844:	829a      	strh	r2, [r3, #20]
 8007846:	e003      	b.n	8007850 <USBH_GetDescriptor+0x58>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = iface_idx;
 8007848:	78bb      	ldrb	r3, [r7, #2]
 800784a:	b29a      	uxth	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	8aba      	ldrh	r2, [r7, #20]
 8007854:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007856:	8abb      	ldrh	r3, [r7, #20]
 8007858:	461a      	mov	r2, r3
 800785a:	6939      	ldr	r1, [r7, #16]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fa50 	bl	8007d02 <USBH_CtlReq>
 8007862:	4603      	mov	r3, r0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	789b      	ldrb	r3, [r3, #2]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d10f      	bne.n	80078a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2205      	movs	r2, #5
 800788a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80078a0:	2200      	movs	r2, #0
 80078a2:	2100      	movs	r1, #0
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fa2c 	bl	8007d02 <USBH_CtlReq>
 80078aa:	4603      	mov	r3, r0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	789b      	ldrb	r3, [r3, #2]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d10e      	bne.n	80078e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2209      	movs	r2, #9
 80078d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	887a      	ldrh	r2, [r7, #2]
 80078d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80078e6:	2200      	movs	r2, #0
 80078e8:	2100      	movs	r1, #0
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa09 	bl	8007d02 <USBH_CtlReq>
 80078f0:	4603      	mov	r3, r0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	789b      	ldrb	r3, [r3, #2]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d10f      	bne.n	800792e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2203      	movs	r2, #3
 8007918:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	b29a      	uxth	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800792e:	2200      	movs	r2, #0
 8007930:	2100      	movs	r1, #0
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f9e5 	bl	8007d02 <USBH_CtlReq>
 8007938:	4603      	mov	r3, r0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	789b      	ldrb	r3, [r3, #2]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d10f      	bne.n	8007976 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2202      	movs	r2, #2
 800795a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	b29a      	uxth	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007976:	2200      	movs	r2, #0
 8007978:	2100      	movs	r1, #0
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f9c1 	bl	8007d02 <USBH_CtlReq>
 8007980:	4603      	mov	r3, r0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800798a:	b480      	push	{r7}
 800798c:	b085      	sub	sp, #20
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	4613      	mov	r3, r2
 8007996:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	781a      	ldrb	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	785a      	ldrb	r2, [r3, #1]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	3302      	adds	r3, #2
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	3303      	adds	r3, #3
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	021b      	lsls	r3, r3, #8
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	4313      	orrs	r3, r2
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	791a      	ldrb	r2, [r3, #4]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	795a      	ldrb	r2, [r3, #5]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	799a      	ldrb	r2, [r3, #6]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	79da      	ldrb	r2, [r3, #7]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80079e4:	88fb      	ldrh	r3, [r7, #6]
 80079e6:	2b08      	cmp	r3, #8
 80079e8:	d939      	bls.n	8007a5e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	3308      	adds	r3, #8
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	3309      	adds	r3, #9
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	021b      	lsls	r3, r3, #8
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	4313      	orrs	r3, r2
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	330a      	adds	r3, #10
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	330b      	adds	r3, #11
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	330c      	adds	r3, #12
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	330d      	adds	r3, #13
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	4313      	orrs	r3, r2
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	7b9a      	ldrb	r2, [r3, #14]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	7bda      	ldrb	r2, [r3, #15]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	7c1a      	ldrb	r2, [r3, #16]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	7c5a      	ldrb	r2, [r3, #17]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	745a      	strb	r2, [r3, #17]
  }
}
 8007a5e:	bf00      	nop
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b08a      	sub	sp, #40	; 0x28
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	4613      	mov	r3, r2
 8007a76:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	781a      	ldrb	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	785a      	ldrb	r2, [r3, #1]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	3302      	adds	r3, #2
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	3303      	adds	r3, #3
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	791a      	ldrb	r2, [r3, #4]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	795a      	ldrb	r2, [r3, #5]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	799a      	ldrb	r2, [r3, #6]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	79da      	ldrb	r2, [r3, #7]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	7a1a      	ldrb	r2, [r3, #8]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007ae0:	88fb      	ldrh	r3, [r7, #6]
 8007ae2:	2b09      	cmp	r3, #9
 8007ae4:	d95f      	bls.n	8007ba6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007ae6:	2309      	movs	r3, #9
 8007ae8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007aee:	e051      	b.n	8007b94 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007af0:	f107 0316 	add.w	r3, r7, #22
 8007af4:	4619      	mov	r1, r3
 8007af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007af8:	f000 f8e8 	bl	8007ccc <USBH_GetNextDesc>
 8007afc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d146      	bne.n	8007b94 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b0a:	221a      	movs	r2, #26
 8007b0c:	fb02 f303 	mul.w	r3, r2, r3
 8007b10:	3308      	adds	r3, #8
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4413      	add	r3, r2
 8007b16:	3302      	adds	r3, #2
 8007b18:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007b1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b1c:	69f8      	ldr	r0, [r7, #28]
 8007b1e:	f000 f846 	bl	8007bae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b2c:	e022      	b.n	8007b74 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007b2e:	f107 0316 	add.w	r3, r7, #22
 8007b32:	4619      	mov	r1, r3
 8007b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b36:	f000 f8c9 	bl	8007ccc <USBH_GetNextDesc>
 8007b3a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	2b05      	cmp	r3, #5
 8007b42:	d117      	bne.n	8007b74 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b48:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007b4c:	3201      	adds	r2, #1
 8007b4e:	00d2      	lsls	r2, r2, #3
 8007b50:	211a      	movs	r1, #26
 8007b52:	fb01 f303 	mul.w	r3, r1, r3
 8007b56:	4413      	add	r3, r2
 8007b58:	3308      	adds	r3, #8
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	3304      	adds	r3, #4
 8007b60:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b64:	69b8      	ldr	r0, [r7, #24]
 8007b66:	f000 f851 	bl	8007c0c <USBH_ParseEPDesc>
            ep_ix++;
 8007b6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007b6e:	3301      	adds	r3, #1
 8007b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	791b      	ldrb	r3, [r3, #4]
 8007b78:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d204      	bcs.n	8007b8a <USBH_ParseCfgDesc+0x120>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	885a      	ldrh	r2, [r3, #2]
 8007b84:	8afb      	ldrh	r3, [r7, #22]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d8d1      	bhi.n	8007b2e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007b8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b8e:	3301      	adds	r3, #1
 8007b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d804      	bhi.n	8007ba6 <USBH_ParseCfgDesc+0x13c>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	885a      	ldrh	r2, [r3, #2]
 8007ba0:	8afb      	ldrh	r3, [r7, #22]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d8a4      	bhi.n	8007af0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007ba6:	bf00      	nop
 8007ba8:	3728      	adds	r7, #40	; 0x28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b083      	sub	sp, #12
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781a      	ldrb	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	785a      	ldrb	r2, [r3, #1]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	789a      	ldrb	r2, [r3, #2]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	78da      	ldrb	r2, [r3, #3]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	791a      	ldrb	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	795a      	ldrb	r2, [r3, #5]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	799a      	ldrb	r2, [r3, #6]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	79da      	ldrb	r2, [r3, #7]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	7a1a      	ldrb	r2, [r3, #8]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	721a      	strb	r2, [r3, #8]
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	781a      	ldrb	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	785a      	ldrb	r2, [r3, #1]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	789a      	ldrb	r2, [r3, #2]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	78da      	ldrb	r2, [r3, #3]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	3305      	adds	r3, #5
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	799a      	ldrb	r2, [r3, #6]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	719a      	strb	r2, [r3, #6]
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b087      	sub	sp, #28
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	4613      	mov	r3, r2
 8007c72:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3301      	adds	r3, #1
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d120      	bne.n	8007cc0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	1e9a      	subs	r2, r3, #2
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	4293      	cmp	r3, r2
 8007c88:	bf28      	it	cs
 8007c8a:	4613      	movcs	r3, r2
 8007c8c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3302      	adds	r3, #2
 8007c92:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c94:	2300      	movs	r3, #0
 8007c96:	82fb      	strh	r3, [r7, #22]
 8007c98:	e00b      	b.n	8007cb2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c9a:	8afb      	ldrh	r3, [r7, #22]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	781a      	ldrb	r2, [r3, #0]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007cac:	8afb      	ldrh	r3, [r7, #22]
 8007cae:	3302      	adds	r3, #2
 8007cb0:	82fb      	strh	r3, [r7, #22]
 8007cb2:	8afa      	ldrh	r2, [r7, #22]
 8007cb4:	8abb      	ldrh	r3, [r7, #20]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d3ef      	bcc.n	8007c9a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	701a      	strb	r2, [r3, #0]
  }
}
 8007cc0:	bf00      	nop
 8007cc2:	371c      	adds	r7, #28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	881a      	ldrh	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	4413      	add	r3, r2
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b086      	sub	sp, #24
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d10:	2301      	movs	r3, #1
 8007d12:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	789b      	ldrb	r3, [r3, #2]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d002      	beq.n	8007d22 <USBH_CtlReq+0x20>
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d00f      	beq.n	8007d40 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007d20:	e027      	b.n	8007d72 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	88fa      	ldrh	r2, [r7, #6]
 8007d2c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2202      	movs	r2, #2
 8007d38:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d3e:	e018      	b.n	8007d72 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f81b 	bl	8007d7c <USBH_HandleControl>
 8007d46:	4603      	mov	r3, r0
 8007d48:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <USBH_CtlReq+0x54>
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d106      	bne.n	8007d64 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	761a      	strb	r2, [r3, #24]
      break;
 8007d62:	e005      	b.n	8007d70 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d102      	bne.n	8007d70 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	709a      	strb	r2, [r3, #2]
      break;
 8007d70:	bf00      	nop
  }
  return status;
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d84:	2301      	movs	r3, #1
 8007d86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	7e1b      	ldrb	r3, [r3, #24]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	2b0a      	cmp	r3, #10
 8007d94:	f200 8156 	bhi.w	8008044 <USBH_HandleControl+0x2c8>
 8007d98:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <USBH_HandleControl+0x24>)
 8007d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9e:	bf00      	nop
 8007da0:	08007dcd 	.word	0x08007dcd
 8007da4:	08007de7 	.word	0x08007de7
 8007da8:	08007e51 	.word	0x08007e51
 8007dac:	08007e77 	.word	0x08007e77
 8007db0:	08007eaf 	.word	0x08007eaf
 8007db4:	08007ed9 	.word	0x08007ed9
 8007db8:	08007f2b 	.word	0x08007f2b
 8007dbc:	08007f4d 	.word	0x08007f4d
 8007dc0:	08007f89 	.word	0x08007f89
 8007dc4:	08007faf 	.word	0x08007faf
 8007dc8:	08007fed 	.word	0x08007fed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f103 0110 	add.w	r1, r3, #16
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	795b      	ldrb	r3, [r3, #5]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f943 	bl	8008064 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2202      	movs	r2, #2
 8007de2:	761a      	strb	r2, [r3, #24]
      break;
 8007de4:	e139      	b.n	800805a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	795b      	ldrb	r3, [r3, #5]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fc99 	bl	8008724 <USBH_LL_GetURBState>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d11e      	bne.n	8007e3a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	7c1b      	ldrb	r3, [r3, #16]
 8007e00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e04:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	8adb      	ldrh	r3, [r3, #22]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e0e:	7b7b      	ldrb	r3, [r7, #13]
 8007e10:	2b80      	cmp	r3, #128	; 0x80
 8007e12:	d103      	bne.n	8007e1c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2203      	movs	r2, #3
 8007e18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e1a:	e115      	b.n	8008048 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2205      	movs	r2, #5
 8007e20:	761a      	strb	r2, [r3, #24]
      break;
 8007e22:	e111      	b.n	8008048 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007e24:	7b7b      	ldrb	r3, [r7, #13]
 8007e26:	2b80      	cmp	r3, #128	; 0x80
 8007e28:	d103      	bne.n	8007e32 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2209      	movs	r2, #9
 8007e2e:	761a      	strb	r2, [r3, #24]
      break;
 8007e30:	e10a      	b.n	8008048 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2207      	movs	r2, #7
 8007e36:	761a      	strb	r2, [r3, #24]
      break;
 8007e38:	e106      	b.n	8008048 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d003      	beq.n	8007e48 <USBH_HandleControl+0xcc>
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	f040 8100 	bne.w	8008048 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	220b      	movs	r2, #11
 8007e4c:	761a      	strb	r2, [r3, #24]
      break;
 8007e4e:	e0fb      	b.n	8008048 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6899      	ldr	r1, [r3, #8]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	899a      	ldrh	r2, [r3, #12]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	791b      	ldrb	r3, [r3, #4]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f93a 	bl	80080e2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2204      	movs	r2, #4
 8007e72:	761a      	strb	r2, [r3, #24]
      break;
 8007e74:	e0f1      	b.n	800805a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	791b      	ldrb	r3, [r3, #4]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fc51 	bl	8008724 <USBH_LL_GetURBState>
 8007e82:	4603      	mov	r3, r0
 8007e84:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d102      	bne.n	8007e92 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2209      	movs	r2, #9
 8007e90:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	2b05      	cmp	r3, #5
 8007e96:	d102      	bne.n	8007e9e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e9c:	e0d6      	b.n	800804c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	f040 80d3 	bne.w	800804c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	220b      	movs	r2, #11
 8007eaa:	761a      	strb	r2, [r3, #24]
      break;
 8007eac:	e0ce      	b.n	800804c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6899      	ldr	r1, [r3, #8]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	899a      	ldrh	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	795b      	ldrb	r3, [r3, #5]
 8007eba:	2001      	movs	r0, #1
 8007ebc:	9000      	str	r0, [sp, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f8ea 	bl	8008098 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2206      	movs	r2, #6
 8007ed4:	761a      	strb	r2, [r3, #24]
      break;
 8007ed6:	e0c0      	b.n	800805a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	795b      	ldrb	r3, [r3, #5]
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fc20 	bl	8008724 <USBH_LL_GetURBState>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ee8:	7bbb      	ldrb	r3, [r7, #14]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d103      	bne.n	8007ef6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2207      	movs	r2, #7
 8007ef2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ef4:	e0ac      	b.n	8008050 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007ef6:	7bbb      	ldrb	r3, [r7, #14]
 8007ef8:	2b05      	cmp	r3, #5
 8007efa:	d105      	bne.n	8007f08 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	220c      	movs	r2, #12
 8007f00:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f02:	2303      	movs	r3, #3
 8007f04:	73fb      	strb	r3, [r7, #15]
      break;
 8007f06:	e0a3      	b.n	8008050 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d103      	bne.n	8007f16 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2205      	movs	r2, #5
 8007f12:	761a      	strb	r2, [r3, #24]
      break;
 8007f14:	e09c      	b.n	8008050 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007f16:	7bbb      	ldrb	r3, [r7, #14]
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	f040 8099 	bne.w	8008050 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	220b      	movs	r2, #11
 8007f22:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f24:	2302      	movs	r3, #2
 8007f26:	73fb      	strb	r3, [r7, #15]
      break;
 8007f28:	e092      	b.n	8008050 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	791b      	ldrb	r3, [r3, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2100      	movs	r1, #0
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f8d5 	bl	80080e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2208      	movs	r2, #8
 8007f48:	761a      	strb	r2, [r3, #24]

      break;
 8007f4a:	e086      	b.n	800805a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	791b      	ldrb	r3, [r3, #4]
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fbe6 	bl	8008724 <USBH_LL_GetURBState>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d105      	bne.n	8007f6e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	220d      	movs	r2, #13
 8007f66:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f6c:	e072      	b.n	8008054 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f6e:	7bbb      	ldrb	r3, [r7, #14]
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	d103      	bne.n	8007f7c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	220b      	movs	r2, #11
 8007f78:	761a      	strb	r2, [r3, #24]
      break;
 8007f7a:	e06b      	b.n	8008054 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	d168      	bne.n	8008054 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f82:	2303      	movs	r3, #3
 8007f84:	73fb      	strb	r3, [r7, #15]
      break;
 8007f86:	e065      	b.n	8008054 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	795b      	ldrb	r3, [r3, #5]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	9200      	str	r2, [sp, #0]
 8007f90:	2200      	movs	r2, #0
 8007f92:	2100      	movs	r1, #0
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f87f 	bl	8008098 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	220a      	movs	r2, #10
 8007faa:	761a      	strb	r2, [r3, #24]
      break;
 8007fac:	e055      	b.n	800805a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	795b      	ldrb	r3, [r3, #5]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fbb5 	bl	8008724 <USBH_LL_GetURBState>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d105      	bne.n	8007fd0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	220d      	movs	r2, #13
 8007fcc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007fce:	e043      	b.n	8008058 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d103      	bne.n	8007fde <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2209      	movs	r2, #9
 8007fda:	761a      	strb	r2, [r3, #24]
      break;
 8007fdc:	e03c      	b.n	8008058 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d139      	bne.n	8008058 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	220b      	movs	r2, #11
 8007fe8:	761a      	strb	r2, [r3, #24]
      break;
 8007fea:	e035      	b.n	8008058 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	7e5b      	ldrb	r3, [r3, #25]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	765a      	strb	r2, [r3, #25]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	7e5b      	ldrb	r3, [r3, #25]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d806      	bhi.n	800800e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800800c:	e025      	b.n	800805a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8008014:	2106      	movs	r1, #6
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	795b      	ldrb	r3, [r3, #5]
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f8e7 	bl	80081fa <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	791b      	ldrb	r3, [r3, #4]
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f8e1 	bl	80081fa <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800803e:	2302      	movs	r3, #2
 8008040:	73fb      	strb	r3, [r7, #15]
      break;
 8008042:	e00a      	b.n	800805a <USBH_HandleControl+0x2de>

    default:
      break;
 8008044:	bf00      	nop
 8008046:	e008      	b.n	800805a <USBH_HandleControl+0x2de>
      break;
 8008048:	bf00      	nop
 800804a:	e006      	b.n	800805a <USBH_HandleControl+0x2de>
      break;
 800804c:	bf00      	nop
 800804e:	e004      	b.n	800805a <USBH_HandleControl+0x2de>
      break;
 8008050:	bf00      	nop
 8008052:	e002      	b.n	800805a <USBH_HandleControl+0x2de>
      break;
 8008054:	bf00      	nop
 8008056:	e000      	b.n	800805a <USBH_HandleControl+0x2de>
      break;
 8008058:	bf00      	nop
  }

  return status;
 800805a:	7bfb      	ldrb	r3, [r7, #15]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b088      	sub	sp, #32
 8008068:	af04      	add	r7, sp, #16
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4613      	mov	r3, r2
 8008070:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008072:	79f9      	ldrb	r1, [r7, #7]
 8008074:	2300      	movs	r3, #0
 8008076:	9303      	str	r3, [sp, #12]
 8008078:	2308      	movs	r3, #8
 800807a:	9302      	str	r3, [sp, #8]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	2300      	movs	r3, #0
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	2300      	movs	r3, #0
 8008086:	2200      	movs	r2, #0
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 fb1a 	bl	80086c2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af04      	add	r7, sp, #16
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	4611      	mov	r1, r2
 80080a4:	461a      	mov	r2, r3
 80080a6:	460b      	mov	r3, r1
 80080a8:	80fb      	strh	r3, [r7, #6]
 80080aa:	4613      	mov	r3, r2
 80080ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080bc:	7979      	ldrb	r1, [r7, #5]
 80080be:	7e3b      	ldrb	r3, [r7, #24]
 80080c0:	9303      	str	r3, [sp, #12]
 80080c2:	88fb      	ldrh	r3, [r7, #6]
 80080c4:	9302      	str	r3, [sp, #8]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	2301      	movs	r3, #1
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	2300      	movs	r3, #0
 80080d0:	2200      	movs	r2, #0
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 faf5 	bl	80086c2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b088      	sub	sp, #32
 80080e6:	af04      	add	r7, sp, #16
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	4611      	mov	r1, r2
 80080ee:	461a      	mov	r2, r3
 80080f0:	460b      	mov	r3, r1
 80080f2:	80fb      	strh	r3, [r7, #6]
 80080f4:	4613      	mov	r3, r2
 80080f6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080f8:	7979      	ldrb	r1, [r7, #5]
 80080fa:	2300      	movs	r3, #0
 80080fc:	9303      	str	r3, [sp, #12]
 80080fe:	88fb      	ldrh	r3, [r7, #6]
 8008100:	9302      	str	r3, [sp, #8]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	2301      	movs	r3, #1
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	2300      	movs	r3, #0
 800810c:	2201      	movs	r2, #1
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fad7 	bl	80086c2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008114:	2300      	movs	r3, #0

}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b088      	sub	sp, #32
 8008122:	af04      	add	r7, sp, #16
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	4611      	mov	r1, r2
 800812a:	461a      	mov	r2, r3
 800812c:	460b      	mov	r3, r1
 800812e:	71fb      	strb	r3, [r7, #7]
 8008130:	4613      	mov	r3, r2
 8008132:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008134:	79fb      	ldrb	r3, [r7, #7]
 8008136:	b29b      	uxth	r3, r3
 8008138:	79b9      	ldrb	r1, [r7, #6]
 800813a:	2200      	movs	r2, #0
 800813c:	9203      	str	r2, [sp, #12]
 800813e:	9302      	str	r3, [sp, #8]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	2301      	movs	r3, #1
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	2303      	movs	r3, #3
 800814a:	2201      	movs	r2, #1
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 fab8 	bl	80086c2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af04      	add	r7, sp, #16
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	4608      	mov	r0, r1
 8008166:	4611      	mov	r1, r2
 8008168:	461a      	mov	r2, r3
 800816a:	4603      	mov	r3, r0
 800816c:	70fb      	strb	r3, [r7, #3]
 800816e:	460b      	mov	r3, r1
 8008170:	70bb      	strb	r3, [r7, #2]
 8008172:	4613      	mov	r3, r2
 8008174:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008176:	7878      	ldrb	r0, [r7, #1]
 8008178:	78ba      	ldrb	r2, [r7, #2]
 800817a:	78f9      	ldrb	r1, [r7, #3]
 800817c:	8b3b      	ldrh	r3, [r7, #24]
 800817e:	9302      	str	r3, [sp, #8]
 8008180:	7d3b      	ldrb	r3, [r7, #20]
 8008182:	9301      	str	r3, [sp, #4]
 8008184:	7c3b      	ldrb	r3, [r7, #16]
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	4603      	mov	r3, r0
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fa4b 	bl	8008626 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80081a6:	78fb      	ldrb	r3, [r7, #3]
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa6a 	bl	8008684 <USBH_LL_ClosePipe>

  return USBH_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f833 	bl	8008232 <USBH_GetFreePipe>
 80081cc:	4603      	mov	r3, r0
 80081ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80081d0:	89fb      	ldrh	r3, [r7, #14]
 80081d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d009      	beq.n	80081ee <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	89fa      	ldrh	r2, [r7, #14]
 80081de:	f002 020f 	and.w	r2, r2, #15
 80081e2:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	32e2      	adds	r2, #226	; 0xe2
 80081ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 80081ee:	89fb      	ldrh	r3, [r7, #14]
 80081f0:	b2db      	uxtb	r3, r3
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	460b      	mov	r3, r1
 8008204:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008206:	78fb      	ldrb	r3, [r7, #3]
 8008208:	2b0a      	cmp	r3, #10
 800820a:	d80b      	bhi.n	8008224 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800820c:	78fa      	ldrb	r2, [r7, #3]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	32e2      	adds	r2, #226	; 0xe2
 8008212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008216:	78fa      	ldrb	r2, [r7, #3]
 8008218:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	32e2      	adds	r2, #226	; 0xe2
 8008220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008232:	b480      	push	{r7}
 8008234:	b085      	sub	sp, #20
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800823e:	2300      	movs	r3, #0
 8008240:	73fb      	strb	r3, [r7, #15]
 8008242:	e00e      	b.n	8008262 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008244:	7bfa      	ldrb	r2, [r7, #15]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	32e2      	adds	r2, #226	; 0xe2
 800824a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	b29b      	uxth	r3, r3
 800825a:	e007      	b.n	800826c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	3301      	adds	r3, #1
 8008260:	73fb      	strb	r3, [r7, #15]
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	2b0a      	cmp	r3, #10
 8008266:	d9ed      	bls.n	8008244 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008268:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800827c:	2201      	movs	r2, #1
 800827e:	4912      	ldr	r1, [pc, #72]	; (80082c8 <MX_USB_HOST_Init+0x50>)
 8008280:	4812      	ldr	r0, [pc, #72]	; (80082cc <MX_USB_HOST_Init+0x54>)
 8008282:	f7fe fcba 	bl	8006bfa <USBH_Init>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800828c:	f7f8 fa3c 	bl	8000708 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8008290:	490f      	ldr	r1, [pc, #60]	; (80082d0 <MX_USB_HOST_Init+0x58>)
 8008292:	480e      	ldr	r0, [pc, #56]	; (80082cc <MX_USB_HOST_Init+0x54>)
 8008294:	f7fe fd3e 	bl	8006d14 <USBH_RegisterClass>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800829e:	f7f8 fa33 	bl	8000708 <Error_Handler>
  }

  if (USBH_RegisterClass(&hUsbHostFS, USBH_HUB_CLASS) != USBH_OK)
 80082a2:	490c      	ldr	r1, [pc, #48]	; (80082d4 <MX_USB_HOST_Init+0x5c>)
 80082a4:	4809      	ldr	r0, [pc, #36]	; (80082cc <MX_USB_HOST_Init+0x54>)
 80082a6:	f7fe fd35 	bl	8006d14 <USBH_RegisterClass>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <MX_USB_HOST_Init+0x3c>
  {
    Error_Handler();
 80082b0:	f7f8 fa2a 	bl	8000708 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80082b4:	4805      	ldr	r0, [pc, #20]	; (80082cc <MX_USB_HOST_Init+0x54>)
 80082b6:	f7fe fdb9 	bl	8006e2c <USBH_Start>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <MX_USB_HOST_Init+0x4c>
  {
    Error_Handler();
 80082c0:	f7f8 fa22 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80082c4:	bf00      	nop
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	080082ed 	.word	0x080082ed
 80082cc:	20000214 	.word	0x20000214
 80082d0:	20000010 	.word	0x20000010
 80082d4:	20000038 	.word	0x20000038

080082d8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80082dc:	4802      	ldr	r0, [pc, #8]	; (80082e8 <MX_USB_HOST_Process+0x10>)
 80082de:	f7fe fdb5 	bl	8006e4c <USBH_Process>
}
 80082e2:	bf00      	nop
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20000214 	.word	0x20000214

080082ec <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80082f8:	78fb      	ldrb	r3, [r7, #3]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d819      	bhi.n	8008334 <USBH_UserProcess+0x48>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <USBH_UserProcess+0x1c>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	08008335 	.word	0x08008335
 800830c:	08008325 	.word	0x08008325
 8008310:	08008335 	.word	0x08008335
 8008314:	0800832d 	.word	0x0800832d
 8008318:	0800831d 	.word	0x0800831d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800831c:	4b09      	ldr	r3, [pc, #36]	; (8008344 <USBH_UserProcess+0x58>)
 800831e:	2203      	movs	r2, #3
 8008320:	701a      	strb	r2, [r3, #0]
  break;
 8008322:	e008      	b.n	8008336 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008324:	4b07      	ldr	r3, [pc, #28]	; (8008344 <USBH_UserProcess+0x58>)
 8008326:	2202      	movs	r2, #2
 8008328:	701a      	strb	r2, [r3, #0]
  break;
 800832a:	e004      	b.n	8008336 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800832c:	4b05      	ldr	r3, [pc, #20]	; (8008344 <USBH_UserProcess+0x58>)
 800832e:	2201      	movs	r2, #1
 8008330:	701a      	strb	r2, [r3, #0]
  break;
 8008332:	e000      	b.n	8008336 <USBH_UserProcess+0x4a>

  default:
  break;
 8008334:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	200000f1 	.word	0x200000f1

08008348 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08a      	sub	sp, #40	; 0x28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008350:	f107 0314 	add.w	r3, r7, #20
 8008354:	2200      	movs	r2, #0
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	605a      	str	r2, [r3, #4]
 800835a:	609a      	str	r2, [r3, #8]
 800835c:	60da      	str	r2, [r3, #12]
 800835e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008368:	d13a      	bne.n	80083e0 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800836a:	2300      	movs	r3, #0
 800836c:	613b      	str	r3, [r7, #16]
 800836e:	4b1e      	ldr	r3, [pc, #120]	; (80083e8 <HAL_HCD_MspInit+0xa0>)
 8008370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008372:	4a1d      	ldr	r2, [pc, #116]	; (80083e8 <HAL_HCD_MspInit+0xa0>)
 8008374:	f043 0301 	orr.w	r3, r3, #1
 8008378:	6313      	str	r3, [r2, #48]	; 0x30
 800837a:	4b1b      	ldr	r3, [pc, #108]	; (80083e8 <HAL_HCD_MspInit+0xa0>)
 800837c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	613b      	str	r3, [r7, #16]
 8008384:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008386:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800838a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800838c:	2302      	movs	r3, #2
 800838e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008390:	2300      	movs	r3, #0
 8008392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008394:	2303      	movs	r3, #3
 8008396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008398:	230a      	movs	r3, #10
 800839a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800839c:	f107 0314 	add.w	r3, r7, #20
 80083a0:	4619      	mov	r1, r3
 80083a2:	4812      	ldr	r0, [pc, #72]	; (80083ec <HAL_HCD_MspInit+0xa4>)
 80083a4:	f7f8 fe44 	bl	8001030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083a8:	4b0f      	ldr	r3, [pc, #60]	; (80083e8 <HAL_HCD_MspInit+0xa0>)
 80083aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ac:	4a0e      	ldr	r2, [pc, #56]	; (80083e8 <HAL_HCD_MspInit+0xa0>)
 80083ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b2:	6353      	str	r3, [r2, #52]	; 0x34
 80083b4:	2300      	movs	r3, #0
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <HAL_HCD_MspInit+0xa0>)
 80083ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083bc:	4a0a      	ldr	r2, [pc, #40]	; (80083e8 <HAL_HCD_MspInit+0xa0>)
 80083be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083c2:	6453      	str	r3, [r2, #68]	; 0x44
 80083c4:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <HAL_HCD_MspInit+0xa0>)
 80083c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083d0:	2200      	movs	r2, #0
 80083d2:	2100      	movs	r1, #0
 80083d4:	2043      	movs	r0, #67	; 0x43
 80083d6:	f7f8 fe01 	bl	8000fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083da:	2043      	movs	r0, #67	; 0x43
 80083dc:	f7f8 fe1a 	bl	8001014 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083e0:	bf00      	nop
 80083e2:	3728      	adds	r7, #40	; 0x28
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	40023800 	.word	0x40023800
 80083ec:	40020000 	.word	0x40020000

080083f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff f8fd 	bl	80075fe <USBH_LL_IncTimer>
}
 8008404:	bf00      	nop
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff f935 	bl	800768a <USBH_LL_Connect>
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff f93e 	bl	80076b8 <USBH_LL_Disconnect>
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
 8008450:	4613      	mov	r3, r2
 8008452:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff f8ef 	bl	8007652 <USBH_LL_PortEnabled>
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800848a:	4618      	mov	r0, r3
 800848c:	f7ff f8ef 	bl	800766e <USBH_LL_PortDisabled>
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d12a      	bne.n	8008500 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80084aa:	4a18      	ldr	r2, [pc, #96]	; (800850c <USBH_LL_Init+0x74>)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a15      	ldr	r2, [pc, #84]	; (800850c <USBH_LL_Init+0x74>)
 80084b6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084ba:	4b14      	ldr	r3, [pc, #80]	; (800850c <USBH_LL_Init+0x74>)
 80084bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80084c2:	4b12      	ldr	r3, [pc, #72]	; (800850c <USBH_LL_Init+0x74>)
 80084c4:	2208      	movs	r2, #8
 80084c6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80084c8:	4b10      	ldr	r3, [pc, #64]	; (800850c <USBH_LL_Init+0x74>)
 80084ca:	2201      	movs	r2, #1
 80084cc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <USBH_LL_Init+0x74>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80084d4:	4b0d      	ldr	r3, [pc, #52]	; (800850c <USBH_LL_Init+0x74>)
 80084d6:	2202      	movs	r2, #2
 80084d8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084da:	4b0c      	ldr	r3, [pc, #48]	; (800850c <USBH_LL_Init+0x74>)
 80084dc:	2200      	movs	r2, #0
 80084de:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80084e0:	480a      	ldr	r0, [pc, #40]	; (800850c <USBH_LL_Init+0x74>)
 80084e2:	f7f8 ff42 	bl	800136a <HAL_HCD_Init>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084ec:	f7f8 f90c 	bl	8000708 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084f0:	4806      	ldr	r0, [pc, #24]	; (800850c <USBH_LL_Init+0x74>)
 80084f2:	f7f9 fb26 	bl	8001b42 <HAL_HCD_GetCurrentFrame>
 80084f6:	4603      	mov	r3, r0
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7ff f870 	bl	80075e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200005f4 	.word	0x200005f4

08008510 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008526:	4618      	mov	r0, r3
 8008528:	f7f9 fa95 	bl	8001a56 <HAL_HCD_Start>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f952 	bl	80087dc <USBH_Get_USB_Status>
 8008538:	4603      	mov	r3, r0
 800853a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800853c:	7bbb      	ldrb	r3, [r7, #14]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800855c:	4618      	mov	r0, r3
 800855e:	f7f9 fa9d 	bl	8001a9c <HAL_HCD_Stop>
 8008562:	4603      	mov	r3, r0
 8008564:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f937 	bl	80087dc <USBH_Get_USB_Status>
 800856e:	4603      	mov	r3, r0
 8008570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008572:	7bbb      	ldrb	r3, [r7, #14]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008584:	2301      	movs	r3, #1
 8008586:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800858e:	4618      	mov	r0, r3
 8008590:	f7f9 fae5 	bl	8001b5e <HAL_HCD_GetCurrentSpeed>
 8008594:	4603      	mov	r3, r0
 8008596:	2b02      	cmp	r3, #2
 8008598:	d00c      	beq.n	80085b4 <USBH_LL_GetSpeed+0x38>
 800859a:	2b02      	cmp	r3, #2
 800859c:	d80d      	bhi.n	80085ba <USBH_LL_GetSpeed+0x3e>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <USBH_LL_GetSpeed+0x2c>
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d003      	beq.n	80085ae <USBH_LL_GetSpeed+0x32>
 80085a6:	e008      	b.n	80085ba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]
    break;
 80085ac:	e008      	b.n	80085c0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80085ae:	2301      	movs	r3, #1
 80085b0:	73fb      	strb	r3, [r7, #15]
    break;
 80085b2:	e005      	b.n	80085c0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80085b4:	2302      	movs	r3, #2
 80085b6:	73fb      	strb	r3, [r7, #15]
    break;
 80085b8:	e002      	b.n	80085c0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80085ba:	2301      	movs	r3, #1
 80085bc:	73fb      	strb	r3, [r7, #15]
    break;
 80085be:	bf00      	nop
  }
  return  speed;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7f9 fa78 	bl	8001ad6 <HAL_HCD_ResetPort>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 f8f5 	bl	80087dc <USBH_Get_USB_Status>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7f9 fa7f 	bl	8001b1a <HAL_HCD_HC_GetXferCount>
 800861c:	4603      	mov	r3, r0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008626:	b590      	push	{r4, r7, lr}
 8008628:	b089      	sub	sp, #36	; 0x24
 800862a:	af04      	add	r7, sp, #16
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	4608      	mov	r0, r1
 8008630:	4611      	mov	r1, r2
 8008632:	461a      	mov	r2, r3
 8008634:	4603      	mov	r3, r0
 8008636:	70fb      	strb	r3, [r7, #3]
 8008638:	460b      	mov	r3, r1
 800863a:	70bb      	strb	r3, [r7, #2]
 800863c:	4613      	mov	r3, r2
 800863e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800864e:	787c      	ldrb	r4, [r7, #1]
 8008650:	78ba      	ldrb	r2, [r7, #2]
 8008652:	78f9      	ldrb	r1, [r7, #3]
 8008654:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008656:	9302      	str	r3, [sp, #8]
 8008658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	4623      	mov	r3, r4
 8008666:	f7f8 fee2 	bl	800142e <HAL_HCD_HC_Init>
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 f8b3 	bl	80087dc <USBH_Get_USB_Status>
 8008676:	4603      	mov	r3, r0
 8008678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800867a:	7bbb      	ldrb	r3, [r7, #14]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	bd90      	pop	{r4, r7, pc}

08008684 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800869e:	78fa      	ldrb	r2, [r7, #3]
 80086a0:	4611      	mov	r1, r2
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7f8 ff52 	bl	800154c <HAL_HCD_HC_Halt>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 f894 	bl	80087dc <USBH_Get_USB_Status>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80086c2:	b590      	push	{r4, r7, lr}
 80086c4:	b089      	sub	sp, #36	; 0x24
 80086c6:	af04      	add	r7, sp, #16
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	4608      	mov	r0, r1
 80086cc:	4611      	mov	r1, r2
 80086ce:	461a      	mov	r2, r3
 80086d0:	4603      	mov	r3, r0
 80086d2:	70fb      	strb	r3, [r7, #3]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70bb      	strb	r3, [r7, #2]
 80086d8:	4613      	mov	r3, r2
 80086da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80086ea:	787c      	ldrb	r4, [r7, #1]
 80086ec:	78ba      	ldrb	r2, [r7, #2]
 80086ee:	78f9      	ldrb	r1, [r7, #3]
 80086f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086f4:	9303      	str	r3, [sp, #12]
 80086f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086f8:	9302      	str	r3, [sp, #8]
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	4623      	mov	r3, r4
 8008706:	f7f8 ff45 	bl	8001594 <HAL_HCD_HC_SubmitRequest>
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f863 	bl	80087dc <USBH_Get_USB_Status>
 8008716:	4603      	mov	r3, r0
 8008718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871a:	7bbb      	ldrb	r3, [r7, #14]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	bd90      	pop	{r4, r7, pc}

08008724 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008736:	78fa      	ldrb	r2, [r7, #3]
 8008738:	4611      	mov	r1, r2
 800873a:	4618      	mov	r0, r3
 800873c:	f7f9 f9d9 	bl	8001af2 <HAL_HCD_HC_GetURBState>
 8008740:	4603      	mov	r3, r0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	460b      	mov	r3, r1
 8008754:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8008756:	20c8      	movs	r0, #200	; 0xc8
 8008758:	f7f8 fb64 	bl	8000e24 <HAL_Delay>
  return USBH_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008766:	b480      	push	{r7}
 8008768:	b085      	sub	sp, #20
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	460b      	mov	r3, r1
 8008770:	70fb      	strb	r3, [r7, #3]
 8008772:	4613      	mov	r3, r2
 8008774:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800877c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800877e:	78fb      	ldrb	r3, [r7, #3]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	212c      	movs	r1, #44	; 0x2c
 8008784:	fb01 f303 	mul.w	r3, r1, r3
 8008788:	4413      	add	r3, r2
 800878a:	333b      	adds	r3, #59	; 0x3b
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d009      	beq.n	80087a6 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008792:	78fb      	ldrb	r3, [r7, #3]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	212c      	movs	r1, #44	; 0x2c
 8008798:	fb01 f303 	mul.w	r3, r1, r3
 800879c:	4413      	add	r3, r2
 800879e:	3354      	adds	r3, #84	; 0x54
 80087a0:	78ba      	ldrb	r2, [r7, #2]
 80087a2:	701a      	strb	r2, [r3, #0]
 80087a4:	e008      	b.n	80087b8 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	212c      	movs	r1, #44	; 0x2c
 80087ac:	fb01 f303 	mul.w	r3, r1, r3
 80087b0:	4413      	add	r3, r2
 80087b2:	3355      	adds	r3, #85	; 0x55
 80087b4:	78ba      	ldrb	r2, [r7, #2]
 80087b6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7f8 fb28 	bl	8000e24 <HAL_Delay>
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d817      	bhi.n	8008820 <USBH_Get_USB_Status+0x44>
 80087f0:	a201      	add	r2, pc, #4	; (adr r2, 80087f8 <USBH_Get_USB_Status+0x1c>)
 80087f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f6:	bf00      	nop
 80087f8:	08008809 	.word	0x08008809
 80087fc:	0800880f 	.word	0x0800880f
 8008800:	08008815 	.word	0x08008815
 8008804:	0800881b 	.word	0x0800881b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
    break;
 800880c:	e00b      	b.n	8008826 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800880e:	2302      	movs	r3, #2
 8008810:	73fb      	strb	r3, [r7, #15]
    break;
 8008812:	e008      	b.n	8008826 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008814:	2301      	movs	r3, #1
 8008816:	73fb      	strb	r3, [r7, #15]
    break;
 8008818:	e005      	b.n	8008826 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800881a:	2302      	movs	r3, #2
 800881c:	73fb      	strb	r3, [r7, #15]
    break;
 800881e:	e002      	b.n	8008826 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008820:	2302      	movs	r3, #2
 8008822:	73fb      	strb	r3, [r7, #15]
    break;
 8008824:	bf00      	nop
  }
  return usb_status;
 8008826:	7bfb      	ldrb	r3, [r7, #15]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <__errno>:
 8008834:	4b01      	ldr	r3, [pc, #4]	; (800883c <__errno+0x8>)
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	20000060 	.word	0x20000060

08008840 <__libc_init_array>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	4d0d      	ldr	r5, [pc, #52]	; (8008878 <__libc_init_array+0x38>)
 8008844:	4c0d      	ldr	r4, [pc, #52]	; (800887c <__libc_init_array+0x3c>)
 8008846:	1b64      	subs	r4, r4, r5
 8008848:	10a4      	asrs	r4, r4, #2
 800884a:	2600      	movs	r6, #0
 800884c:	42a6      	cmp	r6, r4
 800884e:	d109      	bne.n	8008864 <__libc_init_array+0x24>
 8008850:	4d0b      	ldr	r5, [pc, #44]	; (8008880 <__libc_init_array+0x40>)
 8008852:	4c0c      	ldr	r4, [pc, #48]	; (8008884 <__libc_init_array+0x44>)
 8008854:	f000 f8f8 	bl	8008a48 <_init>
 8008858:	1b64      	subs	r4, r4, r5
 800885a:	10a4      	asrs	r4, r4, #2
 800885c:	2600      	movs	r6, #0
 800885e:	42a6      	cmp	r6, r4
 8008860:	d105      	bne.n	800886e <__libc_init_array+0x2e>
 8008862:	bd70      	pop	{r4, r5, r6, pc}
 8008864:	f855 3b04 	ldr.w	r3, [r5], #4
 8008868:	4798      	blx	r3
 800886a:	3601      	adds	r6, #1
 800886c:	e7ee      	b.n	800884c <__libc_init_array+0xc>
 800886e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008872:	4798      	blx	r3
 8008874:	3601      	adds	r6, #1
 8008876:	e7f2      	b.n	800885e <__libc_init_array+0x1e>
 8008878:	08008a88 	.word	0x08008a88
 800887c:	08008a88 	.word	0x08008a88
 8008880:	08008a88 	.word	0x08008a88
 8008884:	08008a8c 	.word	0x08008a8c

08008888 <malloc>:
 8008888:	4b02      	ldr	r3, [pc, #8]	; (8008894 <malloc+0xc>)
 800888a:	4601      	mov	r1, r0
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	f000 b863 	b.w	8008958 <_malloc_r>
 8008892:	bf00      	nop
 8008894:	20000060 	.word	0x20000060

08008898 <free>:
 8008898:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <free+0xc>)
 800889a:	4601      	mov	r1, r0
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	f000 b80b 	b.w	80088b8 <_free_r>
 80088a2:	bf00      	nop
 80088a4:	20000060 	.word	0x20000060

080088a8 <memset>:
 80088a8:	4402      	add	r2, r0
 80088aa:	4603      	mov	r3, r0
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d100      	bne.n	80088b2 <memset+0xa>
 80088b0:	4770      	bx	lr
 80088b2:	f803 1b01 	strb.w	r1, [r3], #1
 80088b6:	e7f9      	b.n	80088ac <memset+0x4>

080088b8 <_free_r>:
 80088b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ba:	2900      	cmp	r1, #0
 80088bc:	d048      	beq.n	8008950 <_free_r+0x98>
 80088be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088c2:	9001      	str	r0, [sp, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f1a1 0404 	sub.w	r4, r1, #4
 80088ca:	bfb8      	it	lt
 80088cc:	18e4      	addlt	r4, r4, r3
 80088ce:	f000 f8ad 	bl	8008a2c <__malloc_lock>
 80088d2:	4a20      	ldr	r2, [pc, #128]	; (8008954 <_free_r+0x9c>)
 80088d4:	9801      	ldr	r0, [sp, #4]
 80088d6:	6813      	ldr	r3, [r2, #0]
 80088d8:	4615      	mov	r5, r2
 80088da:	b933      	cbnz	r3, 80088ea <_free_r+0x32>
 80088dc:	6063      	str	r3, [r4, #4]
 80088de:	6014      	str	r4, [r2, #0]
 80088e0:	b003      	add	sp, #12
 80088e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088e6:	f000 b8a7 	b.w	8008a38 <__malloc_unlock>
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	d90b      	bls.n	8008906 <_free_r+0x4e>
 80088ee:	6821      	ldr	r1, [r4, #0]
 80088f0:	1862      	adds	r2, r4, r1
 80088f2:	4293      	cmp	r3, r2
 80088f4:	bf04      	itt	eq
 80088f6:	681a      	ldreq	r2, [r3, #0]
 80088f8:	685b      	ldreq	r3, [r3, #4]
 80088fa:	6063      	str	r3, [r4, #4]
 80088fc:	bf04      	itt	eq
 80088fe:	1852      	addeq	r2, r2, r1
 8008900:	6022      	streq	r2, [r4, #0]
 8008902:	602c      	str	r4, [r5, #0]
 8008904:	e7ec      	b.n	80088e0 <_free_r+0x28>
 8008906:	461a      	mov	r2, r3
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	b10b      	cbz	r3, 8008910 <_free_r+0x58>
 800890c:	42a3      	cmp	r3, r4
 800890e:	d9fa      	bls.n	8008906 <_free_r+0x4e>
 8008910:	6811      	ldr	r1, [r2, #0]
 8008912:	1855      	adds	r5, r2, r1
 8008914:	42a5      	cmp	r5, r4
 8008916:	d10b      	bne.n	8008930 <_free_r+0x78>
 8008918:	6824      	ldr	r4, [r4, #0]
 800891a:	4421      	add	r1, r4
 800891c:	1854      	adds	r4, r2, r1
 800891e:	42a3      	cmp	r3, r4
 8008920:	6011      	str	r1, [r2, #0]
 8008922:	d1dd      	bne.n	80088e0 <_free_r+0x28>
 8008924:	681c      	ldr	r4, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	6053      	str	r3, [r2, #4]
 800892a:	4421      	add	r1, r4
 800892c:	6011      	str	r1, [r2, #0]
 800892e:	e7d7      	b.n	80088e0 <_free_r+0x28>
 8008930:	d902      	bls.n	8008938 <_free_r+0x80>
 8008932:	230c      	movs	r3, #12
 8008934:	6003      	str	r3, [r0, #0]
 8008936:	e7d3      	b.n	80088e0 <_free_r+0x28>
 8008938:	6825      	ldr	r5, [r4, #0]
 800893a:	1961      	adds	r1, r4, r5
 800893c:	428b      	cmp	r3, r1
 800893e:	bf04      	itt	eq
 8008940:	6819      	ldreq	r1, [r3, #0]
 8008942:	685b      	ldreq	r3, [r3, #4]
 8008944:	6063      	str	r3, [r4, #4]
 8008946:	bf04      	itt	eq
 8008948:	1949      	addeq	r1, r1, r5
 800894a:	6021      	streq	r1, [r4, #0]
 800894c:	6054      	str	r4, [r2, #4]
 800894e:	e7c7      	b.n	80088e0 <_free_r+0x28>
 8008950:	b003      	add	sp, #12
 8008952:	bd30      	pop	{r4, r5, pc}
 8008954:	200000f4 	.word	0x200000f4

08008958 <_malloc_r>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	1ccd      	adds	r5, r1, #3
 800895c:	f025 0503 	bic.w	r5, r5, #3
 8008960:	3508      	adds	r5, #8
 8008962:	2d0c      	cmp	r5, #12
 8008964:	bf38      	it	cc
 8008966:	250c      	movcc	r5, #12
 8008968:	2d00      	cmp	r5, #0
 800896a:	4606      	mov	r6, r0
 800896c:	db01      	blt.n	8008972 <_malloc_r+0x1a>
 800896e:	42a9      	cmp	r1, r5
 8008970:	d903      	bls.n	800897a <_malloc_r+0x22>
 8008972:	230c      	movs	r3, #12
 8008974:	6033      	str	r3, [r6, #0]
 8008976:	2000      	movs	r0, #0
 8008978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897a:	f000 f857 	bl	8008a2c <__malloc_lock>
 800897e:	4921      	ldr	r1, [pc, #132]	; (8008a04 <_malloc_r+0xac>)
 8008980:	680a      	ldr	r2, [r1, #0]
 8008982:	4614      	mov	r4, r2
 8008984:	b99c      	cbnz	r4, 80089ae <_malloc_r+0x56>
 8008986:	4f20      	ldr	r7, [pc, #128]	; (8008a08 <_malloc_r+0xb0>)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	b923      	cbnz	r3, 8008996 <_malloc_r+0x3e>
 800898c:	4621      	mov	r1, r4
 800898e:	4630      	mov	r0, r6
 8008990:	f000 f83c 	bl	8008a0c <_sbrk_r>
 8008994:	6038      	str	r0, [r7, #0]
 8008996:	4629      	mov	r1, r5
 8008998:	4630      	mov	r0, r6
 800899a:	f000 f837 	bl	8008a0c <_sbrk_r>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d123      	bne.n	80089ea <_malloc_r+0x92>
 80089a2:	230c      	movs	r3, #12
 80089a4:	6033      	str	r3, [r6, #0]
 80089a6:	4630      	mov	r0, r6
 80089a8:	f000 f846 	bl	8008a38 <__malloc_unlock>
 80089ac:	e7e3      	b.n	8008976 <_malloc_r+0x1e>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	1b5b      	subs	r3, r3, r5
 80089b2:	d417      	bmi.n	80089e4 <_malloc_r+0x8c>
 80089b4:	2b0b      	cmp	r3, #11
 80089b6:	d903      	bls.n	80089c0 <_malloc_r+0x68>
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	441c      	add	r4, r3
 80089bc:	6025      	str	r5, [r4, #0]
 80089be:	e004      	b.n	80089ca <_malloc_r+0x72>
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	42a2      	cmp	r2, r4
 80089c4:	bf0c      	ite	eq
 80089c6:	600b      	streq	r3, [r1, #0]
 80089c8:	6053      	strne	r3, [r2, #4]
 80089ca:	4630      	mov	r0, r6
 80089cc:	f000 f834 	bl	8008a38 <__malloc_unlock>
 80089d0:	f104 000b 	add.w	r0, r4, #11
 80089d4:	1d23      	adds	r3, r4, #4
 80089d6:	f020 0007 	bic.w	r0, r0, #7
 80089da:	1ac2      	subs	r2, r0, r3
 80089dc:	d0cc      	beq.n	8008978 <_malloc_r+0x20>
 80089de:	1a1b      	subs	r3, r3, r0
 80089e0:	50a3      	str	r3, [r4, r2]
 80089e2:	e7c9      	b.n	8008978 <_malloc_r+0x20>
 80089e4:	4622      	mov	r2, r4
 80089e6:	6864      	ldr	r4, [r4, #4]
 80089e8:	e7cc      	b.n	8008984 <_malloc_r+0x2c>
 80089ea:	1cc4      	adds	r4, r0, #3
 80089ec:	f024 0403 	bic.w	r4, r4, #3
 80089f0:	42a0      	cmp	r0, r4
 80089f2:	d0e3      	beq.n	80089bc <_malloc_r+0x64>
 80089f4:	1a21      	subs	r1, r4, r0
 80089f6:	4630      	mov	r0, r6
 80089f8:	f000 f808 	bl	8008a0c <_sbrk_r>
 80089fc:	3001      	adds	r0, #1
 80089fe:	d1dd      	bne.n	80089bc <_malloc_r+0x64>
 8008a00:	e7cf      	b.n	80089a2 <_malloc_r+0x4a>
 8008a02:	bf00      	nop
 8008a04:	200000f4 	.word	0x200000f4
 8008a08:	200000f8 	.word	0x200000f8

08008a0c <_sbrk_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4d06      	ldr	r5, [pc, #24]	; (8008a28 <_sbrk_r+0x1c>)
 8008a10:	2300      	movs	r3, #0
 8008a12:	4604      	mov	r4, r0
 8008a14:	4608      	mov	r0, r1
 8008a16:	602b      	str	r3, [r5, #0]
 8008a18:	f7f8 f870 	bl	8000afc <_sbrk>
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d102      	bne.n	8008a26 <_sbrk_r+0x1a>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	b103      	cbz	r3, 8008a26 <_sbrk_r+0x1a>
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	200008f8 	.word	0x200008f8

08008a2c <__malloc_lock>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	; (8008a34 <__malloc_lock+0x8>)
 8008a2e:	f000 b809 	b.w	8008a44 <__retarget_lock_acquire_recursive>
 8008a32:	bf00      	nop
 8008a34:	20000900 	.word	0x20000900

08008a38 <__malloc_unlock>:
 8008a38:	4801      	ldr	r0, [pc, #4]	; (8008a40 <__malloc_unlock+0x8>)
 8008a3a:	f000 b804 	b.w	8008a46 <__retarget_lock_release_recursive>
 8008a3e:	bf00      	nop
 8008a40:	20000900 	.word	0x20000900

08008a44 <__retarget_lock_acquire_recursive>:
 8008a44:	4770      	bx	lr

08008a46 <__retarget_lock_release_recursive>:
 8008a46:	4770      	bx	lr

08008a48 <_init>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	bf00      	nop
 8008a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4e:	bc08      	pop	{r3}
 8008a50:	469e      	mov	lr, r3
 8008a52:	4770      	bx	lr

08008a54 <_fini>:
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	bf00      	nop
 8008a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5a:	bc08      	pop	{r3}
 8008a5c:	469e      	mov	lr, r3
 8008a5e:	4770      	bx	lr
